//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/jonathanmalek/src/mmecalculator/src/Grammar/DefaultParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PracticeFusion.MmeCalculator.Core.Parsers.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DefaultParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_PAREN=1, CLOSE_PAREN=2, DOT=3, DASH=4, FORWARDSLASH=5, COMMA=6, HALF=7, 
		ONE=8, ONCE=9, TWO=10, TWICE=11, THREE=12, THRICE=13, FOUR=14, FIVE=15, 
		SIX=16, SEVEN=17, EIGHT=18, NINE=19, TEN=20, TWELVE=21, TWENTY=22, THIRTY=23, 
		FORTY=24, SEVENTY=25, FIRST=26, THIRD=27, FOURTH=28, FIFTH=29, SIXTH=30, 
		SEVENTH=31, NUMBER=32, CLOCKNUMBER=33, A_AN=34, ADMINISTER=35, AFTER=36, 
		AM=37, AND=38, APPLY=39, AS=40, AT=41, BEDTIME=42, BREAKFAST=43, BREATH=44, 
		BEFORE=45, BY=46, CHANGE=47, COUGH=48, DINNER=49, DIRECTED=50, DISSOLVE=51, 
		EATING=52, INHALE=53, INFUSE=54, INJECT=55, INSERT=56, IS=57, EACH=58, 
		EMPTY_TOKEN=59, EVENING=60, EVERY=61, FOOD=62, FOR=63, GIVE=64, HEADACHE=65, 
		IN=66, LAST=67, LIQUID=68, LUNCH=69, MAXIMUM=70, MEAL=71, MIDDAY=72, MILK=73, 
		MORNING=74, MUST=75, NAUSEA=76, NEEDED=77, NIGHT=78, NOON=79, NOSTRIL=80, 
		OF=81, ON=82, OR=83, OTHER=84, PAIN=85, PLACE=86, PLENTY=87, PER=88, PM=89, 
		SHORTNESS=90, SLEEP=91, SOB=92, STOMACH=93, SUCK=94, SUPPLY=95, TAKE=96, 
		THE=97, THEN=98, THIS=99, THEREAFTER=100, TIME=101, TIMES=102, TO=103, 
		UNDER=104, UP=105, USE=106, VIA=107, WATER=108, WITH=109, X_X=110, AC=111, 
		BID=112, HS=113, PC=114, PRN=115, Q_Q=116, QAC=117, QAD=118, QAM=119, 
		QD=120, QH=121, QHS=122, QID=123, QN=124, QOD=125, QPC=126, QPM=127, TID=128, 
		APPLICATION=129, CAPSULE=130, CARTRIDGE=131, DOSE=132, DROP=133, ELIXIR=134, 
		FILM=135, INJECTION=136, LOLLIPOP=137, LOZENGE=138, PATCH=139, PILL=140, 
		PUFF=141, SOLUTION=142, SPRAY=143, SUPPOSITORY=144, SUSPENSION=145, SYRINGE=146, 
		SYRUP=147, SYSTEM=148, TABLET=149, TROCHE=150, TDP=151, BUCCAL=152, INJECTABLE=153, 
		NASAL=154, NASALLY=155, ORAL=156, ORALLY=157, PO=158, SL=159, SUBLINGUAL=160, 
		SUBLINGUALLY=161, TRANSDERMAL=162, TRANSDERMALLY=163, MOUTH=164, FEEDING=165, 
		TUBE=166, TONGUE=167, GASTROSTOMY=168, RECTAL=169, RECTALLY=170, INHALED=171, 
		TOPICAL=172, TOPICALLY=173, INTRANASALLY=174, TOSKIN=175, ONSKIN=176, 
		TOUPPERTORSO=177, MILLISECOND=178, SECOND=179, MINUTE=180, HOUR=181, DAY=182, 
		WEEK=183, MONTH=184, YEAR=185, HOURLY=186, DAILY=187, WEEKLY=188, MONTHLY=189, 
		YEARLY=190, MONDAY=191, TUESDAY=192, WEDNESDAY=193, THURSDAY=194, FRIDAY=195, 
		SATURDAY=196, SUNDAY=197, CENTIMETERS=198, CUBICCENTIMETERS=199, GRAMS=200, 
		INTERNATIONALUNITS=201, LITERS=202, MILLIEQUIVALENTS=203, MICROGRAMSPERHOUR=204, 
		MICROGRAMSPERACT=205, MICROGRAMS=206, MILLIGRAMSPERHOUR=207, MILLIGRAMSPERACT=208, 
		MILLIGRAMSPERML=209, MILLIGRAMS=210, MILLILITERS=211, OUNCES=212, TABLESPOONS=213, 
		TEASPOONS=214, BUPRENORPHINE=215, BUTORPHANOL=216, CODEINE=217, DIHYDROCODEINE=218, 
		FENTANYL=219, HYDROCODONE=220, HYDROMORPHONE=221, LEVORPHANOL=222, MEPERIDINE=223, 
		METHADONE=224, MORPHINE=225, OPIUM=226, OXYCODONE=227, OXYMORPHONE=228, 
		PENTAZOCINE=229, TAPENTADOL=230, TRAMADOL=231, SULFATE=232, HCL=233, HYDROCHLORIDE=234, 
		BITARTRATE=235, TARTRATE=236, PHOSPHATE=237, POLISTIREX=238, WS=239, WORD=240, 
		BRANDNAME=241, ANYTOKEN=242;
	public const int
		RULE_sig = 0, RULE_dosage = 1, RULE_dosageSeparator = 2, RULE_doseDeliveryMethod = 3, 
		RULE_ambiguousDose = 4, RULE_doseVal = 5, RULE_dose = 6, RULE_doseUnit = 7, 
		RULE_formExpression = 8, RULE_formRoute = 9, RULE_form = 10, RULE_doseUnitOfMeasure = 11, 
		RULE_route = 12, RULE_routeInstruction = 13, RULE_routeEnum = 14, RULE_frequencies = 15, 
		RULE_frequency = 16, RULE_specialFrequency = 17, RULE_basicFrequency = 18, 
		RULE_periodVal = 19, RULE_maximum = 20, RULE_frequencyVal = 21, RULE_dayFrequency = 22, 
		RULE_latinFrequency = 23, RULE_administrationTiming = 24, RULE_specificTimes = 25, 
		RULE_specificTime = 26, RULE_hour = 27, RULE_hourAndMinute = 28, RULE_timeOfDay = 29, 
		RULE_timingEvent = 30, RULE_latinAdministrationTiming = 31, RULE_periodBeforeOrAfter = 32, 
		RULE_meals = 33, RULE_duration = 34, RULE_durationStandard = 35, RULE_durationOrdinal = 36, 
		RULE_durationUnbounded = 37, RULE_additionalInstruction = 38, RULE_emptyStomach = 39, 
		RULE_asDirected = 40, RULE_withFood = 41, RULE_withLiquid = 42, RULE_indicationForUse = 43, 
		RULE_indicationPrecursor = 44, RULE_indicationValue = 45, RULE_indicationEnum = 46, 
		RULE_ordinalNumeric = 47, RULE_numericValue = 48, RULE_rangeNumericValue = 49, 
		RULE_rangeNumericValueWithUOM = 50, RULE_rangeSeparator = 51, RULE_period = 52, 
		RULE_periodEnum = 53, RULE_dayOfTheWeek = 54, RULE_periodly = 55, RULE_wordNumber = 56, 
		RULE_wordDigit = 57, RULE_medication = 58, RULE_medicationComponent = 59, 
		RULE_simpleMedicationComponent = 60, RULE_complexMedicationComponent = 61, 
		RULE_nonOpioid = 62, RULE_description = 63, RULE_drugForm = 64, RULE_opioid = 65, 
		RULE_drugSuffix = 66, RULE_strength = 67, RULE_brandName = 68, RULE_freeText = 69, 
		RULE_testDose = 70, RULE_testAmbiguousDose = 71, RULE_testFormExpression = 72, 
		RULE_testRoute = 73, RULE_testFrequencies = 74, RULE_testDuration = 75, 
		RULE_testAdditionalInstruction = 76, RULE_testIndicationForUse = 77;
	public static readonly string[] ruleNames = {
		"sig", "dosage", "dosageSeparator", "doseDeliveryMethod", "ambiguousDose", 
		"doseVal", "dose", "doseUnit", "formExpression", "formRoute", "form", 
		"doseUnitOfMeasure", "route", "routeInstruction", "routeEnum", "frequencies", 
		"frequency", "specialFrequency", "basicFrequency", "periodVal", "maximum", 
		"frequencyVal", "dayFrequency", "latinFrequency", "administrationTiming", 
		"specificTimes", "specificTime", "hour", "hourAndMinute", "timeOfDay", 
		"timingEvent", "latinAdministrationTiming", "periodBeforeOrAfter", "meals", 
		"duration", "durationStandard", "durationOrdinal", "durationUnbounded", 
		"additionalInstruction", "emptyStomach", "asDirected", "withFood", "withLiquid", 
		"indicationForUse", "indicationPrecursor", "indicationValue", "indicationEnum", 
		"ordinalNumeric", "numericValue", "rangeNumericValue", "rangeNumericValueWithUOM", 
		"rangeSeparator", "period", "periodEnum", "dayOfTheWeek", "periodly", 
		"wordNumber", "wordDigit", "medication", "medicationComponent", "simpleMedicationComponent", 
		"complexMedicationComponent", "nonOpioid", "description", "drugForm", 
		"opioid", "drugSuffix", "strength", "brandName", "freeText", "testDose", 
		"testAmbiguousDose", "testFormExpression", "testRoute", "testFrequencies", 
		"testDuration", "testAdditionalInstruction", "testIndicationForUse"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'-'", "'/'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_PAREN", "CLOSE_PAREN", "DOT", "DASH", "FORWARDSLASH", "COMMA", 
		"HALF", "ONE", "ONCE", "TWO", "TWICE", "THREE", "THRICE", "FOUR", "FIVE", 
		"SIX", "SEVEN", "EIGHT", "NINE", "TEN", "TWELVE", "TWENTY", "THIRTY", 
		"FORTY", "SEVENTY", "FIRST", "THIRD", "FOURTH", "FIFTH", "SIXTH", "SEVENTH", 
		"NUMBER", "CLOCKNUMBER", "A_AN", "ADMINISTER", "AFTER", "AM", "AND", "APPLY", 
		"AS", "AT", "BEDTIME", "BREAKFAST", "BREATH", "BEFORE", "BY", "CHANGE", 
		"COUGH", "DINNER", "DIRECTED", "DISSOLVE", "EATING", "INHALE", "INFUSE", 
		"INJECT", "INSERT", "IS", "EACH", "EMPTY_TOKEN", "EVENING", "EVERY", "FOOD", 
		"FOR", "GIVE", "HEADACHE", "IN", "LAST", "LIQUID", "LUNCH", "MAXIMUM", 
		"MEAL", "MIDDAY", "MILK", "MORNING", "MUST", "NAUSEA", "NEEDED", "NIGHT", 
		"NOON", "NOSTRIL", "OF", "ON", "OR", "OTHER", "PAIN", "PLACE", "PLENTY", 
		"PER", "PM", "SHORTNESS", "SLEEP", "SOB", "STOMACH", "SUCK", "SUPPLY", 
		"TAKE", "THE", "THEN", "THIS", "THEREAFTER", "TIME", "TIMES", "TO", "UNDER", 
		"UP", "USE", "VIA", "WATER", "WITH", "X_X", "AC", "BID", "HS", "PC", "PRN", 
		"Q_Q", "QAC", "QAD", "QAM", "QD", "QH", "QHS", "QID", "QN", "QOD", "QPC", 
		"QPM", "TID", "APPLICATION", "CAPSULE", "CARTRIDGE", "DOSE", "DROP", "ELIXIR", 
		"FILM", "INJECTION", "LOLLIPOP", "LOZENGE", "PATCH", "PILL", "PUFF", "SOLUTION", 
		"SPRAY", "SUPPOSITORY", "SUSPENSION", "SYRINGE", "SYRUP", "SYSTEM", "TABLET", 
		"TROCHE", "TDP", "BUCCAL", "INJECTABLE", "NASAL", "NASALLY", "ORAL", "ORALLY", 
		"PO", "SL", "SUBLINGUAL", "SUBLINGUALLY", "TRANSDERMAL", "TRANSDERMALLY", 
		"MOUTH", "FEEDING", "TUBE", "TONGUE", "GASTROSTOMY", "RECTAL", "RECTALLY", 
		"INHALED", "TOPICAL", "TOPICALLY", "INTRANASALLY", "TOSKIN", "ONSKIN", 
		"TOUPPERTORSO", "MILLISECOND", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", 
		"MONTH", "YEAR", "HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY", "MONDAY", 
		"TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY", "CENTIMETERS", 
		"CUBICCENTIMETERS", "GRAMS", "INTERNATIONALUNITS", "LITERS", "MILLIEQUIVALENTS", 
		"MICROGRAMSPERHOUR", "MICROGRAMSPERACT", "MICROGRAMS", "MILLIGRAMSPERHOUR", 
		"MILLIGRAMSPERACT", "MILLIGRAMSPERML", "MILLIGRAMS", "MILLILITERS", "OUNCES", 
		"TABLESPOONS", "TEASPOONS", "BUPRENORPHINE", "BUTORPHANOL", "CODEINE", 
		"DIHYDROCODEINE", "FENTANYL", "HYDROCODONE", "HYDROMORPHONE", "LEVORPHANOL", 
		"MEPERIDINE", "METHADONE", "MORPHINE", "OPIUM", "OXYCODONE", "OXYMORPHONE", 
		"PENTAZOCINE", "TAPENTADOL", "TRAMADOL", "SULFATE", "HCL", "HYDROCHLORIDE", 
		"BITARTRATE", "TARTRATE", "PHOSPHATE", "POLISTIREX", "WS", "WORD", "BRANDNAME", 
		"ANYTOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DefaultParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DefaultParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DefaultParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DefaultParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DosageContext[] dosage() {
			return GetRuleContexts<DosageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DosageContext dosage(int i) {
			return GetRuleContext<DosageContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DefaultParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(DefaultParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(DefaultParser.COMMA, 0); }
		public SigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SigContext sig() {
		SigContext _localctx = new SigContext(Context, State);
		EnterRule(_localctx, 0, RULE_sig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			dosage();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 137360651990324608L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4420599808001L) != 0) {
				{
				{
				State = 157;
				dosage();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==COMMA || _la==WORD) {
				{
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT || _la==COMMA) {
					{
					State = 163;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==COMMA) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 166;
				freeText();
				}
			}

			State = 169;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DosageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousDoseContext ambiguousDose() {
			return GetRuleContext<AmbiguousDoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DosageSeparatorContext dosageSeparator() {
			return GetRuleContext<DosageSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseDeliveryMethodContext doseDeliveryMethod() {
			return GetRuleContext<DoseDeliveryMethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext[] route() {
			return GetRuleContexts<RouteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route(int i) {
			return GetRuleContext<RouteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext[] frequencies() {
			return GetRuleContexts<FrequenciesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext frequencies(int i) {
			return GetRuleContext<FrequenciesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext[] duration() {
			return GetRuleContexts<DurationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration(int i) {
			return GetRuleContext<DurationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext[] additionalInstruction() {
			return GetRuleContexts<AdditionalInstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext additionalInstruction(int i) {
			return GetRuleContext<AdditionalInstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext[] indicationForUse() {
			return GetRuleContexts<IndicationForUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext indicationForUse(int i) {
			return GetRuleContext<IndicationForUseContext>(i);
		}
		public DosageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dosage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDosage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDosage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDosage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DosageContext dosage() {
		DosageContext _localctx = new DosageContext(Context, State);
		EnterRule(_localctx, 2, RULE_dosage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & 1152956688978935809L) != 0) {
				{
				State = 171;
				dosageSeparator();
				}
			}

			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 137360372750352384L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4403419414529L) != 0) {
				{
				State = 174;
				doseDeliveryMethod();
				}
			}

			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 177;
				dose();
				}
				break;
			case 2:
				{
				State = 178;
				ambiguousDose();
				}
				break;
			}
			State = 188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 186;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 181;
						route();
						}
						break;
					case 2:
						{
						State = 182;
						frequencies();
						}
						break;
					case 3:
						{
						State = 183;
						duration();
						}
						break;
					case 4:
						{
						State = 184;
						additionalInstruction();
						}
						break;
					case 5:
						{
						State = 185;
						indicationForUse();
						}
						break;
					}
					} 
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DosageSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(DefaultParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(DefaultParser.OR, 0); }
		public DosageSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dosageSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDosageSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDosageSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDosageSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DosageSeparatorContext dosageSeparator() {
		DosageSeparatorContext _localctx = new DosageSeparatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_dosageSeparator);
		int _la;
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case THEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 191;
					Match(AND);
					}
				}

				State = 194;
				Match(THEN);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				Match(OR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseDeliveryMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMINISTER() { return GetToken(DefaultParser.ADMINISTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLY() { return GetToken(DefaultParser.APPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISSOLVE() { return GetToken(DefaultParser.DISSOLVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GIVE() { return GetToken(DefaultParser.GIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFUSE() { return GetToken(DefaultParser.INFUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHALE() { return GetToken(DefaultParser.INHALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INJECT() { return GetToken(DefaultParser.INJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(DefaultParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACE() { return GetToken(DefaultParser.PLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUCK() { return GetToken(DefaultParser.SUCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAKE() { return GetToken(DefaultParser.TAKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(DefaultParser.USE, 0); }
		public DoseDeliveryMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseDeliveryMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseDeliveryMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseDeliveryMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseDeliveryMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseDeliveryMethodContext doseDeliveryMethod() {
		DoseDeliveryMethodContext _localctx = new DoseDeliveryMethodContext(Context, State);
		EnterRule(_localctx, 6, RULE_doseDeliveryMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 137360372750352384L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4403419414529L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousDoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseValContext doseVal() {
			return GetRuleContext<DoseValContext>(0);
		}
		public AmbiguousDoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousDose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousDoseContext ambiguousDose() {
		AmbiguousDoseContext _localctx = new AmbiguousDoseContext(Context, State);
		EnterRule(_localctx, 8, RULE_ambiguousDose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			doseVal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueContext rangeNumericValue() {
			return GetRuleContext<RangeNumericValueContext>(0);
		}
		public DoseValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseValContext doseVal() {
		DoseValContext _localctx = new DoseValContext(Context, State);
		EnterRule(_localctx, 10, RULE_doseVal);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				numericValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				rangeNumericValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseValContext doseVal() {
			return GetRuleContext<DoseValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitContext doseUnit() {
			return GetRuleContext<DoseUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueWithUOMContext rangeNumericValueWithUOM() {
			return GetRuleContext<RangeNumericValueWithUOMContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(DefaultParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(DefaultParser.CLOSE_PAREN, 0); }
		public DoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseContext dose() {
		DoseContext _localctx = new DoseContext(Context, State);
		EnterRule(_localctx, 12, RULE_dose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 206;
				doseVal();
				State = 207;
				doseUnit();
				}
				break;
			case 2:
				{
				State = 209;
				rangeNumericValueWithUOM();
				}
				break;
			}
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 212;
				Match(OPEN_PAREN);
				State = 213;
				dose();
				State = 214;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext formExpression() {
			return GetRuleContext<FormExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext doseUnitOfMeasure() {
			return GetRuleContext<DoseUnitOfMeasureContext>(0);
		}
		public DoseUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseUnitContext doseUnit() {
		DoseUnitContext _localctx = new DoseUnitContext(Context, State);
		EnterRule(_localctx, 14, RULE_doseUnit);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EACH:
			case LIQUID:
			case APPLICATION:
			case CAPSULE:
			case CARTRIDGE:
			case DOSE:
			case DROP:
			case ELIXIR:
			case FILM:
			case INJECTION:
			case LOLLIPOP:
			case LOZENGE:
			case PATCH:
			case PILL:
			case PUFF:
			case SOLUTION:
			case SPRAY:
			case SUPPOSITORY:
			case SUSPENSION:
			case SYRINGE:
			case SYRUP:
			case SYSTEM:
			case TABLET:
			case TROCHE:
			case TDP:
			case BUCCAL:
			case INJECTABLE:
			case NASAL:
			case ORAL:
			case SUBLINGUAL:
			case TRANSDERMAL:
			case RECTAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				formExpression();
				}
				break;
			case CENTIMETERS:
			case CUBICCENTIMETERS:
			case GRAMS:
			case INTERNATIONALUNITS:
			case LITERS:
			case MILLIEQUIVALENTS:
			case MICROGRAMSPERHOUR:
			case MICROGRAMSPERACT:
			case MICROGRAMS:
			case MILLIGRAMSPERHOUR:
			case MILLIGRAMSPERACT:
			case MILLIGRAMSPERML:
			case MILLIGRAMS:
			case MILLILITERS:
			case OUNCES:
			case TABLESPOONS:
			case TEASPOONS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				doseUnitOfMeasure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormRouteContext formRoute() {
			return GetRuleContext<FormRouteContext>(0);
		}
		public FormExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormExpressionContext formExpression() {
		FormExpressionContext _localctx = new FormExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_formExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 66187L) != 0) {
				{
				State = 222;
				formRoute();
				}
			}

			State = 225;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormRouteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INJECTABLE() { return GetToken(DefaultParser.INJECTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NASAL() { return GetToken(DefaultParser.NASAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORAL() { return GetToken(DefaultParser.ORAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECTAL() { return GetToken(DefaultParser.RECTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBLINGUAL() { return GetToken(DefaultParser.SUBLINGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSDERMAL() { return GetToken(DefaultParser.TRANSDERMAL, 0); }
		public FormRouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formRoute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFormRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFormRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormRoute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormRouteContext formRoute() {
		FormRouteContext _localctx = new FormRouteContext(Context, State);
		EnterRule(_localctx, 18, RULE_formRoute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			_la = TokenStream.LA(1);
			if ( !((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 66187L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION() { return GetToken(DefaultParser.APPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCCAL() { return GetToken(DefaultParser.BUCCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPSULE() { return GetToken(DefaultParser.CAPSULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARTRIDGE() { return GetToken(DefaultParser.CARTRIDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSE() { return GetToken(DefaultParser.DOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(DefaultParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIXIR() { return GetToken(DefaultParser.ELIXIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILM() { return GetToken(DefaultParser.FILM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INJECTION() { return GetToken(DefaultParser.INJECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIQUID() { return GetToken(DefaultParser.LIQUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOLLIPOP() { return GetToken(DefaultParser.LOLLIPOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOZENGE() { return GetToken(DefaultParser.LOZENGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCH() { return GetToken(DefaultParser.PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PILL() { return GetToken(DefaultParser.PILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUFF() { return GetToken(DefaultParser.PUFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOLUTION() { return GetToken(DefaultParser.SOLUTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPRAY() { return GetToken(DefaultParser.SPRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPOSITORY() { return GetToken(DefaultParser.SUPPOSITORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPENSION() { return GetToken(DefaultParser.SUSPENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYRINGE() { return GetToken(DefaultParser.SYRINGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYRUP() { return GetToken(DefaultParser.SYRUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(DefaultParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLET() { return GetToken(DefaultParser.TABLET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDP() { return GetToken(DefaultParser.TDP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TROCHE() { return GetToken(DefaultParser.TROCHE, 0); }
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 20, RULE_form);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			_la = TokenStream.LA(1);
			if ( !(_la==EACH || _la==LIQUID || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 16777215L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseUnitOfMeasureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CENTIMETERS() { return GetToken(DefaultParser.CENTIMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBICCENTIMETERS() { return GetToken(DefaultParser.CUBICCENTIMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMS() { return GetToken(DefaultParser.GRAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNATIONALUNITS() { return GetToken(DefaultParser.INTERNATIONALUNITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERS() { return GetToken(DefaultParser.LITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIEQUIVALENTS() { return GetToken(DefaultParser.MILLIEQUIVALENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROGRAMSPERHOUR() { return GetToken(DefaultParser.MICROGRAMSPERHOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROGRAMSPERACT() { return GetToken(DefaultParser.MICROGRAMSPERACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROGRAMS() { return GetToken(DefaultParser.MICROGRAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMSPERHOUR() { return GetToken(DefaultParser.MILLIGRAMSPERHOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMSPERACT() { return GetToken(DefaultParser.MILLIGRAMSPERACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMSPERML() { return GetToken(DefaultParser.MILLIGRAMSPERML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMS() { return GetToken(DefaultParser.MILLIGRAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLILITERS() { return GetToken(DefaultParser.MILLILITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUNCES() { return GetToken(DefaultParser.OUNCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPOONS() { return GetToken(DefaultParser.TABLESPOONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEASPOONS() { return GetToken(DefaultParser.TEASPOONS, 0); }
		public DoseUnitOfMeasureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseUnitOfMeasure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseUnitOfMeasure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseUnitOfMeasure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseUnitOfMeasure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseUnitOfMeasureContext doseUnitOfMeasure() {
		DoseUnitOfMeasureContext _localctx = new DoseUnitOfMeasureContext(Context, State);
		EnterRule(_localctx, 22, RULE_doseUnitOfMeasure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_la = TokenStream.LA(1);
			if ( !((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 131071L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RouteEnumContext[] routeEnum() {
			return GetRuleContexts<RouteEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteEnumContext routeEnum(int i) {
			return GetRuleContext<RouteEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteInstructionContext routeInstruction() {
			return GetRuleContext<RouteInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARDSLASH() { return GetTokens(DefaultParser.FORWARDSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH(int i) {
			return GetToken(DefaultParser.FORWARDSLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext[] route() {
			return GetRuleContexts<RouteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route(int i) {
			return GetRuleContext<RouteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DefaultParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DefaultParser.OR, i);
		}
		public RouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_route; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteContext route() {
		RouteContext _localctx = new RouteContext(Context, State);
		EnterRule(_localctx, 24, RULE_route);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 233;
				routeInstruction();
				}
				break;
			}
			State = 236;
			routeEnum();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORWARDSLASH) {
				{
				{
				State = 237;
				Match(FORWARDSLASH);
				State = 238;
				routeEnum();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OR) {
						{
						State = 244;
						Match(OR);
						}
					}

					State = 247;
					route();
					}
					} 
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(DefaultParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIA() { return GetToken(DefaultParser.VIA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(DefaultParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHALED() { return GetToken(DefaultParser.INHALED, 0); }
		public RouteInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRouteInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRouteInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteInstructionContext routeInstruction() {
		RouteInstructionContext _localctx = new RouteInstructionContext(Context, State);
		EnterRule(_localctx, 26, RULE_routeInstruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHALED) {
				{
				State = 253;
				Match(INHALED);
				}
			}

			State = 256;
			_la = TokenStream.LA(1);
			if ( !((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 2305847407260205057L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOUTH() { return GetToken(DefaultParser.MOUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORAL() { return GetToken(DefaultParser.ORAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORALLY() { return GetToken(DefaultParser.ORALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PO() { return GetToken(DefaultParser.PO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDER() { return GetToken(DefaultParser.UNDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(DefaultParser.THE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TONGUE() { return GetToken(DefaultParser.TONGUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SL() { return GetToken(DefaultParser.SL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBLINGUAL() { return GetToken(DefaultParser.SUBLINGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBLINGUALLY() { return GetToken(DefaultParser.SUBLINGUALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUBE() { return GetToken(DefaultParser.TUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEEDING() { return GetToken(DefaultParser.FEEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GASTROSTOMY() { return GetToken(DefaultParser.GASTROSTOMY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRANASALLY() { return GetToken(DefaultParser.INTRANASALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NASALLY() { return GetToken(DefaultParser.NASALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOSTRIL() { return GetToken(DefaultParser.NOSTRIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(DefaultParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECTAL() { return GetToken(DefaultParser.RECTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECTALLY() { return GetToken(DefaultParser.RECTALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPICAL() { return GetToken(DefaultParser.TOPICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPICALLY() { return GetToken(DefaultParser.TOPICALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSDERMAL() { return GetToken(DefaultParser.TRANSDERMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSDERMALLY() { return GetToken(DefaultParser.TRANSDERMALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOSKIN() { return GetToken(DefaultParser.TOSKIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONSKIN() { return GetToken(DefaultParser.ONSKIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUPPERTORSO() { return GetToken(DefaultParser.TOUPPERTORSO, 0); }
		public RouteEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRouteEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRouteEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteEnumContext routeEnum() {
		RouteEnumContext _localctx = new RouteEnumContext(Context, State);
		EnterRule(_localctx, 28, RULE_routeEnum);
		int _la;
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MOUTH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				Match(MOUTH);
				}
				break;
			case ORAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				Match(ORAL);
				}
				break;
			case ORALLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				Match(ORALLY);
				}
				break;
			case PO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261;
				Match(PO);
				}
				break;
			case UNDER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 262;
				Match(UNDER);
				State = 263;
				Match(THE);
				State = 264;
				Match(TONGUE);
				}
				break;
			case SL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 265;
				Match(SL);
				}
				break;
			case SUBLINGUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 266;
				Match(SUBLINGUAL);
				}
				break;
			case SUBLINGUALLY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 267;
				Match(SUBLINGUALLY);
				}
				break;
			case FEEDING:
			case GASTROSTOMY:
				EnterOuterAlt(_localctx, 9);
				{
				State = 268;
				_la = TokenStream.LA(1);
				if ( !(_la==FEEDING || _la==GASTROSTOMY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 269;
				Match(TUBE);
				}
				break;
			case INTRANASALLY:
				EnterOuterAlt(_localctx, 10);
				{
				State = 270;
				Match(INTRANASALLY);
				}
				break;
			case NASALLY:
				EnterOuterAlt(_localctx, 11);
				{
				State = 271;
				Match(NASALLY);
				}
				break;
			case EACH:
			case PER:
				EnterOuterAlt(_localctx, 12);
				{
				State = 272;
				_la = TokenStream.LA(1);
				if ( !(_la==EACH || _la==PER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 273;
				Match(NOSTRIL);
				}
				break;
			case RECTAL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 274;
				Match(RECTAL);
				}
				break;
			case RECTALLY:
				EnterOuterAlt(_localctx, 14);
				{
				State = 275;
				Match(RECTALLY);
				}
				break;
			case TOPICAL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 276;
				Match(TOPICAL);
				}
				break;
			case TOPICALLY:
				EnterOuterAlt(_localctx, 16);
				{
				State = 277;
				Match(TOPICALLY);
				}
				break;
			case TRANSDERMAL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 278;
				Match(TRANSDERMAL);
				}
				break;
			case TRANSDERMALLY:
				EnterOuterAlt(_localctx, 18);
				{
				State = 279;
				Match(TRANSDERMALLY);
				}
				break;
			case TOSKIN:
				EnterOuterAlt(_localctx, 19);
				{
				State = 280;
				Match(TOSKIN);
				}
				break;
			case ONSKIN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 281;
				Match(ONSKIN);
				}
				break;
			case TOUPPERTORSO:
				EnterOuterAlt(_localctx, 21);
				{
				State = 282;
				Match(TOUPPERTORSO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequenciesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyContext[] frequency() {
			return GetRuleContexts<FrequencyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyContext frequency(int i) {
			return GetRuleContext<FrequencyContext>(i);
		}
		public FrequenciesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequencies; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequencies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequenciesContext frequencies() {
		FrequenciesContext _localctx = new FrequenciesContext(Context, State);
		EnterRule(_localctx, 30, RULE_frequencies);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			frequency();
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 286;
					frequency();
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialFrequencyContext specialFrequency() {
			return GetRuleContext<SpecialFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicFrequencyContext basicFrequency() {
			return GetRuleContext<BasicFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayFrequencyContext dayFrequency() {
			return GetRuleContext<DayFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LatinFrequencyContext latinFrequency() {
			return GetRuleContext<LatinFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdministrationTimingContext administrationTiming() {
			return GetRuleContext<AdministrationTimingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(DefaultParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		public FrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequencyContext frequency() {
		FrequencyContext _localctx = new FrequencyContext(Context, State);
		EnterRule(_localctx, 32, RULE_frequency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 292;
					Match(AND);
					}
				}

				State = 295;
				Match(CHANGE);
				}
				break;
			}
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 298;
				specialFrequency();
				}
				break;
			case 2:
				{
				State = 299;
				basicFrequency();
				}
				break;
			case 3:
				{
				State = 300;
				dayFrequency();
				}
				break;
			case 4:
				{
				State = 301;
				latinFrequency();
				}
				break;
			case 5:
				{
				State = 302;
				administrationTiming();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext[] numericValue() {
			return GetRuleContexts<NumericValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue(int i) {
			return GetRuleContext<NumericValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(DefaultParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(DefaultParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(DefaultParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH() { return GetToken(DefaultParser.FORWARDSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(DefaultParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(DefaultParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(DefaultParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSE() { return GetToken(DefaultParser.DOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(DefaultParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DefaultParser.NUMBER, 0); }
		public SpecialFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSpecialFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSpecialFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialFrequencyContext specialFrequency() {
		SpecialFrequencyContext _localctx = new SpecialFrequencyContext(Context, State);
		EnterRule(_localctx, 34, RULE_specialFrequency);
		int _la;
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				Match(EVERY);
				State = 306;
				numericValue();
				State = 307;
				Match(HOUR);
				State = 308;
				Match(OPEN_PAREN);
				State = 309;
				numericValue();
				State = 310;
				Match(TIMES);
				State = 311;
				Match(FORWARDSLASH);
				State = 312;
				Match(DAY);
				State = 313;
				Match(CLOSE_PAREN);
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				Match(AS);
				State = 316;
				_la = TokenStream.LA(1);
				if ( !(_la==ONE || _la==NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 317;
				Match(DOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PeriodContext period() {
			return GetRuleContext<PeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LatinFrequencyContext latinFrequency() {
			return GetRuleContext<LatinFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeriodlyContext periodly() {
			return GetRuleContext<PeriodlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaximumContext maximum() {
			return GetRuleContext<MaximumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyValContext frequencyVal() {
			return GetRuleContext<FrequencyValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(DefaultParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN() { return GetToken(DefaultParser.A_AN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q_Q() { return GetToken(DefaultParser.Q_Q, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PeriodValContext periodVal() {
			return GetRuleContext<PeriodValContext>(0);
		}
		public BasicFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterBasicFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitBasicFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicFrequencyContext basicFrequency() {
		BasicFrequencyContext _localctx = new BasicFrequencyContext(Context, State);
		EnterRule(_localctx, 36, RULE_basicFrequency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAXIMUM || _la==UP) {
				{
				State = 320;
				maximum();
				}
			}

			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4362076032L) != 0) {
				{
				State = 323;
				frequencyVal();
				}
			}

			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 326;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2594073402545274880L) != 0 || _la==PER || _la==Q_Q) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4362065280L) != 0) {
					{
					State = 327;
					periodVal();
					}
				}

				State = 330;
				period();
				}
				break;
			case 2:
				{
				State = 331;
				latinFrequency();
				}
				break;
			case 3:
				{
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Q_Q) {
					{
					State = 332;
					Match(Q_Q);
					}
				}

				State = 335;
				periodly();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueContext rangeNumericValue() {
			return GetRuleContext<RangeNumericValueContext>(0);
		}
		public PeriodValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodValContext periodVal() {
		PeriodValContext _localctx = new PeriodValContext(Context, State);
		EnterRule(_localctx, 38, RULE_periodVal);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				numericValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				rangeNumericValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaximumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXIMUM() { return GetToken(DefaultParser.MAXIMUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UP() { return GetToken(DefaultParser.UP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(DefaultParser.TO, 0); }
		public MaximumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maximum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMaximum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMaximum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaximum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaximumContext maximum() {
		MaximumContext _localctx = new MaximumContext(Context, State);
		EnterRule(_localctx, 40, RULE_maximum);
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAXIMUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342;
				Match(MAXIMUM);
				}
				break;
			case UP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				Match(UP);
				State = 344;
				Match(TO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequencyValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(DefaultParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(DefaultParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_X() { return GetToken(DefaultParser.X_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueContext rangeNumericValue() {
			return GetRuleContext<RangeNumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONCE() { return GetToken(DefaultParser.ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWICE() { return GetToken(DefaultParser.TWICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THRICE() { return GetToken(DefaultParser.THRICE, 0); }
		public FrequencyValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequencyVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFrequencyVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFrequencyVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequencyVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequencyValContext frequencyVal() {
		FrequencyValContext _localctx = new FrequencyValContext(Context, State);
		EnterRule(_localctx, 42, RULE_frequencyVal);
		int _la;
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 347;
					numericValue();
					}
					break;
				case 2:
					{
					State = 348;
					rangeNumericValue();
					}
					break;
				}
				State = 351;
				_la = TokenStream.LA(1);
				if ( !((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & 515L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ONCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				Match(ONCE);
				}
				break;
			case TWICE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354;
				Match(TWICE);
				}
				break;
			case THRICE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 355;
				Match(THRICE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DayOfTheWeekContext[] dayOfTheWeek() {
			return GetRuleContexts<DayOfTheWeekContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayOfTheWeekContext dayOfTheWeek(int i) {
			return GetRuleContext<DayOfTheWeekContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(DefaultParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		public DayFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDayFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDayFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayFrequencyContext dayFrequency() {
		DayFrequencyContext _localctx = new DayFrequencyContext(Context, State);
		EnterRule(_localctx, 44, RULE_dayFrequency);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !(_la==EVERY || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 359;
			dayOfTheWeek();
			State = 366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 361;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND) {
						{
						State = 360;
						Match(AND);
						}
					}

					State = 363;
					dayOfTheWeek();
					}
					} 
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LatinFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QD() { return GetToken(DefaultParser.QD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QHS() { return GetToken(DefaultParser.QHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QOD() { return GetToken(DefaultParser.QOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BID() { return GetToken(DefaultParser.BID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TID() { return GetToken(DefaultParser.TID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QID() { return GetToken(DefaultParser.QID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QPM() { return GetToken(DefaultParser.QPM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QN() { return GetToken(DefaultParser.QN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QAM() { return GetToken(DefaultParser.QAM, 0); }
		public LatinFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_latinFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterLatinFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitLatinFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLatinFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LatinFrequencyContext latinFrequency() {
		LatinFrequencyContext _localctx = new LatinFrequencyContext(Context, State);
		EnterRule(_localctx, 46, RULE_latinFrequency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			_la = TokenStream.LA(1);
			if ( !((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 114049L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdministrationTimingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificTimesContext specificTimes() {
			return GetRuleContext<SpecificTimesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayContext timeOfDay() {
			return GetRuleContext<TimeOfDayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimingEventContext timingEvent() {
			return GetRuleContext<TimingEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LatinAdministrationTimingContext latinAdministrationTiming() {
			return GetRuleContext<LatinAdministrationTimingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(DefaultParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(DefaultParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(DefaultParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(DefaultParser.THE, 0); }
		public AdministrationTimingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_administrationTiming; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdministrationTiming(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdministrationTimingContext administrationTiming() {
		AdministrationTimingContext _localctx = new AdministrationTimingContext(Context, State);
		EnterRule(_localctx, 48, RULE_administrationTiming);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 371;
				Match(AND);
				}
			}

			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 374;
				Match(THEN);
				}
			}

			State = 378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 377;
				Match(AT);
				}
				break;
			}
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 380;
				Match(IN);
				}
			}

			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THE) {
				{
				State = 383;
				Match(THE);
				}
			}

			}
			State = 390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 386;
				specificTimes();
				}
				break;
			case 2:
				{
				State = 387;
				timeOfDay();
				}
				break;
			case 3:
				{
				State = 388;
				timingEvent();
				}
				break;
			case 4:
				{
				State = 389;
				latinAdministrationTiming();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificTimesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificTimeContext[] specificTime() {
			return GetRuleContexts<SpecificTimeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecificTimeContext specificTime(int i) {
			return GetRuleContext<SpecificTimeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT() { return GetTokens(DefaultParser.AT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT(int i) {
			return GetToken(DefaultParser.AT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DefaultParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DefaultParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		public SpecificTimesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificTimes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSpecificTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSpecificTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificTimes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificTimesContext specificTimes() {
		SpecificTimesContext _localctx = new SpecificTimesContext(Context, State);
		EnterRule(_localctx, 50, RULE_specificTimes);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			specificTime();
			State = 402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 394;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA || _la==AND) {
						{
						State = 393;
						_la = TokenStream.LA(1);
						if ( !(_la==COMMA || _la==AND) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT) {
						{
						State = 396;
						Match(AT);
						}
					}

					State = 399;
					specificTime();
					}
					} 
				}
				State = 404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificTimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HourContext hour() {
			return GetRuleContext<HourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HourAndMinuteContext hourAndMinute() {
			return GetRuleContext<HourAndMinuteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AM() { return GetToken(DefaultParser.AM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PM() { return GetToken(DefaultParser.PM, 0); }
		public SpecificTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSpecificTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSpecificTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificTimeContext specificTime() {
		SpecificTimeContext _localctx = new SpecificTimeContext(Context, State);
		EnterRule(_localctx, 52, RULE_specificTime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 405;
				hour();
				}
				break;
			case CLOCKNUMBER:
				{
				State = 406;
				hourAndMinute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AM || _la==PM) {
				{
				State = 409;
				_la = TokenStream.LA(1);
				if ( !(_la==AM || _la==PM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DefaultParser.NUMBER, 0); }
		public HourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHour(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HourContext hour() {
		HourContext _localctx = new HourContext(Context, State);
		EnterRule(_localctx, 54, RULE_hour);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HourAndMinuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCKNUMBER() { return GetToken(DefaultParser.CLOCKNUMBER, 0); }
		public HourAndMinuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hourAndMinute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterHourAndMinute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitHourAndMinute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHourAndMinute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HourAndMinuteContext hourAndMinute() {
		HourAndMinuteContext _localctx = new HourAndMinuteContext(Context, State);
		EnterRule(_localctx, 56, RULE_hourAndMinute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(CLOCKNUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORNING() { return GetToken(DefaultParser.MORNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENING() { return GetToken(DefaultParser.EVENING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIGHT() { return GetToken(DefaultParser.NIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEDTIME() { return GetToken(DefaultParser.BEDTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(DefaultParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOON() { return GetToken(DefaultParser.NOON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIDDAY() { return GetToken(DefaultParser.MIDDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(DefaultParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(DefaultParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PeriodBeforeOrAfterContext periodBeforeOrAfter() {
			return GetRuleContext<PeriodBeforeOrAfterContext>(0);
		}
		public TimeOfDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTimeOfDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTimeOfDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayContext timeOfDay() {
		TimeOfDayContext _localctx = new TimeOfDayContext(Context, State);
		EnterRule(_localctx, 58, RULE_timeOfDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EACH || _la==EVERY) {
				{
				State = 416;
				_la = TokenStream.LA(1);
				if ( !(_la==EACH || _la==EVERY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MORNING:
				{
				State = 419;
				Match(MORNING);
				}
				break;
			case AFTER:
			case AT:
			case BEFORE:
			case DAY:
				{
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DAY) {
					{
					State = 420;
					Match(DAY);
					}
				}

				State = 423;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 37452114821120L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 424;
				_la = TokenStream.LA(1);
				if ( !(_la==MIDDAY || _la==NOON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case EVENING:
				{
				State = 425;
				Match(EVENING);
				}
				break;
			case NIGHT:
				{
				State = 426;
				Match(NIGHT);
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TIME) {
					{
					State = 427;
					Match(TIME);
					}
				}

				}
				break;
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
			case NUMBER:
			case BEDTIME:
				{
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4362065280L) != 0) {
					{
					State = 430;
					periodBeforeOrAfter();
					}
				}

				State = 433;
				Match(BEDTIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimingEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MealsContext meals() {
			return GetRuleContext<MealsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DefaultParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PeriodBeforeOrAfterContext periodBeforeOrAfter() {
			return GetRuleContext<PeriodBeforeOrAfterContext>(0);
		}
		public TimingEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timingEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTimingEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTimingEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimingEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimingEventContext timingEvent() {
		TimingEventContext _localctx = new TimingEventContext(Context, State);
		EnterRule(_localctx, 60, RULE_timingEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				{
				State = 436;
				Match(BEFORE);
				}
				break;
			case AFTER:
				{
				State = 437;
				Match(AFTER);
				}
				break;
			case WITH:
				{
				State = 438;
				Match(WITH);
				}
				break;
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
			case NUMBER:
				{
				State = 439;
				periodBeforeOrAfter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 442;
			_la = TokenStream.LA(1);
			if ( !(_la==EACH || _la==EVERY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 443;
			meals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LatinAdministrationTimingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HS() { return GetToken(DefaultParser.HS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QPC() { return GetToken(DefaultParser.QPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QAC() { return GetToken(DefaultParser.QAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		public LatinAdministrationTimingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_latinAdministrationTiming; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterLatinAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitLatinAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLatinAdministrationTiming(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LatinAdministrationTimingContext latinAdministrationTiming() {
		LatinAdministrationTimingContext _localctx = new LatinAdministrationTimingContext(Context, State);
		EnterRule(_localctx, 62, RULE_latinAdministrationTiming);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVERY) {
				{
				State = 445;
				Match(EVERY);
				}
			}

			State = 448;
			_la = TokenStream.LA(1);
			if ( !((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8209L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodBeforeOrAfterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(DefaultParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(DefaultParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		public PeriodBeforeOrAfterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodBeforeOrAfter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodBeforeOrAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodBeforeOrAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodBeforeOrAfter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodBeforeOrAfterContext periodBeforeOrAfter() {
		PeriodBeforeOrAfterContext _localctx = new PeriodBeforeOrAfterContext(Context, State);
		EnterRule(_localctx, 64, RULE_periodBeforeOrAfter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			numericValue();
			State = 451;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUTE || _la==HOUR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 452;
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MealsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEAL() { return GetToken(DefaultParser.MEAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAKFAST() { return GetToken(DefaultParser.BREAKFAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNCH() { return GetToken(DefaultParser.LUNCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DINNER() { return GetToken(DefaultParser.DINNER, 0); }
		public MealsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMeals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMeals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MealsContext meals() {
		MealsContext _localctx = new MealsContext(Context, State);
		EnterRule(_localctx, 66, RULE_meals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = TokenStream.LA(1);
			if ( !((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 335544385L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationStandardContext durationStandard() {
			return GetRuleContext<DurationStandardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationOrdinalContext durationOrdinal() {
			return GetRuleContext<DurationOrdinalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationUnboundedContext durationUnbounded() {
			return GetRuleContext<DurationUnboundedContext>(0);
		}
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(Context, State);
		EnterRule(_localctx, 68, RULE_duration);
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456;
				durationStandard();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 457;
				durationOrdinal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 458;
				durationUnbounded();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationStandardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeriodContext period() {
			return GetRuleContext<PeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(DefaultParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(DefaultParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN() { return GetToken(DefaultParser.A_AN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUST() { return GetToken(DefaultParser.MUST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(DefaultParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_X() { return GetToken(DefaultParser.X_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPLY() { return GetToken(DefaultParser.SUPPLY, 0); }
		public DurationStandardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationStandard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDurationStandard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDurationStandard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationStandard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationStandardContext durationStandard() {
		DurationStandardContext _localctx = new DurationStandardContext(Context, State);
		EnterRule(_localctx, 70, RULE_durationStandard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 461;
				Match(FOR);
				}
				break;
			case THIS:
				{
				State = 462;
				Match(THIS);
				State = 463;
				Match(IS);
				State = 464;
				Match(A_AN);
				}
				break;
			case MUST:
				{
				State = 465;
				Match(MUST);
				State = 466;
				Match(LAST);
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 467;
					Match(FOR);
					}
				}

				}
				break;
			case X_X:
				{
				State = 470;
				Match(X_X);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 473;
			numericValue();
			State = 474;
			period();
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUPPLY) {
				{
				State = 475;
				Match(SUPPLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationOrdinalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(DefaultParser.THE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrdinalNumericContext ordinalNumeric() {
			return GetRuleContext<OrdinalNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeriodContext period() {
			return GetRuleContext<PeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(DefaultParser.ON, 0); }
		public DurationOrdinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationOrdinal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDurationOrdinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDurationOrdinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationOrdinal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationOrdinalContext durationOrdinal() {
		DurationOrdinalContext _localctx = new DurationOrdinalContext(Context, State);
		EnterRule(_localctx, 72, RULE_durationOrdinal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			_la = TokenStream.LA(1);
			if ( !(_la==FOR || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 479;
			Match(THE);
			State = 480;
			ordinalNumeric();
			State = 481;
			period();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationUnboundedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEREAFTER() { return GetToken(DefaultParser.THEREAFTER, 0); }
		public DurationUnboundedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationUnbounded; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDurationUnbounded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDurationUnbounded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationUnbounded(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationUnboundedContext durationUnbounded() {
		DurationUnboundedContext _localctx = new DurationUnboundedContext(Context, State);
		EnterRule(_localctx, 74, RULE_durationUnbounded);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(THEREAFTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WithFoodContext withFood() {
			return GetRuleContext<WithFoodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithLiquidContext withLiquid() {
			return GetRuleContext<WithLiquidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsDirectedContext asDirected() {
			return GetRuleContext<AsDirectedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStomachContext emptyStomach() {
			return GetRuleContext<EmptyStomachContext>(0);
		}
		public AdditionalInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalInstructionContext additionalInstruction() {
		AdditionalInstructionContext _localctx = new AdditionalInstructionContext(Context, State);
		EnterRule(_localctx, 76, RULE_additionalInstruction);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485;
				withFood();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				withLiquid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 487;
				asDirected();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 488;
				emptyStomach();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStomachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(DefaultParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_TOKEN() { return GetToken(DefaultParser.EMPTY_TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOMACH() { return GetToken(DefaultParser.STOMACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN() { return GetToken(DefaultParser.A_AN, 0); }
		public EmptyStomachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStomach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterEmptyStomach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitEmptyStomach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStomach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStomachContext emptyStomach() {
		EmptyStomachContext _localctx = new EmptyStomachContext(Context, State);
		EnterRule(_localctx, 78, RULE_emptyStomach);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(ON);
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A_AN) {
				{
				State = 492;
				Match(A_AN);
				}
			}

			State = 495;
			Match(EMPTY_TOKEN);
			State = 496;
			Match(STOMACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsDirectedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(DefaultParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTED() { return GetToken(DefaultParser.DIRECTED, 0); }
		public AsDirectedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asDirected; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAsDirected(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAsDirected(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsDirected(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsDirectedContext asDirected() {
		AsDirectedContext _localctx = new AsDirectedContext(Context, State);
		EnterRule(_localctx, 80, RULE_asDirected);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(AS);
			State = 499;
			Match(DIRECTED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithFoodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DefaultParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEAL() { return GetToken(DefaultParser.MEAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOOD() { return GetToken(DefaultParser.FOOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EATING() { return GetToken(DefaultParser.EATING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(DefaultParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PC() { return GetToken(DefaultParser.PC, 0); }
		public WithFoodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withFood; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWithFood(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWithFood(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithFood(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithFoodContext withFood() {
		WithFoodContext _localctx = new WithFoodContext(Context, State);
		EnterRule(_localctx, 82, RULE_withFood);
		int _la;
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFTER:
			case BEFORE:
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				_la = TokenStream.LA(1);
				if ( !(_la==AFTER || _la==BEFORE || _la==WITH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 502;
				_la = TokenStream.LA(1);
				if ( !((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 525313L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case AC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 503;
				Match(AC);
				}
				break;
			case PC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 504;
				Match(PC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithLiquidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DefaultParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WATER() { return GetToken(DefaultParser.WATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILK() { return GetToken(DefaultParser.MILK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIQUID() { return GetToken(DefaultParser.LIQUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLENTY() { return GetToken(DefaultParser.PLENTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(DefaultParser.OF, 0); }
		public WithLiquidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withLiquid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWithLiquid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWithLiquid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithLiquid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithLiquidContext withLiquid() {
		WithLiquidContext _localctx = new WithLiquidContext(Context, State);
		EnterRule(_localctx, 84, RULE_withLiquid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(WITH);
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLENTY) {
				{
				State = 508;
				Match(PLENTY);
				State = 509;
				Match(OF);
				}
			}

			State = 512;
			_la = TokenStream.LA(1);
			if ( !((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 1099511627809L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationForUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndicationValueContext indicationValue() {
			return GetRuleContext<IndicationValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndicationPrecursorContext indicationPrecursor() {
			return GetRuleContext<IndicationPrecursorContext>(0);
		}
		public IndicationForUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationForUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationForUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationForUseContext indicationForUse() {
		IndicationForUseContext _localctx = new IndicationForUseContext(Context, State);
		EnterRule(_localctx, 86, RULE_indicationForUse);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 514;
					Match(FOR);
					}
					break;
				case AS:
				case PRN:
					{
					State = 515;
					indicationPrecursor();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 518;
				indicationValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519;
				indicationPrecursor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationPrecursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(DefaultParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEEDED() { return GetToken(DefaultParser.NEEDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRN() { return GetToken(DefaultParser.PRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		public IndicationPrecursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationPrecursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationPrecursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationPrecursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationPrecursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationPrecursorContext indicationPrecursor() {
		IndicationPrecursorContext _localctx = new IndicationPrecursorContext(Context, State);
		EnterRule(_localctx, 88, RULE_indicationPrecursor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 522;
				Match(AS);
				State = 523;
				Match(NEEDED);
				}
				break;
			case PRN:
				{
				State = 524;
				Match(PRN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 527;
				Match(FOR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext[] freeText() {
			return GetRuleContexts<FreeTextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText(int i) {
			return GetRuleContext<FreeTextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationEnumContext[] indicationEnum() {
			return GetRuleContexts<IndicationEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationEnumContext indicationEnum(int i) {
			return GetRuleContext<IndicationEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DefaultParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DefaultParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(DefaultParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(DefaultParser.TO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARDSLASH() { return GetTokens(DefaultParser.FORWARDSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH(int i) {
			return GetToken(DefaultParser.FORWARDSLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(DefaultParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(DefaultParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THE() { return GetTokens(DefaultParser.THE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE(int i) {
			return GetToken(DefaultParser.THE, i);
		}
		public IndicationValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationValueContext indicationValue() {
		IndicationValueContext _localctx = new IndicationValueContext(Context, State);
		EnterRule(_localctx, 90, RULE_indicationValue);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 538;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WORD:
						{
						State = 530;
						freeText();
						}
						break;
					case COUGH:
					case HEADACHE:
					case NAUSEA:
					case PAIN:
					case SHORTNESS:
					case SLEEP:
					case SOB:
						{
						State = 531;
						indicationEnum();
						}
						break;
					case OR:
						{
						State = 532;
						Match(OR);
						}
						break;
					case AND:
						{
						State = 533;
						Match(AND);
						}
						break;
					case TO:
						{
						State = 534;
						Match(TO);
						}
						break;
					case FORWARDSLASH:
						{
						State = 535;
						Match(FORWARDSLASH);
						}
						break;
					case IN:
						{
						State = 536;
						Match(IN);
						}
						break;
					case THE:
						{
						State = 537;
						Match(THE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 540;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUGH() { return GetToken(DefaultParser.COUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADACHE() { return GetToken(DefaultParser.HEADACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAUSEA() { return GetToken(DefaultParser.NAUSEA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAIN() { return GetToken(DefaultParser.PAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLEEP() { return GetToken(DefaultParser.SLEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTNESS() { return GetToken(DefaultParser.SHORTNESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(DefaultParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREATH() { return GetToken(DefaultParser.BREATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOB() { return GetToken(DefaultParser.SOB, 0); }
		public IndicationEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationEnumContext indicationEnum() {
		IndicationEnumContext _localctx = new IndicationEnumContext(Context, State);
		EnterRule(_localctx, 92, RULE_indicationEnum);
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COUGH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542;
				Match(COUGH);
				}
				break;
			case HEADACHE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543;
				Match(HEADACHE);
				}
				break;
			case NAUSEA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 544;
				Match(NAUSEA);
				}
				break;
			case PAIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 545;
				Match(PAIN);
				}
				break;
			case SLEEP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 546;
				Match(SLEEP);
				}
				break;
			case SHORTNESS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 547;
				Match(SHORTNESS);
				State = 548;
				Match(OF);
				State = 549;
				Match(BREATH);
				}
				break;
			case SOB:
				EnterOuterAlt(_localctx, 7);
				{
				State = 550;
				Match(SOB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrdinalNumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(DefaultParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(DefaultParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIRD() { return GetToken(DefaultParser.THIRD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOURTH() { return GetToken(DefaultParser.FOURTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIFTH() { return GetToken(DefaultParser.FIFTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIXTH() { return GetToken(DefaultParser.SIXTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVENTH() { return GetToken(DefaultParser.SEVENTH, 0); }
		public OrdinalNumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinalNumeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterOrdinalNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitOrdinalNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdinalNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrdinalNumericContext ordinalNumeric() {
		OrdinalNumericContext _localctx = new OrdinalNumericContext(Context, State);
		EnterRule(_localctx, 94, RULE_ordinalNumeric);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4227858432L) != 0 || _la==SECOND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DefaultParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordNumberContext wordNumber() {
			return GetRuleContext<WordNumberContext>(0);
		}
		public NumericValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericValueContext numericValue() {
		NumericValueContext _localctx = new NumericValueContext(Context, State);
		EnterRule(_localctx, 96, RULE_numericValue);
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555;
				Match(NUMBER);
				}
				break;
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 556;
				wordNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeNumericValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext[] numericValue() {
			return GetRuleContexts<NumericValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue(int i) {
			return GetRuleContext<NumericValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeSeparatorContext rangeSeparator() {
			return GetRuleContext<RangeSeparatorContext>(0);
		}
		public RangeNumericValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeNumericValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRangeNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRangeNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeNumericValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeNumericValueContext rangeNumericValue() {
		RangeNumericValueContext _localctx = new RangeNumericValueContext(Context, State);
		EnterRule(_localctx, 98, RULE_rangeNumericValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			numericValue();
			State = 560;
			rangeSeparator();
			State = 561;
			numericValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeNumericValueWithUOMContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext[] numericValue() {
			return GetRuleContexts<NumericValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue(int i) {
			return GetRuleContext<NumericValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext[] doseUnitOfMeasure() {
			return GetRuleContexts<DoseUnitOfMeasureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext doseUnitOfMeasure(int i) {
			return GetRuleContext<DoseUnitOfMeasureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeSeparatorContext rangeSeparator() {
			return GetRuleContext<RangeSeparatorContext>(0);
		}
		public RangeNumericValueWithUOMContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeNumericValueWithUOM; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRangeNumericValueWithUOM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRangeNumericValueWithUOM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeNumericValueWithUOM(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeNumericValueWithUOMContext rangeNumericValueWithUOM() {
		RangeNumericValueWithUOMContext _localctx = new RangeNumericValueWithUOMContext(Context, State);
		EnterRule(_localctx, 100, RULE_rangeNumericValueWithUOM);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			numericValue();
			State = 564;
			doseUnitOfMeasure();
			State = 565;
			rangeSeparator();
			State = 566;
			numericValue();
			State = 567;
			doseUnitOfMeasure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(DefaultParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(DefaultParser.DASH, 0); }
		public RangeSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRangeSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRangeSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeSeparatorContext rangeSeparator() {
		RangeSeparatorContext _localctx = new RangeSeparatorContext(Context, State);
		EnterRule(_localctx, 102, RULE_rangeSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			_la = TokenStream.LA(1);
			if ( !(_la==DASH || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PeriodEnumContext periodEnum() {
			return GetRuleContext<PeriodEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrdinalNumericContext ordinalNumeric() {
			return GetRuleContext<OrdinalNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(DefaultParser.OTHER, 0); }
		public PeriodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_period; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodContext period() {
		PeriodContext _localctx = new PeriodContext(Context, State);
		EnterRule(_localctx, 104, RULE_period);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 571;
				ordinalNumeric();
				}
				break;
			case 2:
				{
				State = 572;
				Match(OTHER);
				}
				break;
			}
			State = 575;
			periodEnum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(DefaultParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(DefaultParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(DefaultParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(DefaultParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(DefaultParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(DefaultParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(DefaultParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(DefaultParser.YEAR, 0); }
		public PeriodEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodEnumContext periodEnum() {
		PeriodEnumContext _localctx = new PeriodEnumContext(Context, State);
		EnterRule(_localctx, 106, RULE_periodEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			_la = TokenStream.LA(1);
			if ( !((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & 255L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayOfTheWeekContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONDAY() { return GetToken(DefaultParser.MONDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUESDAY() { return GetToken(DefaultParser.TUESDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEDNESDAY() { return GetToken(DefaultParser.WEDNESDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THURSDAY() { return GetToken(DefaultParser.THURSDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRIDAY() { return GetToken(DefaultParser.FRIDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SATURDAY() { return GetToken(DefaultParser.SATURDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUNDAY() { return GetToken(DefaultParser.SUNDAY, 0); }
		public DayOfTheWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayOfTheWeek; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDayOfTheWeek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDayOfTheWeek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayOfTheWeek(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayOfTheWeekContext dayOfTheWeek() {
		DayOfTheWeekContext _localctx = new DayOfTheWeekContext(Context, State);
		EnterRule(_localctx, 108, RULE_dayOfTheWeek);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_la = TokenStream.LA(1);
			if ( !((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & 127L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOURLY() { return GetToken(DefaultParser.HOURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAILY() { return GetToken(DefaultParser.DAILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKLY() { return GetToken(DefaultParser.WEEKLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTHLY() { return GetToken(DefaultParser.MONTHLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEARLY() { return GetToken(DefaultParser.YEARLY, 0); }
		public PeriodlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodlyContext periodly() {
		PeriodlyContext _localctx = new PeriodlyContext(Context, State);
		EnterRule(_localctx, 110, RULE_periodly);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			_la = TokenStream.LA(1);
			if ( !((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & 31L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WordDigitContext[] wordDigit() {
			return GetRuleContexts<WordDigitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WordDigitContext wordDigit(int i) {
			return GetRuleContext<WordDigitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A_AN() { return GetTokens(DefaultParser.A_AN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN(int i) {
			return GetToken(DefaultParser.A_AN, i);
		}
		public WordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWordNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWordNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordNumberContext wordNumber() {
		WordNumberContext _localctx = new WordNumberContext(Context, State);
		EnterRule(_localctx, 112, RULE_wordNumber);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			wordDigit();
			State = 593;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 588;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND) {
						{
						State = 584;
						Match(AND);
						State = 586;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==A_AN) {
							{
							State = 585;
							Match(A_AN);
							}
						}

						}
					}

					State = 590;
					wordDigit();
					}
					} 
				}
				State = 595;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordDigitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(DefaultParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO() { return GetToken(DefaultParser.TWO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREE() { return GetToken(DefaultParser.THREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUR() { return GetToken(DefaultParser.FOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIVE() { return GetToken(DefaultParser.FIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIX() { return GetToken(DefaultParser.SIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVEN() { return GetToken(DefaultParser.SEVEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EIGHT() { return GetToken(DefaultParser.EIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NINE() { return GetToken(DefaultParser.NINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEN() { return GetToken(DefaultParser.TEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWELVE() { return GetToken(DefaultParser.TWELVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HALF() { return GetToken(DefaultParser.HALF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWENTY() { return GetToken(DefaultParser.TWENTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIRTY() { return GetToken(DefaultParser.THIRTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORTY() { return GetToken(DefaultParser.FORTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVENTY() { return GetToken(DefaultParser.SEVENTY, 0); }
		public WordDigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordDigit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWordDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWordDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordDigit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordDigitContext wordDigit() {
		WordDigitContext _localctx = new WordDigitContext(Context, State);
		EnterRule(_localctx, 114, RULE_wordDigit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 67097984L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MedicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MedicationComponentContext[] medicationComponent() {
			return GetRuleContexts<MedicationComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MedicationComponentContext medicationComponent(int i) {
			return GetRuleContext<MedicationComponentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DefaultParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARDSLASH() { return GetTokens(DefaultParser.FORWARDSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH(int i) {
			return GetToken(DefaultParser.FORWARDSLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugFormContext drugForm() {
			return GetRuleContext<DrugFormContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BrandNameContext brandName() {
			return GetRuleContext<BrandNameContext>(0);
		}
		public MedicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_medication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMedication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMedication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMedication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MedicationContext medication() {
		MedicationContext _localctx = new MedicationContext(Context, State);
		EnterRule(_localctx, 116, RULE_medication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			medicationComponent();
			State = 603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORWARDSLASH) {
				{
				{
				State = 599;
				Match(FORWARDSLASH);
				State = 600;
				medicationComponent();
				}
				}
				State = 605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EACH || _la==LIQUID || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 1110450372607L) != 0 || _la==WORD) {
				{
				State = 606;
				drugForm();
				}
			}

			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BRANDNAME) {
				{
				State = 609;
				brandName();
				}
			}

			State = 612;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MedicationComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleMedicationComponentContext simpleMedicationComponent() {
			return GetRuleContext<SimpleMedicationComponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexMedicationComponentContext complexMedicationComponent() {
			return GetRuleContext<ComplexMedicationComponentContext>(0);
		}
		public MedicationComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_medicationComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMedicationComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MedicationComponentContext medicationComponent() {
		MedicationComponentContext _localctx = new MedicationComponentContext(Context, State);
		EnterRule(_localctx, 118, RULE_medicationComponent);
		try {
			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614;
				simpleMedicationComponent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615;
				complexMedicationComponent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleMedicationComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrengthContext strength() {
			return GetRuleContext<StrengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpioidContext opioid() {
			return GetRuleContext<OpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonOpioidContext nonOpioid() {
			return GetRuleContext<NonOpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext[] description() {
			return GetRuleContexts<DescriptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description(int i) {
			return GetRuleContext<DescriptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugSuffixContext drugSuffix() {
			return GetRuleContext<DrugSuffixContext>(0);
		}
		public SimpleMedicationComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleMedicationComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSimpleMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSimpleMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleMedicationComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleMedicationComponentContext simpleMedicationComponent() {
		SimpleMedicationComponentContext _localctx = new SimpleMedicationComponentContext(Context, State);
		EnterRule(_localctx, 120, RULE_simpleMedicationComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NUMBER || _la==HOUR || _la==WORD) {
					{
					{
					State = 618;
					description();
					}
					}
					State = 623;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 624;
				opioid();
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & 127L) != 0) {
					{
					State = 625;
					drugSuffix();
					}
				}

				}
				break;
			case 2:
				{
				State = 628;
				nonOpioid();
				}
				break;
			}
			State = 631;
			strength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexMedicationComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrengthContext[] strength() {
			return GetRuleContexts<StrengthContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrengthContext strength(int i) {
			return GetRuleContext<StrengthContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpioidContext opioid() {
			return GetRuleContext<OpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugSuffixContext drugSuffix() {
			return GetRuleContext<DrugSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonOpioidContext nonOpioid() {
			return GetRuleContext<NonOpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route() {
			return GetRuleContext<RouteContext>(0);
		}
		public ComplexMedicationComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexMedicationComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterComplexMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitComplexMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexMedicationComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexMedicationComponentContext complexMedicationComponent() {
		ComplexMedicationComponentContext _localctx = new ComplexMedicationComponentContext(Context, State);
		EnterRule(_localctx, 122, RULE_complexMedicationComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			strength();
			State = 638;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUPRENORPHINE:
			case BUTORPHANOL:
			case CODEINE:
			case DIHYDROCODEINE:
			case FENTANYL:
			case HYDROCODONE:
			case HYDROMORPHONE:
			case LEVORPHANOL:
			case MEPERIDINE:
			case METHADONE:
			case MORPHINE:
			case OPIUM:
			case OXYCODONE:
			case OXYMORPHONE:
			case PENTAZOCINE:
			case TAPENTADOL:
			case TRAMADOL:
				{
				State = 634;
				opioid();
				State = 635;
				drugSuffix();
				}
				break;
			case NUMBER:
			case HOUR:
			case WORD:
				{
				State = 637;
				nonOpioid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 2594077783411920897L) != 0 || (((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & 8382463L) != 0) {
				{
				State = 640;
				route();
				}
			}

			State = 643;
			strength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonOpioidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugSuffixContext drugSuffix() {
			return GetRuleContext<DrugSuffixContext>(0);
		}
		public NonOpioidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonOpioid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterNonOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitNonOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonOpioid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonOpioidContext nonOpioid() {
		NonOpioidContext _localctx = new NonOpioidContext(Context, State);
		EnterRule(_localctx, 124, RULE_nonOpioid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			description();
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & 127L) != 0) {
				{
				State = 646;
				drugSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(DefaultParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(DefaultParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(DefaultParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(DefaultParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HOUR() { return GetTokens(DefaultParser.HOUR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR(int i) {
			return GetToken(DefaultParser.HOUR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DASH() { return GetTokens(DefaultParser.DASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH(int i) {
			return GetToken(DefaultParser.DASH, i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 126, RULE_description);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==HOUR || _la==WORD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 656;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 651;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DASH) {
						{
						State = 650;
						Match(DASH);
						}
					}

					State = 653;
					_la = TokenStream.LA(1);
					if ( !(_la==NUMBER || _la==HOUR || _la==WORD) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 658;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrugFormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext[] formExpression() {
			return GetRuleContexts<FormExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext formExpression(int i) {
			return GetRuleContext<FormExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(DefaultParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(DefaultParser.WORD, i);
		}
		public DrugFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drugForm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDrugForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDrugForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrugForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrugFormContext drugForm() {
		DrugFormContext _localctx = new DrugFormContext(Context, State);
		EnterRule(_localctx, 128, RULE_drugForm);
		int _la;
		try {
			State = 684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 659;
					formExpression();
					}
					}
					State = 662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EACH || _la==LIQUID || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 1110450372607L) != 0 );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 664;
					Match(WORD);
					}
					}
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WORD );
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 669;
					formExpression();
					}
					}
					State = 672;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EACH || _la==LIQUID || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 1110450372607L) != 0 );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 674;
					formExpression();
					}
					}
					State = 677;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EACH || _la==LIQUID || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 1110450372607L) != 0 );
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 679;
					Match(WORD);
					}
					}
					State = 682;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WORD );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpioidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUPRENORPHINE() { return GetToken(DefaultParser.BUPRENORPHINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUTORPHANOL() { return GetToken(DefaultParser.BUTORPHANOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEINE() { return GetToken(DefaultParser.CODEINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIHYDROCODEINE() { return GetToken(DefaultParser.DIHYDROCODEINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FENTANYL() { return GetToken(DefaultParser.FENTANYL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYDROCODONE() { return GetToken(DefaultParser.HYDROCODONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYDROMORPHONE() { return GetToken(DefaultParser.HYDROMORPHONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVORPHANOL() { return GetToken(DefaultParser.LEVORPHANOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEPERIDINE() { return GetToken(DefaultParser.MEPERIDINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHADONE() { return GetToken(DefaultParser.METHADONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORPHINE() { return GetToken(DefaultParser.MORPHINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPIUM() { return GetToken(DefaultParser.OPIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OXYCODONE() { return GetToken(DefaultParser.OXYCODONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OXYMORPHONE() { return GetToken(DefaultParser.OXYMORPHONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PENTAZOCINE() { return GetToken(DefaultParser.PENTAZOCINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAPENTADOL() { return GetToken(DefaultParser.TAPENTADOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAMADOL() { return GetToken(DefaultParser.TRAMADOL, 0); }
		public OpioidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opioid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpioid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpioidContext opioid() {
		OpioidContext _localctx = new OpioidContext(Context, State);
		EnterRule(_localctx, 130, RULE_opioid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			_la = TokenStream.LA(1);
			if ( !((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 131071L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrugSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SULFATE() { return GetToken(DefaultParser.SULFATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HCL() { return GetToken(DefaultParser.HCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYDROCHLORIDE() { return GetToken(DefaultParser.HYDROCHLORIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITARTRATE() { return GetToken(DefaultParser.BITARTRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARTRATE() { return GetToken(DefaultParser.TARTRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHOSPHATE() { return GetToken(DefaultParser.PHOSPHATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLISTIREX() { return GetToken(DefaultParser.POLISTIREX, 0); }
		public DrugSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drugSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDrugSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDrugSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrugSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrugSuffixContext drugSuffix() {
		DrugSuffixContext _localctx = new DrugSuffixContext(Context, State);
		EnterRule(_localctx, 132, RULE_drugSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			_la = TokenStream.LA(1);
			if ( !((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & 127L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext doseUnitOfMeasure() {
			return GetRuleContext<DoseUnitOfMeasureContext>(0);
		}
		public StrengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterStrength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitStrength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrengthContext strength() {
		StrengthContext _localctx = new StrengthContext(Context, State);
		EnterRule(_localctx, 134, RULE_strength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			numericValue();
			State = 691;
			doseUnitOfMeasure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRANDNAME() { return GetToken(DefaultParser.BRANDNAME, 0); }
		public BrandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterBrandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitBrandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrandNameContext brandName() {
		BrandNameContext _localctx = new BrandNameContext(Context, State);
		EnterRule(_localctx, 136, RULE_brandName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			Match(BRANDNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(DefaultParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(DefaultParser.WORD, i);
		}
		public FreeTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFreeText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFreeText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeTextContext freeText() {
		FreeTextContext _localctx = new FreeTextContext(Context, State);
		EnterRule(_localctx, 138, RULE_freeText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 695;
					Match(WORD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestDoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext[] dose() {
			return GetRuleContexts<DoseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose(int i) {
			return GetRuleContext<DoseContext>(i);
		}
		public TestDoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testDose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestDoseContext testDose() {
		TestDoseContext _localctx = new TestDoseContext(Context, State);
		EnterRule(_localctx, 140, RULE_testDose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 700;
				dose();
				}
				}
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 4362065280L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestAmbiguousDoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousDoseContext[] ambiguousDose() {
			return GetRuleContexts<AmbiguousDoseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousDoseContext ambiguousDose(int i) {
			return GetRuleContext<AmbiguousDoseContext>(i);
		}
		public TestAmbiguousDoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testAmbiguousDose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestAmbiguousDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestAmbiguousDoseContext testAmbiguousDose() {
		TestAmbiguousDoseContext _localctx = new TestAmbiguousDoseContext(Context, State);
		EnterRule(_localctx, 142, RULE_testAmbiguousDose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 705;
				ambiguousDose();
				}
				}
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 4362065280L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestFormExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext[] formExpression() {
			return GetRuleContexts<FormExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext formExpression(int i) {
			return GetRuleContext<FormExpressionContext>(i);
		}
		public TestFormExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testFormExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestFormExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestFormExpressionContext testFormExpression() {
		TestFormExpressionContext _localctx = new TestFormExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_testFormExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 710;
				formExpression();
				}
				}
				State = 713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EACH || _la==LIQUID || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 1110450372607L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestRouteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext[] route() {
			return GetRuleContexts<RouteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route(int i) {
			return GetRuleContext<RouteContext>(i);
		}
		public TestRouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testRoute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestRoute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestRouteContext testRoute() {
		TestRouteContext _localctx = new TestRouteContext(Context, State);
		EnterRule(_localctx, 146, RULE_testRoute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 715;
				route();
				}
				}
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 2594077783411920897L) != 0 || (((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & 8382463L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestFrequenciesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext frequencies() {
			return GetRuleContext<FrequenciesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route() {
			return GetRuleContext<RouteContext>(0);
		}
		public TestFrequenciesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testFrequencies; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestFrequencies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestFrequenciesContext testFrequencies() {
		TestFrequenciesContext _localctx = new TestFrequenciesContext(Context, State);
		EnterRule(_localctx, 148, RULE_testFrequencies);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 720;
				dose();
				}
				break;
			}
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 723;
				route();
				}
				break;
			}
			State = 726;
			frequencies();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestDurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext[] duration() {
			return GetRuleContexts<DurationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration(int i) {
			return GetRuleContext<DurationContext>(i);
		}
		public TestDurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testDuration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestDurationContext testDuration() {
		TestDurationContext _localctx = new TestDurationContext(Context, State);
		EnterRule(_localctx, 150, RULE_testDuration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 728;
				duration();
				}
				}
				State = 731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 140943647313921L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestAdditionalInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext[] additionalInstruction() {
			return GetRuleContexts<AdditionalInstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext additionalInstruction(int i) {
			return GetRuleContext<AdditionalInstructionContext>(i);
		}
		public TestAdditionalInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testAdditionalInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestAdditionalInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestAdditionalInstructionContext testAdditionalInstruction() {
		TestAdditionalInstructionContext _localctx = new TestAdditionalInstructionContext(Context, State);
		EnterRule(_localctx, 152, RULE_testAdditionalInstruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 733;
				additionalInstruction();
				}
				}
				State = 736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 36352603193344L) != 0 || (((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 4966055937L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestIndicationForUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext[] indicationForUse() {
			return GetRuleContexts<IndicationForUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext indicationForUse(int i) {
			return GetRuleContext<IndicationForUseContext>(i);
		}
		public TestIndicationForUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testIndicationForUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestIndicationForUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestIndicationForUseContext testIndicationForUse() {
		TestIndicationForUseContext _localctx = new TestIndicationForUseContext(Context, State);
		EnterRule(_localctx, 154, RULE_testIndicationForUse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 738;
				indicationForUse();
				}
				}
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AS || _la==FOR || _la==PRN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,242,744,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		1,0,1,0,5,0,159,8,0,10,0,12,0,162,9,0,1,0,3,0,165,8,0,1,0,3,0,168,8,0,
		1,0,1,0,1,1,3,1,173,8,1,1,1,3,1,176,8,1,1,1,1,1,3,1,180,8,1,1,1,1,1,1,
		1,1,1,1,1,5,1,187,8,1,10,1,12,1,190,9,1,1,2,3,2,193,8,2,1,2,1,2,3,2,197,
		8,2,1,3,1,3,1,4,1,4,1,5,1,5,3,5,205,8,5,1,6,1,6,1,6,1,6,3,6,211,8,6,1,
		6,1,6,1,6,1,6,3,6,217,8,6,1,7,1,7,3,7,221,8,7,1,8,3,8,224,8,8,1,8,1,8,
		1,9,1,9,1,10,1,10,1,11,1,11,1,12,3,12,235,8,12,1,12,1,12,1,12,5,12,240,
		8,12,10,12,12,12,243,9,12,1,12,3,12,246,8,12,1,12,5,12,249,8,12,10,12,
		12,12,252,9,12,1,13,3,13,255,8,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,3,14,284,8,14,1,15,1,15,5,15,288,8,15,10,15,
		12,15,291,9,15,1,16,3,16,294,8,16,1,16,3,16,297,8,16,1,16,1,16,1,16,1,
		16,1,16,3,16,304,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,3,17,319,8,17,1,18,3,18,322,8,18,1,18,3,18,325,8,18,1,18,
		1,18,3,18,329,8,18,1,18,1,18,1,18,3,18,334,8,18,1,18,3,18,337,8,18,1,19,
		1,19,3,19,341,8,19,1,20,1,20,1,20,3,20,346,8,20,1,21,1,21,3,21,350,8,21,
		1,21,1,21,1,21,1,21,1,21,3,21,357,8,21,1,22,1,22,1,22,3,22,362,8,22,1,
		22,5,22,365,8,22,10,22,12,22,368,9,22,1,23,1,23,1,24,3,24,373,8,24,1,24,
		3,24,376,8,24,1,24,3,24,379,8,24,1,24,3,24,382,8,24,1,24,3,24,385,8,24,
		1,24,1,24,1,24,1,24,3,24,391,8,24,1,25,1,25,3,25,395,8,25,1,25,3,25,398,
		8,25,1,25,5,25,401,8,25,10,25,12,25,404,9,25,1,26,1,26,3,26,408,8,26,1,
		26,3,26,411,8,26,1,27,1,27,1,28,1,28,1,29,3,29,418,8,29,1,29,1,29,3,29,
		422,8,29,1,29,1,29,1,29,1,29,1,29,3,29,429,8,29,1,29,3,29,432,8,29,1,29,
		3,29,435,8,29,1,30,1,30,1,30,1,30,3,30,441,8,30,1,30,1,30,1,30,1,31,3,
		31,447,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,3,34,
		460,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,469,8,35,1,35,3,35,472,
		8,35,1,35,1,35,1,35,3,35,477,8,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,
		38,1,38,1,38,1,38,3,38,490,8,38,1,39,1,39,3,39,494,8,39,1,39,1,39,1,39,
		1,40,1,40,1,40,1,41,1,41,1,41,1,41,3,41,506,8,41,1,42,1,42,1,42,3,42,511,
		8,42,1,42,1,42,1,43,1,43,3,43,517,8,43,1,43,1,43,3,43,521,8,43,1,44,1,
		44,1,44,3,44,526,8,44,1,44,3,44,529,8,44,1,45,1,45,1,45,1,45,1,45,1,45,
		1,45,1,45,4,45,539,8,45,11,45,12,45,540,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,3,46,552,8,46,1,47,1,47,1,48,1,48,3,48,558,8,48,1,49,1,
		49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,52,1,52,3,52,574,
		8,52,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,3,56,587,8,
		56,3,56,589,8,56,1,56,5,56,592,8,56,10,56,12,56,595,9,56,1,57,1,57,1,58,
		1,58,1,58,5,58,602,8,58,10,58,12,58,605,9,58,1,58,3,58,608,8,58,1,58,3,
		58,611,8,58,1,58,1,58,1,59,1,59,3,59,617,8,59,1,60,5,60,620,8,60,10,60,
		12,60,623,9,60,1,60,1,60,3,60,627,8,60,1,60,3,60,630,8,60,1,60,1,60,1,
		61,1,61,1,61,1,61,1,61,3,61,639,8,61,1,61,3,61,642,8,61,1,61,1,61,1,62,
		1,62,3,62,648,8,62,1,63,1,63,3,63,652,8,63,1,63,5,63,655,8,63,10,63,12,
		63,658,9,63,1,64,4,64,661,8,64,11,64,12,64,662,1,64,4,64,666,8,64,11,64,
		12,64,667,1,64,4,64,671,8,64,11,64,12,64,672,1,64,4,64,676,8,64,11,64,
		12,64,677,1,64,4,64,681,8,64,11,64,12,64,682,3,64,685,8,64,1,65,1,65,1,
		66,1,66,1,67,1,67,1,67,1,68,1,68,1,69,4,69,697,8,69,11,69,12,69,698,1,
		70,4,70,702,8,70,11,70,12,70,703,1,71,4,71,707,8,71,11,71,12,71,708,1,
		72,4,72,712,8,72,11,72,12,72,713,1,73,4,73,717,8,73,11,73,12,73,718,1,
		74,3,74,722,8,74,1,74,3,74,725,8,74,1,74,1,74,1,75,4,75,730,8,75,11,75,
		12,75,731,1,76,4,76,735,8,76,11,76,12,76,736,1,77,4,77,740,8,77,11,77,
		12,77,741,1,77,0,0,78,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
		124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,0,35,2,
		0,3,3,6,6,9,0,35,35,39,39,51,51,53,56,64,64,86,86,94,94,96,96,106,106,
		5,0,153,154,156,156,160,160,162,162,169,169,3,0,58,58,68,68,129,152,1,
		0,198,214,3,0,46,46,88,88,107,107,2,0,165,165,168,168,2,0,58,58,88,88,
		2,0,8,8,32,32,5,0,34,34,58,58,61,61,88,88,116,116,2,0,101,102,110,110,
		2,0,61,61,82,82,4,0,112,112,119,120,122,125,127,128,2,0,6,6,38,38,2,0,
		37,37,89,89,2,0,58,58,61,61,3,0,36,36,41,41,45,45,2,0,72,72,79,79,3,0,
		113,113,117,117,126,126,1,0,180,181,2,0,36,36,45,45,4,0,43,43,49,49,69,
		69,71,71,2,0,63,63,82,82,3,0,36,36,45,45,109,109,3,0,52,52,62,62,71,71,
		3,0,68,68,73,73,108,108,2,0,26,31,179,179,2,0,4,4,103,103,1,0,178,185,
		1,0,191,197,1,0,186,190,4,0,7,8,10,10,12,12,14,25,3,0,32,32,181,181,240,
		240,1,0,215,231,1,0,232,238,822,0,156,1,0,0,0,2,172,1,0,0,0,4,196,1,0,
		0,0,6,198,1,0,0,0,8,200,1,0,0,0,10,204,1,0,0,0,12,210,1,0,0,0,14,220,1,
		0,0,0,16,223,1,0,0,0,18,227,1,0,0,0,20,229,1,0,0,0,22,231,1,0,0,0,24,234,
		1,0,0,0,26,254,1,0,0,0,28,283,1,0,0,0,30,285,1,0,0,0,32,296,1,0,0,0,34,
		318,1,0,0,0,36,321,1,0,0,0,38,340,1,0,0,0,40,345,1,0,0,0,42,356,1,0,0,
		0,44,358,1,0,0,0,46,369,1,0,0,0,48,372,1,0,0,0,50,392,1,0,0,0,52,407,1,
		0,0,0,54,412,1,0,0,0,56,414,1,0,0,0,58,417,1,0,0,0,60,440,1,0,0,0,62,446,
		1,0,0,0,64,450,1,0,0,0,66,454,1,0,0,0,68,459,1,0,0,0,70,471,1,0,0,0,72,
		478,1,0,0,0,74,483,1,0,0,0,76,489,1,0,0,0,78,491,1,0,0,0,80,498,1,0,0,
		0,82,505,1,0,0,0,84,507,1,0,0,0,86,520,1,0,0,0,88,525,1,0,0,0,90,538,1,
		0,0,0,92,551,1,0,0,0,94,553,1,0,0,0,96,557,1,0,0,0,98,559,1,0,0,0,100,
		563,1,0,0,0,102,569,1,0,0,0,104,573,1,0,0,0,106,577,1,0,0,0,108,579,1,
		0,0,0,110,581,1,0,0,0,112,583,1,0,0,0,114,596,1,0,0,0,116,598,1,0,0,0,
		118,616,1,0,0,0,120,629,1,0,0,0,122,633,1,0,0,0,124,645,1,0,0,0,126,649,
		1,0,0,0,128,684,1,0,0,0,130,686,1,0,0,0,132,688,1,0,0,0,134,690,1,0,0,
		0,136,693,1,0,0,0,138,696,1,0,0,0,140,701,1,0,0,0,142,706,1,0,0,0,144,
		711,1,0,0,0,146,716,1,0,0,0,148,721,1,0,0,0,150,729,1,0,0,0,152,734,1,
		0,0,0,154,739,1,0,0,0,156,160,3,2,1,0,157,159,3,2,1,0,158,157,1,0,0,0,
		159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,167,1,0,0,0,162,160,
		1,0,0,0,163,165,7,0,0,0,164,163,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,
		0,166,168,3,138,69,0,167,164,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,
		170,5,0,0,1,170,1,1,0,0,0,171,173,3,4,2,0,172,171,1,0,0,0,172,173,1,0,
		0,0,173,175,1,0,0,0,174,176,3,6,3,0,175,174,1,0,0,0,175,176,1,0,0,0,176,
		179,1,0,0,0,177,180,3,12,6,0,178,180,3,8,4,0,179,177,1,0,0,0,179,178,1,
		0,0,0,180,188,1,0,0,0,181,187,3,24,12,0,182,187,3,30,15,0,183,187,3,68,
		34,0,184,187,3,76,38,0,185,187,3,86,43,0,186,181,1,0,0,0,186,182,1,0,0,
		0,186,183,1,0,0,0,186,184,1,0,0,0,186,185,1,0,0,0,187,190,1,0,0,0,188,
		186,1,0,0,0,188,189,1,0,0,0,189,3,1,0,0,0,190,188,1,0,0,0,191,193,5,38,
		0,0,192,191,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,197,5,98,0,0,195,
		197,5,83,0,0,196,192,1,0,0,0,196,195,1,0,0,0,197,5,1,0,0,0,198,199,7,1,
		0,0,199,7,1,0,0,0,200,201,3,10,5,0,201,9,1,0,0,0,202,205,3,96,48,0,203,
		205,3,98,49,0,204,202,1,0,0,0,204,203,1,0,0,0,205,11,1,0,0,0,206,207,3,
		10,5,0,207,208,3,14,7,0,208,211,1,0,0,0,209,211,3,100,50,0,210,206,1,0,
		0,0,210,209,1,0,0,0,211,216,1,0,0,0,212,213,5,1,0,0,213,214,3,12,6,0,214,
		215,5,2,0,0,215,217,1,0,0,0,216,212,1,0,0,0,216,217,1,0,0,0,217,13,1,0,
		0,0,218,221,3,16,8,0,219,221,3,22,11,0,220,218,1,0,0,0,220,219,1,0,0,0,
		221,15,1,0,0,0,222,224,3,18,9,0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,
		1,0,0,0,225,226,3,20,10,0,226,17,1,0,0,0,227,228,7,2,0,0,228,19,1,0,0,
		0,229,230,7,3,0,0,230,21,1,0,0,0,231,232,7,4,0,0,232,23,1,0,0,0,233,235,
		3,26,13,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,241,3,28,
		14,0,237,238,5,5,0,0,238,240,3,28,14,0,239,237,1,0,0,0,240,243,1,0,0,0,
		241,239,1,0,0,0,241,242,1,0,0,0,242,250,1,0,0,0,243,241,1,0,0,0,244,246,
		5,83,0,0,245,244,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,249,3,24,
		12,0,248,245,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,
		25,1,0,0,0,252,250,1,0,0,0,253,255,5,171,0,0,254,253,1,0,0,0,254,255,1,
		0,0,0,255,256,1,0,0,0,256,257,7,5,0,0,257,27,1,0,0,0,258,284,5,164,0,0,
		259,284,5,156,0,0,260,284,5,157,0,0,261,284,5,158,0,0,262,263,5,104,0,
		0,263,264,5,97,0,0,264,284,5,167,0,0,265,284,5,159,0,0,266,284,5,160,0,
		0,267,284,5,161,0,0,268,269,7,6,0,0,269,284,5,166,0,0,270,284,5,174,0,
		0,271,284,5,155,0,0,272,273,7,7,0,0,273,284,5,80,0,0,274,284,5,169,0,0,
		275,284,5,170,0,0,276,284,5,172,0,0,277,284,5,173,0,0,278,284,5,162,0,
		0,279,284,5,163,0,0,280,284,5,175,0,0,281,284,5,176,0,0,282,284,5,177,
		0,0,283,258,1,0,0,0,283,259,1,0,0,0,283,260,1,0,0,0,283,261,1,0,0,0,283,
		262,1,0,0,0,283,265,1,0,0,0,283,266,1,0,0,0,283,267,1,0,0,0,283,268,1,
		0,0,0,283,270,1,0,0,0,283,271,1,0,0,0,283,272,1,0,0,0,283,274,1,0,0,0,
		283,275,1,0,0,0,283,276,1,0,0,0,283,277,1,0,0,0,283,278,1,0,0,0,283,279,
		1,0,0,0,283,280,1,0,0,0,283,281,1,0,0,0,283,282,1,0,0,0,284,29,1,0,0,0,
		285,289,3,32,16,0,286,288,3,32,16,0,287,286,1,0,0,0,288,291,1,0,0,0,289,
		287,1,0,0,0,289,290,1,0,0,0,290,31,1,0,0,0,291,289,1,0,0,0,292,294,5,38,
		0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,297,5,47,0,0,296,
		293,1,0,0,0,296,297,1,0,0,0,297,303,1,0,0,0,298,304,3,34,17,0,299,304,
		3,36,18,0,300,304,3,44,22,0,301,304,3,46,23,0,302,304,3,48,24,0,303,298,
		1,0,0,0,303,299,1,0,0,0,303,300,1,0,0,0,303,301,1,0,0,0,303,302,1,0,0,
		0,304,33,1,0,0,0,305,306,5,61,0,0,306,307,3,96,48,0,307,308,5,181,0,0,
		308,309,5,1,0,0,309,310,3,96,48,0,310,311,5,102,0,0,311,312,5,5,0,0,312,
		313,5,182,0,0,313,314,5,2,0,0,314,319,1,0,0,0,315,316,5,40,0,0,316,317,
		7,8,0,0,317,319,5,132,0,0,318,305,1,0,0,0,318,315,1,0,0,0,319,35,1,0,0,
		0,320,322,3,40,20,0,321,320,1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,
		325,3,42,21,0,324,323,1,0,0,0,324,325,1,0,0,0,325,336,1,0,0,0,326,328,
		7,9,0,0,327,329,3,38,19,0,328,327,1,0,0,0,328,329,1,0,0,0,329,330,1,0,
		0,0,330,337,3,104,52,0,331,337,3,46,23,0,332,334,5,116,0,0,333,332,1,0,
		0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,337,3,110,55,0,336,326,1,0,0,0,
		336,331,1,0,0,0,336,333,1,0,0,0,337,37,1,0,0,0,338,341,3,96,48,0,339,341,
		3,98,49,0,340,338,1,0,0,0,340,339,1,0,0,0,341,39,1,0,0,0,342,346,5,70,
		0,0,343,344,5,105,0,0,344,346,5,103,0,0,345,342,1,0,0,0,345,343,1,0,0,
		0,346,41,1,0,0,0,347,350,3,96,48,0,348,350,3,98,49,0,349,347,1,0,0,0,349,
		348,1,0,0,0,350,351,1,0,0,0,351,352,7,10,0,0,352,357,1,0,0,0,353,357,5,
		9,0,0,354,357,5,11,0,0,355,357,5,13,0,0,356,349,1,0,0,0,356,353,1,0,0,
		0,356,354,1,0,0,0,356,355,1,0,0,0,357,43,1,0,0,0,358,359,7,11,0,0,359,
		366,3,108,54,0,360,362,5,38,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,
		1,0,0,0,363,365,3,108,54,0,364,361,1,0,0,0,365,368,1,0,0,0,366,364,1,0,
		0,0,366,367,1,0,0,0,367,45,1,0,0,0,368,366,1,0,0,0,369,370,7,12,0,0,370,
		47,1,0,0,0,371,373,5,38,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,375,1,
		0,0,0,374,376,5,98,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,378,1,0,0,0,
		377,379,5,41,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,382,
		5,66,0,0,381,380,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,385,5,97,
		0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,390,1,0,0,0,386,391,3,50,25,0,
		387,391,3,58,29,0,388,391,3,60,30,0,389,391,3,62,31,0,390,386,1,0,0,0,
		390,387,1,0,0,0,390,388,1,0,0,0,390,389,1,0,0,0,391,49,1,0,0,0,392,402,
		3,52,26,0,393,395,7,13,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,397,1,0,
		0,0,396,398,5,41,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,
		401,3,52,26,0,400,394,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,
		1,0,0,0,403,51,1,0,0,0,404,402,1,0,0,0,405,408,3,54,27,0,406,408,3,56,
		28,0,407,405,1,0,0,0,407,406,1,0,0,0,408,410,1,0,0,0,409,411,7,14,0,0,
		410,409,1,0,0,0,410,411,1,0,0,0,411,53,1,0,0,0,412,413,5,32,0,0,413,55,
		1,0,0,0,414,415,5,33,0,0,415,57,1,0,0,0,416,418,7,15,0,0,417,416,1,0,0,
		0,417,418,1,0,0,0,418,434,1,0,0,0,419,435,5,74,0,0,420,422,5,182,0,0,421,
		420,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,424,7,16,0,0,424,435,7,
		17,0,0,425,435,5,60,0,0,426,428,5,78,0,0,427,429,5,101,0,0,428,427,1,0,
		0,0,428,429,1,0,0,0,429,435,1,0,0,0,430,432,3,64,32,0,431,430,1,0,0,0,
		431,432,1,0,0,0,432,433,1,0,0,0,433,435,5,42,0,0,434,419,1,0,0,0,434,421,
		1,0,0,0,434,425,1,0,0,0,434,426,1,0,0,0,434,431,1,0,0,0,435,59,1,0,0,0,
		436,441,5,45,0,0,437,441,5,36,0,0,438,441,5,109,0,0,439,441,3,64,32,0,
		440,436,1,0,0,0,440,437,1,0,0,0,440,438,1,0,0,0,440,439,1,0,0,0,441,442,
		1,0,0,0,442,443,7,15,0,0,443,444,3,66,33,0,444,61,1,0,0,0,445,447,5,61,
		0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,7,18,0,0,449,
		63,1,0,0,0,450,451,3,96,48,0,451,452,7,19,0,0,452,453,7,20,0,0,453,65,
		1,0,0,0,454,455,7,21,0,0,455,67,1,0,0,0,456,460,3,70,35,0,457,460,3,72,
		36,0,458,460,3,74,37,0,459,456,1,0,0,0,459,457,1,0,0,0,459,458,1,0,0,0,
		460,69,1,0,0,0,461,472,5,63,0,0,462,463,5,99,0,0,463,464,5,57,0,0,464,
		472,5,34,0,0,465,466,5,75,0,0,466,468,5,67,0,0,467,469,5,63,0,0,468,467,
		1,0,0,0,468,469,1,0,0,0,469,472,1,0,0,0,470,472,5,110,0,0,471,461,1,0,
		0,0,471,462,1,0,0,0,471,465,1,0,0,0,471,470,1,0,0,0,472,473,1,0,0,0,473,
		474,3,96,48,0,474,476,3,104,52,0,475,477,5,95,0,0,476,475,1,0,0,0,476,
		477,1,0,0,0,477,71,1,0,0,0,478,479,7,22,0,0,479,480,5,97,0,0,480,481,3,
		94,47,0,481,482,3,104,52,0,482,73,1,0,0,0,483,484,5,100,0,0,484,75,1,0,
		0,0,485,490,3,82,41,0,486,490,3,84,42,0,487,490,3,80,40,0,488,490,3,78,
		39,0,489,485,1,0,0,0,489,486,1,0,0,0,489,487,1,0,0,0,489,488,1,0,0,0,490,
		77,1,0,0,0,491,493,5,82,0,0,492,494,5,34,0,0,493,492,1,0,0,0,493,494,1,
		0,0,0,494,495,1,0,0,0,495,496,5,59,0,0,496,497,5,93,0,0,497,79,1,0,0,0,
		498,499,5,40,0,0,499,500,5,50,0,0,500,81,1,0,0,0,501,502,7,23,0,0,502,
		506,7,24,0,0,503,506,5,111,0,0,504,506,5,114,0,0,505,501,1,0,0,0,505,503,
		1,0,0,0,505,504,1,0,0,0,506,83,1,0,0,0,507,510,5,109,0,0,508,509,5,87,
		0,0,509,511,5,81,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,
		513,7,25,0,0,513,85,1,0,0,0,514,517,5,63,0,0,515,517,3,88,44,0,516,514,
		1,0,0,0,516,515,1,0,0,0,517,518,1,0,0,0,518,521,3,90,45,0,519,521,3,88,
		44,0,520,516,1,0,0,0,520,519,1,0,0,0,521,87,1,0,0,0,522,523,5,40,0,0,523,
		526,5,77,0,0,524,526,5,115,0,0,525,522,1,0,0,0,525,524,1,0,0,0,526,528,
		1,0,0,0,527,529,5,63,0,0,528,527,1,0,0,0,528,529,1,0,0,0,529,89,1,0,0,
		0,530,539,3,138,69,0,531,539,3,92,46,0,532,539,5,83,0,0,533,539,5,38,0,
		0,534,539,5,103,0,0,535,539,5,5,0,0,536,539,5,66,0,0,537,539,5,97,0,0,
		538,530,1,0,0,0,538,531,1,0,0,0,538,532,1,0,0,0,538,533,1,0,0,0,538,534,
		1,0,0,0,538,535,1,0,0,0,538,536,1,0,0,0,538,537,1,0,0,0,539,540,1,0,0,
		0,540,538,1,0,0,0,540,541,1,0,0,0,541,91,1,0,0,0,542,552,5,48,0,0,543,
		552,5,65,0,0,544,552,5,76,0,0,545,552,5,85,0,0,546,552,5,91,0,0,547,548,
		5,90,0,0,548,549,5,81,0,0,549,552,5,44,0,0,550,552,5,92,0,0,551,542,1,
		0,0,0,551,543,1,0,0,0,551,544,1,0,0,0,551,545,1,0,0,0,551,546,1,0,0,0,
		551,547,1,0,0,0,551,550,1,0,0,0,552,93,1,0,0,0,553,554,7,26,0,0,554,95,
		1,0,0,0,555,558,5,32,0,0,556,558,3,112,56,0,557,555,1,0,0,0,557,556,1,
		0,0,0,558,97,1,0,0,0,559,560,3,96,48,0,560,561,3,102,51,0,561,562,3,96,
		48,0,562,99,1,0,0,0,563,564,3,96,48,0,564,565,3,22,11,0,565,566,3,102,
		51,0,566,567,3,96,48,0,567,568,3,22,11,0,568,101,1,0,0,0,569,570,7,27,
		0,0,570,103,1,0,0,0,571,574,3,94,47,0,572,574,5,84,0,0,573,571,1,0,0,0,
		573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,3,106,53,0,576,
		105,1,0,0,0,577,578,7,28,0,0,578,107,1,0,0,0,579,580,7,29,0,0,580,109,
		1,0,0,0,581,582,7,30,0,0,582,111,1,0,0,0,583,593,3,114,57,0,584,586,5,
		38,0,0,585,587,5,34,0,0,586,585,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,
		0,588,584,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,592,3,114,57,0,591,
		588,1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,113,1,
		0,0,0,595,593,1,0,0,0,596,597,7,31,0,0,597,115,1,0,0,0,598,603,3,118,59,
		0,599,600,5,5,0,0,600,602,3,118,59,0,601,599,1,0,0,0,602,605,1,0,0,0,603,
		601,1,0,0,0,603,604,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,606,608,3,
		128,64,0,607,606,1,0,0,0,607,608,1,0,0,0,608,610,1,0,0,0,609,611,3,136,
		68,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,613,5,0,0,1,613,
		117,1,0,0,0,614,617,3,120,60,0,615,617,3,122,61,0,616,614,1,0,0,0,616,
		615,1,0,0,0,617,119,1,0,0,0,618,620,3,126,63,0,619,618,1,0,0,0,620,623,
		1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,621,1,0,0,
		0,624,626,3,130,65,0,625,627,3,132,66,0,626,625,1,0,0,0,626,627,1,0,0,
		0,627,630,1,0,0,0,628,630,3,124,62,0,629,621,1,0,0,0,629,628,1,0,0,0,630,
		631,1,0,0,0,631,632,3,134,67,0,632,121,1,0,0,0,633,638,3,134,67,0,634,
		635,3,130,65,0,635,636,3,132,66,0,636,639,1,0,0,0,637,639,3,124,62,0,638,
		634,1,0,0,0,638,637,1,0,0,0,639,641,1,0,0,0,640,642,3,24,12,0,641,640,
		1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,644,3,134,67,0,644,123,1,0,
		0,0,645,647,3,126,63,0,646,648,3,132,66,0,647,646,1,0,0,0,647,648,1,0,
		0,0,648,125,1,0,0,0,649,656,7,32,0,0,650,652,5,4,0,0,651,650,1,0,0,0,651,
		652,1,0,0,0,652,653,1,0,0,0,653,655,7,32,0,0,654,651,1,0,0,0,655,658,1,
		0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,127,1,0,0,0,658,656,1,0,0,0,
		659,661,3,16,8,0,660,659,1,0,0,0,661,662,1,0,0,0,662,660,1,0,0,0,662,663,
		1,0,0,0,663,685,1,0,0,0,664,666,5,240,0,0,665,664,1,0,0,0,666,667,1,0,
		0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,670,1,0,0,0,669,671,3,16,8,0,670,
		669,1,0,0,0,671,672,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,685,1,
		0,0,0,674,676,3,16,8,0,675,674,1,0,0,0,676,677,1,0,0,0,677,675,1,0,0,0,
		677,678,1,0,0,0,678,680,1,0,0,0,679,681,5,240,0,0,680,679,1,0,0,0,681,
		682,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,660,1,
		0,0,0,684,665,1,0,0,0,684,675,1,0,0,0,685,129,1,0,0,0,686,687,7,33,0,0,
		687,131,1,0,0,0,688,689,7,34,0,0,689,133,1,0,0,0,690,691,3,96,48,0,691,
		692,3,22,11,0,692,135,1,0,0,0,693,694,5,241,0,0,694,137,1,0,0,0,695,697,
		5,240,0,0,696,695,1,0,0,0,697,698,1,0,0,0,698,696,1,0,0,0,698,699,1,0,
		0,0,699,139,1,0,0,0,700,702,3,12,6,0,701,700,1,0,0,0,702,703,1,0,0,0,703,
		701,1,0,0,0,703,704,1,0,0,0,704,141,1,0,0,0,705,707,3,8,4,0,706,705,1,
		0,0,0,707,708,1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,143,1,0,0,0,
		710,712,3,16,8,0,711,710,1,0,0,0,712,713,1,0,0,0,713,711,1,0,0,0,713,714,
		1,0,0,0,714,145,1,0,0,0,715,717,3,24,12,0,716,715,1,0,0,0,717,718,1,0,
		0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,147,1,0,0,0,720,722,3,12,6,0,721,
		720,1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,725,3,24,12,0,724,723,
		1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,727,3,30,15,0,727,149,1,0,
		0,0,728,730,3,68,34,0,729,728,1,0,0,0,730,731,1,0,0,0,731,729,1,0,0,0,
		731,732,1,0,0,0,732,151,1,0,0,0,733,735,3,76,38,0,734,733,1,0,0,0,735,
		736,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,153,1,0,0,0,738,740,3,
		86,43,0,739,738,1,0,0,0,740,741,1,0,0,0,741,739,1,0,0,0,741,742,1,0,0,
		0,742,155,1,0,0,0,103,160,164,167,172,175,179,186,188,192,196,204,210,
		216,220,223,234,241,245,250,254,283,289,293,296,303,318,321,324,328,333,
		336,340,345,349,356,361,366,372,375,378,381,384,390,394,397,402,407,410,
		417,421,428,431,434,440,446,459,468,471,476,489,493,505,510,516,520,525,
		528,538,540,551,557,573,586,588,593,603,607,610,616,621,626,629,638,641,
		647,651,656,662,667,672,677,682,684,698,703,708,713,718,721,724,731,736,
		741
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace PracticeFusion.MmeCalculator.Core.Parsers.Generated
