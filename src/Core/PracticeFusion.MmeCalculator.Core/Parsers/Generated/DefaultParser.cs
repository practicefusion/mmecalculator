//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/jonathanmalek/src/mmecalculator/src/Grammar/DefaultParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PracticeFusion.MmeCalculator.Core.Parsers.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DefaultParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_PAREN=1, CLOSE_PAREN=2, DOT=3, DASH=4, FORWARDSLASH=5, COMMA=6, HALF=7, 
		ONE=8, ONCE=9, TWO=10, TWICE=11, THREE=12, THRICE=13, FOUR=14, FIVE=15, 
		SIX=16, SEVEN=17, EIGHT=18, NINE=19, TEN=20, TWELVE=21, TWENTY=22, THIRTY=23, 
		FORTY=24, SEVENTY=25, FIRST=26, THIRD=27, FOURTH=28, FIFTH=29, SIXTH=30, 
		SEVENTH=31, NUMBER=32, CLOCKNUMBER=33, A_AN=34, ADMINISTER=35, AFTER=36, 
		AM=37, AND=38, APPLY=39, AS=40, AT=41, BEDTIME=42, BREAKFAST=43, BREATH=44, 
		BEFORE=45, BY=46, CHANGE=47, COUGH=48, DINNER=49, DIRECTED=50, DISSOLVE=51, 
		EATING=52, INHALE=53, INFUSE=54, INJECT=55, INSERT=56, IS=57, EACH=58, 
		EMPTY_TOKEN=59, EVENING=60, EVERY=61, FOOD=62, FOR=63, GIVE=64, HEADACHE=65, 
		IN=66, LAST=67, LIQUID=68, LUNCH=69, MAXIMUM=70, MEAL=71, MIDDAY=72, MILK=73, 
		MORNING=74, MUST=75, NAUSEA=76, NEEDED=77, NIGHT=78, NOON=79, NOSTRIL=80, 
		OF=81, ON=82, OR=83, OTHER=84, PAIN=85, PLACE=86, PLENTY=87, PER=88, PM=89, 
		SHORTNESS=90, SLEEP=91, SOB=92, STOMACH=93, SUCK=94, SUPPLY=95, TAKE=96, 
		THE=97, THEN=98, THIS=99, THEREAFTER=100, TIME=101, TIMES=102, TO=103, 
		UNDER=104, UP=105, USE=106, VIA=107, WATER=108, WITH=109, X_X=110, AC=111, 
		BID=112, HS=113, PC=114, PRN=115, Q_Q=116, QAC=117, QAD=118, QAM=119, 
		QD=120, QH=121, QHS=122, QID=123, QN=124, QOD=125, QPC=126, QPM=127, TID=128, 
		APPLICATION=129, CAPSULE=130, CARTRIDGE=131, DOSE=132, DROP=133, ELIXIR=134, 
		FILM=135, INJECTION=136, LOLLIPOP=137, LOZENGE=138, PATCH=139, PILL=140, 
		PUFF=141, SOLUTION=142, SPRAY=143, SUPPOSITORY=144, SUSPENSION=145, SYRINGE=146, 
		SYRUP=147, SYSTEM=148, TABLET=149, TROCHE=150, TDP=151, BUCCAL=152, INJECTABLE=153, 
		NASAL=154, NASALLY=155, ORAL=156, ORALLY=157, PO=158, SL=159, SUBLINGUAL=160, 
		SUBLINGUALLY=161, TRANSDERMAL=162, TRANSDERMALLY=163, MOUTH=164, FEEDING=165, 
		TUBE=166, TONGUE=167, GASTROSTOMY=168, RECTAL=169, RECTALLY=170, INHALED=171, 
		TOPICAL=172, TOPICALLY=173, INTRANASALLY=174, TOSKIN=175, ONSKIN=176, 
		TOUPPERTORSO=177, MILLISECOND=178, SECOND=179, MINUTE=180, HOUR=181, DAY=182, 
		WEEK=183, MONTH=184, YEAR=185, HOURLY=186, DAILY=187, WEEKLY=188, MONTHLY=189, 
		YEARLY=190, MONDAY=191, TUESDAY=192, WEDNESDAY=193, THURSDAY=194, FRIDAY=195, 
		SATURDAY=196, SUNDAY=197, CENTIMETERS=198, CUBICCENTIMETERS=199, GRAMS=200, 
		INTERNATIONALUNITS=201, LITERS=202, MILLIEQUIVALENTS=203, MICROGRAMSPERHOUR=204, 
		MICROGRAMSPERACT=205, MICROGRAMS=206, MILLIGRAMSPERHOUR=207, MILLIGRAMSPERACT=208, 
		MILLIGRAMSPERML=209, MILLIGRAMS=210, MILLILITERS=211, OUNCES=212, TABLESPOONS=213, 
		TEASPOONS=214, BUPRENORPHINE=215, BUTORPHANOL=216, CODEINE=217, DIHYDROCODEINE=218, 
		FENTANYL=219, HYDROCODONE=220, HYDROMORPHONE=221, LEVORPHANOL=222, MEPERIDINE=223, 
		METHADONE=224, MORPHINE=225, OPIUM=226, OXYCODONE=227, OXYMORPHONE=228, 
		PENTAZOCINE=229, TAPENTADOL=230, TRAMADOL=231, SULFATE=232, HCL=233, HYDROCHLORIDE=234, 
		BITARTRATE=235, TARTRATE=236, PHOSPHATE=237, POLISTIREX=238, WS=239, WORD=240, 
		BRANDNAME=241, ANYTOKEN=242;
	public const int
		RULE_sig = 0, RULE_dosage = 1, RULE_dosageSeparator = 2, RULE_doseDeliveryMethod = 3, 
		RULE_ambiguousDose = 4, RULE_doseVal = 5, RULE_dose = 6, RULE_doseUnit = 7, 
		RULE_formExpression = 8, RULE_formRoute = 9, RULE_form = 10, RULE_doseUnitOfMeasure = 11, 
		RULE_route = 12, RULE_routeInstruction = 13, RULE_routeEnum = 14, RULE_frequencies = 15, 
		RULE_frequency = 16, RULE_specialFrequency = 17, RULE_basicFrequency = 18, 
		RULE_periodVal = 19, RULE_maximum = 20, RULE_frequencyVal = 21, RULE_dayFrequency = 22, 
		RULE_latinFrequency = 23, RULE_administrationTiming = 24, RULE_specificTimes = 25, 
		RULE_specificTime = 26, RULE_hour = 27, RULE_hourAndMinute = 28, RULE_timeOfDay = 29, 
		RULE_timingEvent = 30, RULE_latinAdministrationTiming = 31, RULE_periodBeforeOrAfter = 32, 
		RULE_meals = 33, RULE_duration = 34, RULE_durationStandard = 35, RULE_durationOrdinal = 36, 
		RULE_durationUnbounded = 37, RULE_additionalInstruction = 38, RULE_emptyStomach = 39, 
		RULE_asDirected = 40, RULE_withFood = 41, RULE_withLiquid = 42, RULE_indicationForUse = 43, 
		RULE_indicationPrecursor = 44, RULE_indicationValue = 45, RULE_indicationEnum = 46, 
		RULE_ordinalNumeric = 47, RULE_numericValue = 48, RULE_rangeNumericValue = 49, 
		RULE_rangeNumericValueWithUOM = 50, RULE_rangeSeparator = 51, RULE_period = 52, 
		RULE_periodEnum = 53, RULE_dayOfTheWeek = 54, RULE_periodly = 55, RULE_wordNumber = 56, 
		RULE_wordDigit = 57, RULE_medication = 58, RULE_medicationComponent = 59, 
		RULE_simpleMedicationComponent = 60, RULE_complexMedicationComponent = 61, 
		RULE_nonOpioid = 62, RULE_description = 63, RULE_drugForm = 64, RULE_opioid = 65, 
		RULE_drugSuffix = 66, RULE_strength = 67, RULE_brandName = 68, RULE_freeText = 69, 
		RULE_testDose = 70, RULE_testAmbiguousDose = 71, RULE_testFormExpression = 72, 
		RULE_testRoute = 73, RULE_testFrequencies = 74, RULE_testDuration = 75, 
		RULE_testAdditionalInstruction = 76, RULE_testIndicationForUse = 77;
	public static readonly string[] ruleNames = {
		"sig", "dosage", "dosageSeparator", "doseDeliveryMethod", "ambiguousDose", 
		"doseVal", "dose", "doseUnit", "formExpression", "formRoute", "form", 
		"doseUnitOfMeasure", "route", "routeInstruction", "routeEnum", "frequencies", 
		"frequency", "specialFrequency", "basicFrequency", "periodVal", "maximum", 
		"frequencyVal", "dayFrequency", "latinFrequency", "administrationTiming", 
		"specificTimes", "specificTime", "hour", "hourAndMinute", "timeOfDay", 
		"timingEvent", "latinAdministrationTiming", "periodBeforeOrAfter", "meals", 
		"duration", "durationStandard", "durationOrdinal", "durationUnbounded", 
		"additionalInstruction", "emptyStomach", "asDirected", "withFood", "withLiquid", 
		"indicationForUse", "indicationPrecursor", "indicationValue", "indicationEnum", 
		"ordinalNumeric", "numericValue", "rangeNumericValue", "rangeNumericValueWithUOM", 
		"rangeSeparator", "period", "periodEnum", "dayOfTheWeek", "periodly", 
		"wordNumber", "wordDigit", "medication", "medicationComponent", "simpleMedicationComponent", 
		"complexMedicationComponent", "nonOpioid", "description", "drugForm", 
		"opioid", "drugSuffix", "strength", "brandName", "freeText", "testDose", 
		"testAmbiguousDose", "testFormExpression", "testRoute", "testFrequencies", 
		"testDuration", "testAdditionalInstruction", "testIndicationForUse"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'-'", "'/'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_PAREN", "CLOSE_PAREN", "DOT", "DASH", "FORWARDSLASH", "COMMA", 
		"HALF", "ONE", "ONCE", "TWO", "TWICE", "THREE", "THRICE", "FOUR", "FIVE", 
		"SIX", "SEVEN", "EIGHT", "NINE", "TEN", "TWELVE", "TWENTY", "THIRTY", 
		"FORTY", "SEVENTY", "FIRST", "THIRD", "FOURTH", "FIFTH", "SIXTH", "SEVENTH", 
		"NUMBER", "CLOCKNUMBER", "A_AN", "ADMINISTER", "AFTER", "AM", "AND", "APPLY", 
		"AS", "AT", "BEDTIME", "BREAKFAST", "BREATH", "BEFORE", "BY", "CHANGE", 
		"COUGH", "DINNER", "DIRECTED", "DISSOLVE", "EATING", "INHALE", "INFUSE", 
		"INJECT", "INSERT", "IS", "EACH", "EMPTY_TOKEN", "EVENING", "EVERY", "FOOD", 
		"FOR", "GIVE", "HEADACHE", "IN", "LAST", "LIQUID", "LUNCH", "MAXIMUM", 
		"MEAL", "MIDDAY", "MILK", "MORNING", "MUST", "NAUSEA", "NEEDED", "NIGHT", 
		"NOON", "NOSTRIL", "OF", "ON", "OR", "OTHER", "PAIN", "PLACE", "PLENTY", 
		"PER", "PM", "SHORTNESS", "SLEEP", "SOB", "STOMACH", "SUCK", "SUPPLY", 
		"TAKE", "THE", "THEN", "THIS", "THEREAFTER", "TIME", "TIMES", "TO", "UNDER", 
		"UP", "USE", "VIA", "WATER", "WITH", "X_X", "AC", "BID", "HS", "PC", "PRN", 
		"Q_Q", "QAC", "QAD", "QAM", "QD", "QH", "QHS", "QID", "QN", "QOD", "QPC", 
		"QPM", "TID", "APPLICATION", "CAPSULE", "CARTRIDGE", "DOSE", "DROP", "ELIXIR", 
		"FILM", "INJECTION", "LOLLIPOP", "LOZENGE", "PATCH", "PILL", "PUFF", "SOLUTION", 
		"SPRAY", "SUPPOSITORY", "SUSPENSION", "SYRINGE", "SYRUP", "SYSTEM", "TABLET", 
		"TROCHE", "TDP", "BUCCAL", "INJECTABLE", "NASAL", "NASALLY", "ORAL", "ORALLY", 
		"PO", "SL", "SUBLINGUAL", "SUBLINGUALLY", "TRANSDERMAL", "TRANSDERMALLY", 
		"MOUTH", "FEEDING", "TUBE", "TONGUE", "GASTROSTOMY", "RECTAL", "RECTALLY", 
		"INHALED", "TOPICAL", "TOPICALLY", "INTRANASALLY", "TOSKIN", "ONSKIN", 
		"TOUPPERTORSO", "MILLISECOND", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", 
		"MONTH", "YEAR", "HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY", "MONDAY", 
		"TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY", "CENTIMETERS", 
		"CUBICCENTIMETERS", "GRAMS", "INTERNATIONALUNITS", "LITERS", "MILLIEQUIVALENTS", 
		"MICROGRAMSPERHOUR", "MICROGRAMSPERACT", "MICROGRAMS", "MILLIGRAMSPERHOUR", 
		"MILLIGRAMSPERACT", "MILLIGRAMSPERML", "MILLIGRAMS", "MILLILITERS", "OUNCES", 
		"TABLESPOONS", "TEASPOONS", "BUPRENORPHINE", "BUTORPHANOL", "CODEINE", 
		"DIHYDROCODEINE", "FENTANYL", "HYDROCODONE", "HYDROMORPHONE", "LEVORPHANOL", 
		"MEPERIDINE", "METHADONE", "MORPHINE", "OPIUM", "OXYCODONE", "OXYMORPHONE", 
		"PENTAZOCINE", "TAPENTADOL", "TRAMADOL", "SULFATE", "HCL", "HYDROCHLORIDE", 
		"BITARTRATE", "TARTRATE", "PHOSPHATE", "POLISTIREX", "WS", "WORD", "BRANDNAME", 
		"ANYTOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DefaultParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DefaultParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DefaultParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DefaultParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DosageContext[] dosage() {
			return GetRuleContexts<DosageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DosageContext dosage(int i) {
			return GetRuleContext<DosageContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DefaultParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(DefaultParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(DefaultParser.COMMA, 0); }
		public SigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SigContext sig() {
		SigContext _localctx = new SigContext(Context, State);
		EnterRule(_localctx, 0, RULE_sig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			dosage();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HALF) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << TEN) | (1L << TWELVE) | (1L << TWENTY) | (1L << THIRTY) | (1L << FORTY) | (1L << SEVENTY) | (1L << NUMBER) | (1L << ADMINISTER) | (1L << AND) | (1L << APPLY) | (1L << DISSOLVE) | (1L << INHALE) | (1L << INFUSE) | (1L << INJECT) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (GIVE - 64)) | (1L << (OR - 64)) | (1L << (PLACE - 64)) | (1L << (SUCK - 64)) | (1L << (TAKE - 64)) | (1L << (THEN - 64)) | (1L << (USE - 64)))) != 0)) {
				{
				{
				State = 157;
				dosage();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==COMMA || _la==WORD) {
				{
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT || _la==COMMA) {
					{
					State = 163;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==COMMA) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 166;
				freeText();
				}
			}

			State = 169;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DosageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousDoseContext ambiguousDose() {
			return GetRuleContext<AmbiguousDoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DosageSeparatorContext dosageSeparator() {
			return GetRuleContext<DosageSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseDeliveryMethodContext doseDeliveryMethod() {
			return GetRuleContext<DoseDeliveryMethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext[] route() {
			return GetRuleContexts<RouteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route(int i) {
			return GetRuleContext<RouteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext[] frequencies() {
			return GetRuleContexts<FrequenciesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext frequencies(int i) {
			return GetRuleContext<FrequenciesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext[] duration() {
			return GetRuleContexts<DurationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration(int i) {
			return GetRuleContext<DurationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext[] additionalInstruction() {
			return GetRuleContexts<AdditionalInstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext additionalInstruction(int i) {
			return GetRuleContext<AdditionalInstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext[] indicationForUse() {
			return GetRuleContexts<IndicationForUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext indicationForUse(int i) {
			return GetRuleContext<IndicationForUseContext>(i);
		}
		public DosageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dosage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDosage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDosage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDosage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DosageContext dosage() {
		DosageContext _localctx = new DosageContext(Context, State);
		EnterRule(_localctx, 2, RULE_dosage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (AND - 38)) | (1L << (OR - 38)) | (1L << (THEN - 38)))) != 0)) {
				{
				State = 171;
				dosageSeparator();
				}
			}

			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADMINISTER) | (1L << APPLY) | (1L << DISSOLVE) | (1L << INHALE) | (1L << INFUSE) | (1L << INJECT) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (GIVE - 64)) | (1L << (PLACE - 64)) | (1L << (SUCK - 64)) | (1L << (TAKE - 64)) | (1L << (USE - 64)))) != 0)) {
				{
				State = 174;
				doseDeliveryMethod();
				}
			}

			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 177;
				dose();
				}
				break;
			case 2:
				{
				State = 178;
				ambiguousDose();
				}
				break;
			}
			State = 188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 186;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 181;
						route();
						}
						break;
					case 2:
						{
						State = 182;
						frequencies();
						}
						break;
					case 3:
						{
						State = 183;
						duration();
						}
						break;
					case 4:
						{
						State = 184;
						additionalInstruction();
						}
						break;
					case 5:
						{
						State = 185;
						indicationForUse();
						}
						break;
					}
					} 
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DosageSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(DefaultParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(DefaultParser.OR, 0); }
		public DosageSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dosageSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDosageSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDosageSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDosageSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DosageSeparatorContext dosageSeparator() {
		DosageSeparatorContext _localctx = new DosageSeparatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_dosageSeparator);
		int _la;
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case THEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 191;
					Match(AND);
					}
				}

				State = 194;
				Match(THEN);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				Match(OR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseDeliveryMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMINISTER() { return GetToken(DefaultParser.ADMINISTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLY() { return GetToken(DefaultParser.APPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISSOLVE() { return GetToken(DefaultParser.DISSOLVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GIVE() { return GetToken(DefaultParser.GIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFUSE() { return GetToken(DefaultParser.INFUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHALE() { return GetToken(DefaultParser.INHALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INJECT() { return GetToken(DefaultParser.INJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(DefaultParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACE() { return GetToken(DefaultParser.PLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUCK() { return GetToken(DefaultParser.SUCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAKE() { return GetToken(DefaultParser.TAKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(DefaultParser.USE, 0); }
		public DoseDeliveryMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseDeliveryMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseDeliveryMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseDeliveryMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseDeliveryMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseDeliveryMethodContext doseDeliveryMethod() {
		DoseDeliveryMethodContext _localctx = new DoseDeliveryMethodContext(Context, State);
		EnterRule(_localctx, 6, RULE_doseDeliveryMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADMINISTER) | (1L << APPLY) | (1L << DISSOLVE) | (1L << INHALE) | (1L << INFUSE) | (1L << INJECT) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (GIVE - 64)) | (1L << (PLACE - 64)) | (1L << (SUCK - 64)) | (1L << (TAKE - 64)) | (1L << (USE - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousDoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseValContext doseVal() {
			return GetRuleContext<DoseValContext>(0);
		}
		public AmbiguousDoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousDose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousDoseContext ambiguousDose() {
		AmbiguousDoseContext _localctx = new AmbiguousDoseContext(Context, State);
		EnterRule(_localctx, 8, RULE_ambiguousDose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			doseVal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueContext rangeNumericValue() {
			return GetRuleContext<RangeNumericValueContext>(0);
		}
		public DoseValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseValContext doseVal() {
		DoseValContext _localctx = new DoseValContext(Context, State);
		EnterRule(_localctx, 10, RULE_doseVal);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				numericValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				rangeNumericValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseValContext doseVal() {
			return GetRuleContext<DoseValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitContext doseUnit() {
			return GetRuleContext<DoseUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueWithUOMContext rangeNumericValueWithUOM() {
			return GetRuleContext<RangeNumericValueWithUOMContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(DefaultParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(DefaultParser.CLOSE_PAREN, 0); }
		public DoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseContext dose() {
		DoseContext _localctx = new DoseContext(Context, State);
		EnterRule(_localctx, 12, RULE_dose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 206;
				doseVal();
				State = 207;
				doseUnit();
				}
				break;
			case 2:
				{
				State = 209;
				rangeNumericValueWithUOM();
				}
				break;
			}
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 212;
				Match(OPEN_PAREN);
				State = 213;
				dose();
				State = 214;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext formExpression() {
			return GetRuleContext<FormExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext doseUnitOfMeasure() {
			return GetRuleContext<DoseUnitOfMeasureContext>(0);
		}
		public DoseUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseUnitContext doseUnit() {
		DoseUnitContext _localctx = new DoseUnitContext(Context, State);
		EnterRule(_localctx, 14, RULE_doseUnit);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EACH:
			case LIQUID:
			case APPLICATION:
			case CAPSULE:
			case CARTRIDGE:
			case DOSE:
			case DROP:
			case ELIXIR:
			case FILM:
			case INJECTION:
			case LOLLIPOP:
			case LOZENGE:
			case PATCH:
			case PILL:
			case PUFF:
			case SOLUTION:
			case SPRAY:
			case SUPPOSITORY:
			case SUSPENSION:
			case SYRINGE:
			case SYRUP:
			case SYSTEM:
			case TABLET:
			case TROCHE:
			case TDP:
			case BUCCAL:
			case INJECTABLE:
			case NASAL:
			case ORAL:
			case SUBLINGUAL:
			case TRANSDERMAL:
			case RECTAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				formExpression();
				}
				break;
			case CENTIMETERS:
			case CUBICCENTIMETERS:
			case GRAMS:
			case INTERNATIONALUNITS:
			case LITERS:
			case MILLIEQUIVALENTS:
			case MICROGRAMSPERHOUR:
			case MICROGRAMSPERACT:
			case MICROGRAMS:
			case MILLIGRAMSPERHOUR:
			case MILLIGRAMSPERACT:
			case MILLIGRAMSPERML:
			case MILLIGRAMS:
			case MILLILITERS:
			case OUNCES:
			case TABLESPOONS:
			case TEASPOONS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				doseUnitOfMeasure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormRouteContext formRoute() {
			return GetRuleContext<FormRouteContext>(0);
		}
		public FormExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormExpressionContext formExpression() {
		FormExpressionContext _localctx = new FormExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_formExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (INJECTABLE - 153)) | (1L << (NASAL - 153)) | (1L << (ORAL - 153)) | (1L << (SUBLINGUAL - 153)) | (1L << (TRANSDERMAL - 153)) | (1L << (RECTAL - 153)))) != 0)) {
				{
				State = 222;
				formRoute();
				}
			}

			State = 225;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormRouteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INJECTABLE() { return GetToken(DefaultParser.INJECTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NASAL() { return GetToken(DefaultParser.NASAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORAL() { return GetToken(DefaultParser.ORAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECTAL() { return GetToken(DefaultParser.RECTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBLINGUAL() { return GetToken(DefaultParser.SUBLINGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSDERMAL() { return GetToken(DefaultParser.TRANSDERMAL, 0); }
		public FormRouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formRoute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFormRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFormRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormRoute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormRouteContext formRoute() {
		FormRouteContext _localctx = new FormRouteContext(Context, State);
		EnterRule(_localctx, 18, RULE_formRoute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (INJECTABLE - 153)) | (1L << (NASAL - 153)) | (1L << (ORAL - 153)) | (1L << (SUBLINGUAL - 153)) | (1L << (TRANSDERMAL - 153)) | (1L << (RECTAL - 153)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION() { return GetToken(DefaultParser.APPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCCAL() { return GetToken(DefaultParser.BUCCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPSULE() { return GetToken(DefaultParser.CAPSULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARTRIDGE() { return GetToken(DefaultParser.CARTRIDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSE() { return GetToken(DefaultParser.DOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(DefaultParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIXIR() { return GetToken(DefaultParser.ELIXIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILM() { return GetToken(DefaultParser.FILM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INJECTION() { return GetToken(DefaultParser.INJECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIQUID() { return GetToken(DefaultParser.LIQUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOLLIPOP() { return GetToken(DefaultParser.LOLLIPOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOZENGE() { return GetToken(DefaultParser.LOZENGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCH() { return GetToken(DefaultParser.PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PILL() { return GetToken(DefaultParser.PILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUFF() { return GetToken(DefaultParser.PUFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOLUTION() { return GetToken(DefaultParser.SOLUTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPRAY() { return GetToken(DefaultParser.SPRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPOSITORY() { return GetToken(DefaultParser.SUPPOSITORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPENSION() { return GetToken(DefaultParser.SUSPENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYRINGE() { return GetToken(DefaultParser.SYRINGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYRUP() { return GetToken(DefaultParser.SYRUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(DefaultParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLET() { return GetToken(DefaultParser.TABLET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDP() { return GetToken(DefaultParser.TDP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TROCHE() { return GetToken(DefaultParser.TROCHE, 0); }
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 20, RULE_form);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			_la = TokenStream.LA(1);
			if ( !(_la==EACH || _la==LIQUID || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (APPLICATION - 129)) | (1L << (CAPSULE - 129)) | (1L << (CARTRIDGE - 129)) | (1L << (DOSE - 129)) | (1L << (DROP - 129)) | (1L << (ELIXIR - 129)) | (1L << (FILM - 129)) | (1L << (INJECTION - 129)) | (1L << (LOLLIPOP - 129)) | (1L << (LOZENGE - 129)) | (1L << (PATCH - 129)) | (1L << (PILL - 129)) | (1L << (PUFF - 129)) | (1L << (SOLUTION - 129)) | (1L << (SPRAY - 129)) | (1L << (SUPPOSITORY - 129)) | (1L << (SUSPENSION - 129)) | (1L << (SYRINGE - 129)) | (1L << (SYRUP - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLET - 129)) | (1L << (TROCHE - 129)) | (1L << (TDP - 129)) | (1L << (BUCCAL - 129)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseUnitOfMeasureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CENTIMETERS() { return GetToken(DefaultParser.CENTIMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBICCENTIMETERS() { return GetToken(DefaultParser.CUBICCENTIMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMS() { return GetToken(DefaultParser.GRAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNATIONALUNITS() { return GetToken(DefaultParser.INTERNATIONALUNITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERS() { return GetToken(DefaultParser.LITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIEQUIVALENTS() { return GetToken(DefaultParser.MILLIEQUIVALENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROGRAMSPERHOUR() { return GetToken(DefaultParser.MICROGRAMSPERHOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROGRAMSPERACT() { return GetToken(DefaultParser.MICROGRAMSPERACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROGRAMS() { return GetToken(DefaultParser.MICROGRAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMSPERHOUR() { return GetToken(DefaultParser.MILLIGRAMSPERHOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMSPERACT() { return GetToken(DefaultParser.MILLIGRAMSPERACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMSPERML() { return GetToken(DefaultParser.MILLIGRAMSPERML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMS() { return GetToken(DefaultParser.MILLIGRAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLILITERS() { return GetToken(DefaultParser.MILLILITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUNCES() { return GetToken(DefaultParser.OUNCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPOONS() { return GetToken(DefaultParser.TABLESPOONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEASPOONS() { return GetToken(DefaultParser.TEASPOONS, 0); }
		public DoseUnitOfMeasureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseUnitOfMeasure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseUnitOfMeasure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseUnitOfMeasure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseUnitOfMeasure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseUnitOfMeasureContext doseUnitOfMeasure() {
		DoseUnitOfMeasureContext _localctx = new DoseUnitOfMeasureContext(Context, State);
		EnterRule(_localctx, 22, RULE_doseUnitOfMeasure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (CENTIMETERS - 198)) | (1L << (CUBICCENTIMETERS - 198)) | (1L << (GRAMS - 198)) | (1L << (INTERNATIONALUNITS - 198)) | (1L << (LITERS - 198)) | (1L << (MILLIEQUIVALENTS - 198)) | (1L << (MICROGRAMSPERHOUR - 198)) | (1L << (MICROGRAMSPERACT - 198)) | (1L << (MICROGRAMS - 198)) | (1L << (MILLIGRAMSPERHOUR - 198)) | (1L << (MILLIGRAMSPERACT - 198)) | (1L << (MILLIGRAMSPERML - 198)) | (1L << (MILLIGRAMS - 198)) | (1L << (MILLILITERS - 198)) | (1L << (OUNCES - 198)) | (1L << (TABLESPOONS - 198)) | (1L << (TEASPOONS - 198)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RouteEnumContext[] routeEnum() {
			return GetRuleContexts<RouteEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteEnumContext routeEnum(int i) {
			return GetRuleContext<RouteEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteInstructionContext routeInstruction() {
			return GetRuleContext<RouteInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARDSLASH() { return GetTokens(DefaultParser.FORWARDSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH(int i) {
			return GetToken(DefaultParser.FORWARDSLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext[] route() {
			return GetRuleContexts<RouteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route(int i) {
			return GetRuleContext<RouteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DefaultParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DefaultParser.OR, i);
		}
		public RouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_route; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteContext route() {
		RouteContext _localctx = new RouteContext(Context, State);
		EnterRule(_localctx, 24, RULE_route);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 233;
				routeInstruction();
				}
				break;
			}
			State = 236;
			routeEnum();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORWARDSLASH) {
				{
				{
				State = 237;
				Match(FORWARDSLASH);
				State = 238;
				routeEnum();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OR) {
						{
						State = 244;
						Match(OR);
						}
					}

					State = 247;
					route();
					}
					} 
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(DefaultParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIA() { return GetToken(DefaultParser.VIA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(DefaultParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHALED() { return GetToken(DefaultParser.INHALED, 0); }
		public RouteInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRouteInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRouteInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteInstructionContext routeInstruction() {
		RouteInstructionContext _localctx = new RouteInstructionContext(Context, State);
		EnterRule(_localctx, 26, RULE_routeInstruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHALED) {
				{
				State = 253;
				Match(INHALED);
				}
			}

			State = 256;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (BY - 46)) | (1L << (PER - 46)) | (1L << (VIA - 46)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOUTH() { return GetToken(DefaultParser.MOUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORAL() { return GetToken(DefaultParser.ORAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORALLY() { return GetToken(DefaultParser.ORALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PO() { return GetToken(DefaultParser.PO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDER() { return GetToken(DefaultParser.UNDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(DefaultParser.THE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TONGUE() { return GetToken(DefaultParser.TONGUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SL() { return GetToken(DefaultParser.SL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBLINGUAL() { return GetToken(DefaultParser.SUBLINGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBLINGUALLY() { return GetToken(DefaultParser.SUBLINGUALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUBE() { return GetToken(DefaultParser.TUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEEDING() { return GetToken(DefaultParser.FEEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GASTROSTOMY() { return GetToken(DefaultParser.GASTROSTOMY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRANASALLY() { return GetToken(DefaultParser.INTRANASALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NASALLY() { return GetToken(DefaultParser.NASALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOSTRIL() { return GetToken(DefaultParser.NOSTRIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(DefaultParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECTAL() { return GetToken(DefaultParser.RECTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECTALLY() { return GetToken(DefaultParser.RECTALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPICAL() { return GetToken(DefaultParser.TOPICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPICALLY() { return GetToken(DefaultParser.TOPICALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSDERMAL() { return GetToken(DefaultParser.TRANSDERMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSDERMALLY() { return GetToken(DefaultParser.TRANSDERMALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOSKIN() { return GetToken(DefaultParser.TOSKIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONSKIN() { return GetToken(DefaultParser.ONSKIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUPPERTORSO() { return GetToken(DefaultParser.TOUPPERTORSO, 0); }
		public RouteEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRouteEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRouteEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteEnumContext routeEnum() {
		RouteEnumContext _localctx = new RouteEnumContext(Context, State);
		EnterRule(_localctx, 28, RULE_routeEnum);
		int _la;
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MOUTH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				Match(MOUTH);
				}
				break;
			case ORAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				Match(ORAL);
				}
				break;
			case ORALLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				Match(ORALLY);
				}
				break;
			case PO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261;
				Match(PO);
				}
				break;
			case UNDER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 262;
				Match(UNDER);
				State = 263;
				Match(THE);
				State = 264;
				Match(TONGUE);
				}
				break;
			case SL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 265;
				Match(SL);
				}
				break;
			case SUBLINGUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 266;
				Match(SUBLINGUAL);
				}
				break;
			case SUBLINGUALLY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 267;
				Match(SUBLINGUALLY);
				}
				break;
			case FEEDING:
			case GASTROSTOMY:
				EnterOuterAlt(_localctx, 9);
				{
				State = 268;
				_la = TokenStream.LA(1);
				if ( !(_la==FEEDING || _la==GASTROSTOMY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 269;
				Match(TUBE);
				}
				break;
			case INTRANASALLY:
				EnterOuterAlt(_localctx, 10);
				{
				State = 270;
				Match(INTRANASALLY);
				}
				break;
			case NASALLY:
				EnterOuterAlt(_localctx, 11);
				{
				State = 271;
				Match(NASALLY);
				}
				break;
			case EACH:
			case PER:
				EnterOuterAlt(_localctx, 12);
				{
				State = 272;
				_la = TokenStream.LA(1);
				if ( !(_la==EACH || _la==PER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 273;
				Match(NOSTRIL);
				}
				break;
			case RECTAL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 274;
				Match(RECTAL);
				}
				break;
			case RECTALLY:
				EnterOuterAlt(_localctx, 14);
				{
				State = 275;
				Match(RECTALLY);
				}
				break;
			case TOPICAL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 276;
				Match(TOPICAL);
				}
				break;
			case TOPICALLY:
				EnterOuterAlt(_localctx, 16);
				{
				State = 277;
				Match(TOPICALLY);
				}
				break;
			case TRANSDERMAL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 278;
				Match(TRANSDERMAL);
				}
				break;
			case TRANSDERMALLY:
				EnterOuterAlt(_localctx, 18);
				{
				State = 279;
				Match(TRANSDERMALLY);
				}
				break;
			case TOSKIN:
				EnterOuterAlt(_localctx, 19);
				{
				State = 280;
				Match(TOSKIN);
				}
				break;
			case ONSKIN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 281;
				Match(ONSKIN);
				}
				break;
			case TOUPPERTORSO:
				EnterOuterAlt(_localctx, 21);
				{
				State = 282;
				Match(TOUPPERTORSO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequenciesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyContext[] frequency() {
			return GetRuleContexts<FrequencyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyContext frequency(int i) {
			return GetRuleContext<FrequencyContext>(i);
		}
		public FrequenciesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequencies; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequencies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequenciesContext frequencies() {
		FrequenciesContext _localctx = new FrequenciesContext(Context, State);
		EnterRule(_localctx, 30, RULE_frequencies);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			frequency();
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 286;
					frequency();
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialFrequencyContext specialFrequency() {
			return GetRuleContext<SpecialFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicFrequencyContext basicFrequency() {
			return GetRuleContext<BasicFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayFrequencyContext dayFrequency() {
			return GetRuleContext<DayFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LatinFrequencyContext latinFrequency() {
			return GetRuleContext<LatinFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdministrationTimingContext administrationTiming() {
			return GetRuleContext<AdministrationTimingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(DefaultParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		public FrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequencyContext frequency() {
		FrequencyContext _localctx = new FrequencyContext(Context, State);
		EnterRule(_localctx, 32, RULE_frequency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 292;
					Match(AND);
					}
				}

				State = 295;
				Match(CHANGE);
				}
				break;
			}
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 298;
				specialFrequency();
				}
				break;
			case 2:
				{
				State = 299;
				basicFrequency();
				}
				break;
			case 3:
				{
				State = 300;
				dayFrequency();
				}
				break;
			case 4:
				{
				State = 301;
				latinFrequency();
				}
				break;
			case 5:
				{
				State = 302;
				administrationTiming();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext[] numericValue() {
			return GetRuleContexts<NumericValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue(int i) {
			return GetRuleContext<NumericValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(DefaultParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(DefaultParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(DefaultParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH() { return GetToken(DefaultParser.FORWARDSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(DefaultParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(DefaultParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(DefaultParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSE() { return GetToken(DefaultParser.DOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(DefaultParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DefaultParser.NUMBER, 0); }
		public SpecialFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSpecialFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSpecialFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialFrequencyContext specialFrequency() {
		SpecialFrequencyContext _localctx = new SpecialFrequencyContext(Context, State);
		EnterRule(_localctx, 34, RULE_specialFrequency);
		int _la;
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				Match(EVERY);
				State = 306;
				numericValue();
				State = 307;
				Match(HOUR);
				State = 308;
				Match(OPEN_PAREN);
				State = 309;
				numericValue();
				State = 310;
				Match(TIMES);
				State = 311;
				Match(FORWARDSLASH);
				State = 312;
				Match(DAY);
				State = 313;
				Match(CLOSE_PAREN);
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				Match(AS);
				State = 316;
				_la = TokenStream.LA(1);
				if ( !(_la==ONE || _la==NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 317;
				Match(DOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PeriodContext period() {
			return GetRuleContext<PeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LatinFrequencyContext latinFrequency() {
			return GetRuleContext<LatinFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeriodlyContext periodly() {
			return GetRuleContext<PeriodlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaximumContext maximum() {
			return GetRuleContext<MaximumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyValContext frequencyVal() {
			return GetRuleContext<FrequencyValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(DefaultParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN() { return GetToken(DefaultParser.A_AN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q_Q() { return GetToken(DefaultParser.Q_Q, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PeriodValContext periodVal() {
			return GetRuleContext<PeriodValContext>(0);
		}
		public BasicFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterBasicFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitBasicFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicFrequencyContext basicFrequency() {
		BasicFrequencyContext _localctx = new BasicFrequencyContext(Context, State);
		EnterRule(_localctx, 36, RULE_basicFrequency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAXIMUM || _la==UP) {
				{
				State = 320;
				maximum();
				}
			}

			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HALF) | (1L << ONE) | (1L << ONCE) | (1L << TWO) | (1L << TWICE) | (1L << THREE) | (1L << THRICE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << TEN) | (1L << TWELVE) | (1L << TWENTY) | (1L << THIRTY) | (1L << FORTY) | (1L << SEVENTY) | (1L << NUMBER))) != 0)) {
				{
				State = 323;
				frequencyVal();
				}
			}

			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 326;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_AN) | (1L << EACH) | (1L << EVERY))) != 0) || _la==PER || _la==Q_Q) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HALF) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << TEN) | (1L << TWELVE) | (1L << TWENTY) | (1L << THIRTY) | (1L << FORTY) | (1L << SEVENTY) | (1L << NUMBER))) != 0)) {
					{
					State = 327;
					periodVal();
					}
				}

				State = 330;
				period();
				}
				break;
			case 2:
				{
				State = 331;
				latinFrequency();
				}
				break;
			case 3:
				{
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Q_Q) {
					{
					State = 332;
					Match(Q_Q);
					}
				}

				State = 335;
				periodly();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueContext rangeNumericValue() {
			return GetRuleContext<RangeNumericValueContext>(0);
		}
		public PeriodValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodValContext periodVal() {
		PeriodValContext _localctx = new PeriodValContext(Context, State);
		EnterRule(_localctx, 38, RULE_periodVal);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				numericValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				rangeNumericValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaximumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXIMUM() { return GetToken(DefaultParser.MAXIMUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UP() { return GetToken(DefaultParser.UP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(DefaultParser.TO, 0); }
		public MaximumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maximum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMaximum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMaximum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaximum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaximumContext maximum() {
		MaximumContext _localctx = new MaximumContext(Context, State);
		EnterRule(_localctx, 40, RULE_maximum);
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAXIMUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342;
				Match(MAXIMUM);
				}
				break;
			case UP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				Match(UP);
				State = 344;
				Match(TO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequencyValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(DefaultParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(DefaultParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_X() { return GetToken(DefaultParser.X_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueContext rangeNumericValue() {
			return GetRuleContext<RangeNumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONCE() { return GetToken(DefaultParser.ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWICE() { return GetToken(DefaultParser.TWICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THRICE() { return GetToken(DefaultParser.THRICE, 0); }
		public FrequencyValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequencyVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFrequencyVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFrequencyVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequencyVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequencyValContext frequencyVal() {
		FrequencyValContext _localctx = new FrequencyValContext(Context, State);
		EnterRule(_localctx, 42, RULE_frequencyVal);
		int _la;
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 347;
					numericValue();
					}
					break;
				case 2:
					{
					State = 348;
					rangeNumericValue();
					}
					break;
				}
				State = 351;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (TIME - 101)) | (1L << (TIMES - 101)) | (1L << (X_X - 101)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ONCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				Match(ONCE);
				}
				break;
			case TWICE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354;
				Match(TWICE);
				}
				break;
			case THRICE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 355;
				Match(THRICE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DayOfTheWeekContext[] dayOfTheWeek() {
			return GetRuleContexts<DayOfTheWeekContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayOfTheWeekContext dayOfTheWeek(int i) {
			return GetRuleContext<DayOfTheWeekContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(DefaultParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		public DayFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDayFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDayFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayFrequencyContext dayFrequency() {
		DayFrequencyContext _localctx = new DayFrequencyContext(Context, State);
		EnterRule(_localctx, 44, RULE_dayFrequency);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !(_la==EVERY || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 359;
			dayOfTheWeek();
			State = 366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 361;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND) {
						{
						State = 360;
						Match(AND);
						}
					}

					State = 363;
					dayOfTheWeek();
					}
					} 
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LatinFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QD() { return GetToken(DefaultParser.QD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QHS() { return GetToken(DefaultParser.QHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QOD() { return GetToken(DefaultParser.QOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BID() { return GetToken(DefaultParser.BID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TID() { return GetToken(DefaultParser.TID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QID() { return GetToken(DefaultParser.QID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QPM() { return GetToken(DefaultParser.QPM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QN() { return GetToken(DefaultParser.QN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QAM() { return GetToken(DefaultParser.QAM, 0); }
		public LatinFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_latinFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterLatinFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitLatinFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLatinFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LatinFrequencyContext latinFrequency() {
		LatinFrequencyContext _localctx = new LatinFrequencyContext(Context, State);
		EnterRule(_localctx, 46, RULE_latinFrequency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (BID - 112)) | (1L << (QAM - 112)) | (1L << (QD - 112)) | (1L << (QHS - 112)) | (1L << (QID - 112)) | (1L << (QN - 112)) | (1L << (QOD - 112)) | (1L << (QPM - 112)) | (1L << (TID - 112)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdministrationTimingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificTimesContext specificTimes() {
			return GetRuleContext<SpecificTimesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayContext timeOfDay() {
			return GetRuleContext<TimeOfDayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimingEventContext timingEvent() {
			return GetRuleContext<TimingEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LatinAdministrationTimingContext latinAdministrationTiming() {
			return GetRuleContext<LatinAdministrationTimingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(DefaultParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(DefaultParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(DefaultParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(DefaultParser.THE, 0); }
		public AdministrationTimingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_administrationTiming; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdministrationTiming(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdministrationTimingContext administrationTiming() {
		AdministrationTimingContext _localctx = new AdministrationTimingContext(Context, State);
		EnterRule(_localctx, 48, RULE_administrationTiming);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 371;
				Match(AND);
				}
			}

			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 374;
				Match(THEN);
				}
			}

			State = 378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 377;
				Match(AT);
				}
				break;
			}
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 380;
				Match(IN);
				}
			}

			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THE) {
				{
				State = 383;
				Match(THE);
				}
			}

			}
			State = 390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 386;
				specificTimes();
				}
				break;
			case 2:
				{
				State = 387;
				timeOfDay();
				}
				break;
			case 3:
				{
				State = 388;
				timingEvent();
				}
				break;
			case 4:
				{
				State = 389;
				latinAdministrationTiming();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificTimesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificTimeContext[] specificTime() {
			return GetRuleContexts<SpecificTimeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecificTimeContext specificTime(int i) {
			return GetRuleContext<SpecificTimeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT() { return GetTokens(DefaultParser.AT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT(int i) {
			return GetToken(DefaultParser.AT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DefaultParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DefaultParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		public SpecificTimesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificTimes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSpecificTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSpecificTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificTimes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificTimesContext specificTimes() {
		SpecificTimesContext _localctx = new SpecificTimesContext(Context, State);
		EnterRule(_localctx, 50, RULE_specificTimes);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			specificTime();
			State = 402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 394;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA || _la==AND) {
						{
						State = 393;
						_la = TokenStream.LA(1);
						if ( !(_la==COMMA || _la==AND) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT) {
						{
						State = 396;
						Match(AT);
						}
					}

					State = 399;
					specificTime();
					}
					} 
				}
				State = 404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificTimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HourContext hour() {
			return GetRuleContext<HourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HourAndMinuteContext hourAndMinute() {
			return GetRuleContext<HourAndMinuteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AM() { return GetToken(DefaultParser.AM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PM() { return GetToken(DefaultParser.PM, 0); }
		public SpecificTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSpecificTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSpecificTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificTimeContext specificTime() {
		SpecificTimeContext _localctx = new SpecificTimeContext(Context, State);
		EnterRule(_localctx, 52, RULE_specificTime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 405;
				hour();
				}
				break;
			case CLOCKNUMBER:
				{
				State = 406;
				hourAndMinute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AM || _la==PM) {
				{
				State = 409;
				_la = TokenStream.LA(1);
				if ( !(_la==AM || _la==PM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DefaultParser.NUMBER, 0); }
		public HourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHour(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HourContext hour() {
		HourContext _localctx = new HourContext(Context, State);
		EnterRule(_localctx, 54, RULE_hour);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HourAndMinuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCKNUMBER() { return GetToken(DefaultParser.CLOCKNUMBER, 0); }
		public HourAndMinuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hourAndMinute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterHourAndMinute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitHourAndMinute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHourAndMinute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HourAndMinuteContext hourAndMinute() {
		HourAndMinuteContext _localctx = new HourAndMinuteContext(Context, State);
		EnterRule(_localctx, 56, RULE_hourAndMinute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(CLOCKNUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORNING() { return GetToken(DefaultParser.MORNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENING() { return GetToken(DefaultParser.EVENING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIGHT() { return GetToken(DefaultParser.NIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEDTIME() { return GetToken(DefaultParser.BEDTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(DefaultParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOON() { return GetToken(DefaultParser.NOON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIDDAY() { return GetToken(DefaultParser.MIDDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(DefaultParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(DefaultParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PeriodBeforeOrAfterContext periodBeforeOrAfter() {
			return GetRuleContext<PeriodBeforeOrAfterContext>(0);
		}
		public TimeOfDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTimeOfDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTimeOfDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayContext timeOfDay() {
		TimeOfDayContext _localctx = new TimeOfDayContext(Context, State);
		EnterRule(_localctx, 58, RULE_timeOfDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EACH || _la==EVERY) {
				{
				State = 416;
				_la = TokenStream.LA(1);
				if ( !(_la==EACH || _la==EVERY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MORNING:
				{
				State = 419;
				Match(MORNING);
				}
				break;
			case AFTER:
			case AT:
			case BEFORE:
			case DAY:
				{
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DAY) {
					{
					State = 420;
					Match(DAY);
					}
				}

				State = 423;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AFTER) | (1L << AT) | (1L << BEFORE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 424;
				_la = TokenStream.LA(1);
				if ( !(_la==MIDDAY || _la==NOON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case EVENING:
				{
				State = 425;
				Match(EVENING);
				}
				break;
			case NIGHT:
				{
				State = 426;
				Match(NIGHT);
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TIME) {
					{
					State = 427;
					Match(TIME);
					}
				}

				}
				break;
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
			case NUMBER:
			case BEDTIME:
				{
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HALF) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << TEN) | (1L << TWELVE) | (1L << TWENTY) | (1L << THIRTY) | (1L << FORTY) | (1L << SEVENTY) | (1L << NUMBER))) != 0)) {
					{
					State = 430;
					periodBeforeOrAfter();
					}
				}

				State = 433;
				Match(BEDTIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimingEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MealsContext meals() {
			return GetRuleContext<MealsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DefaultParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PeriodBeforeOrAfterContext periodBeforeOrAfter() {
			return GetRuleContext<PeriodBeforeOrAfterContext>(0);
		}
		public TimingEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timingEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTimingEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTimingEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimingEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimingEventContext timingEvent() {
		TimingEventContext _localctx = new TimingEventContext(Context, State);
		EnterRule(_localctx, 60, RULE_timingEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				{
				State = 436;
				Match(BEFORE);
				}
				break;
			case AFTER:
				{
				State = 437;
				Match(AFTER);
				}
				break;
			case WITH:
				{
				State = 438;
				Match(WITH);
				}
				break;
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
			case NUMBER:
				{
				State = 439;
				periodBeforeOrAfter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 442;
			_la = TokenStream.LA(1);
			if ( !(_la==EACH || _la==EVERY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 443;
			meals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LatinAdministrationTimingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HS() { return GetToken(DefaultParser.HS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QPC() { return GetToken(DefaultParser.QPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QAC() { return GetToken(DefaultParser.QAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		public LatinAdministrationTimingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_latinAdministrationTiming; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterLatinAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitLatinAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLatinAdministrationTiming(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LatinAdministrationTimingContext latinAdministrationTiming() {
		LatinAdministrationTimingContext _localctx = new LatinAdministrationTimingContext(Context, State);
		EnterRule(_localctx, 62, RULE_latinAdministrationTiming);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVERY) {
				{
				State = 445;
				Match(EVERY);
				}
			}

			State = 448;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (HS - 113)) | (1L << (QAC - 113)) | (1L << (QPC - 113)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodBeforeOrAfterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(DefaultParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(DefaultParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		public PeriodBeforeOrAfterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodBeforeOrAfter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodBeforeOrAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodBeforeOrAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodBeforeOrAfter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodBeforeOrAfterContext periodBeforeOrAfter() {
		PeriodBeforeOrAfterContext _localctx = new PeriodBeforeOrAfterContext(Context, State);
		EnterRule(_localctx, 64, RULE_periodBeforeOrAfter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			numericValue();
			State = 451;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUTE || _la==HOUR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 452;
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MealsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEAL() { return GetToken(DefaultParser.MEAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAKFAST() { return GetToken(DefaultParser.BREAKFAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNCH() { return GetToken(DefaultParser.LUNCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DINNER() { return GetToken(DefaultParser.DINNER, 0); }
		public MealsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMeals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMeals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MealsContext meals() {
		MealsContext _localctx = new MealsContext(Context, State);
		EnterRule(_localctx, 66, RULE_meals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (BREAKFAST - 43)) | (1L << (DINNER - 43)) | (1L << (LUNCH - 43)) | (1L << (MEAL - 43)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationStandardContext durationStandard() {
			return GetRuleContext<DurationStandardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationOrdinalContext durationOrdinal() {
			return GetRuleContext<DurationOrdinalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationUnboundedContext durationUnbounded() {
			return GetRuleContext<DurationUnboundedContext>(0);
		}
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(Context, State);
		EnterRule(_localctx, 68, RULE_duration);
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456;
				durationStandard();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 457;
				durationOrdinal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 458;
				durationUnbounded();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationStandardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeriodContext period() {
			return GetRuleContext<PeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(DefaultParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(DefaultParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN() { return GetToken(DefaultParser.A_AN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUST() { return GetToken(DefaultParser.MUST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(DefaultParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_X() { return GetToken(DefaultParser.X_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPLY() { return GetToken(DefaultParser.SUPPLY, 0); }
		public DurationStandardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationStandard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDurationStandard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDurationStandard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationStandard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationStandardContext durationStandard() {
		DurationStandardContext _localctx = new DurationStandardContext(Context, State);
		EnterRule(_localctx, 70, RULE_durationStandard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 461;
				Match(FOR);
				}
				break;
			case THIS:
				{
				State = 462;
				Match(THIS);
				State = 463;
				Match(IS);
				State = 464;
				Match(A_AN);
				}
				break;
			case MUST:
				{
				State = 465;
				Match(MUST);
				State = 466;
				Match(LAST);
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 467;
					Match(FOR);
					}
				}

				}
				break;
			case X_X:
				{
				State = 470;
				Match(X_X);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 473;
			numericValue();
			State = 474;
			period();
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUPPLY) {
				{
				State = 475;
				Match(SUPPLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationOrdinalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(DefaultParser.THE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrdinalNumericContext ordinalNumeric() {
			return GetRuleContext<OrdinalNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeriodContext period() {
			return GetRuleContext<PeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(DefaultParser.ON, 0); }
		public DurationOrdinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationOrdinal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDurationOrdinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDurationOrdinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationOrdinal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationOrdinalContext durationOrdinal() {
		DurationOrdinalContext _localctx = new DurationOrdinalContext(Context, State);
		EnterRule(_localctx, 72, RULE_durationOrdinal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			_la = TokenStream.LA(1);
			if ( !(_la==FOR || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 479;
			Match(THE);
			State = 480;
			ordinalNumeric();
			State = 481;
			period();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationUnboundedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEREAFTER() { return GetToken(DefaultParser.THEREAFTER, 0); }
		public DurationUnboundedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationUnbounded; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDurationUnbounded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDurationUnbounded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationUnbounded(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationUnboundedContext durationUnbounded() {
		DurationUnboundedContext _localctx = new DurationUnboundedContext(Context, State);
		EnterRule(_localctx, 74, RULE_durationUnbounded);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(THEREAFTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WithFoodContext withFood() {
			return GetRuleContext<WithFoodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithLiquidContext withLiquid() {
			return GetRuleContext<WithLiquidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsDirectedContext asDirected() {
			return GetRuleContext<AsDirectedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStomachContext emptyStomach() {
			return GetRuleContext<EmptyStomachContext>(0);
		}
		public AdditionalInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalInstructionContext additionalInstruction() {
		AdditionalInstructionContext _localctx = new AdditionalInstructionContext(Context, State);
		EnterRule(_localctx, 76, RULE_additionalInstruction);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485;
				withFood();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				withLiquid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 487;
				asDirected();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 488;
				emptyStomach();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStomachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(DefaultParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_TOKEN() { return GetToken(DefaultParser.EMPTY_TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOMACH() { return GetToken(DefaultParser.STOMACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN() { return GetToken(DefaultParser.A_AN, 0); }
		public EmptyStomachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStomach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterEmptyStomach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitEmptyStomach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStomach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStomachContext emptyStomach() {
		EmptyStomachContext _localctx = new EmptyStomachContext(Context, State);
		EnterRule(_localctx, 78, RULE_emptyStomach);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(ON);
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A_AN) {
				{
				State = 492;
				Match(A_AN);
				}
			}

			State = 495;
			Match(EMPTY_TOKEN);
			State = 496;
			Match(STOMACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsDirectedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(DefaultParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTED() { return GetToken(DefaultParser.DIRECTED, 0); }
		public AsDirectedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asDirected; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAsDirected(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAsDirected(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsDirected(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsDirectedContext asDirected() {
		AsDirectedContext _localctx = new AsDirectedContext(Context, State);
		EnterRule(_localctx, 80, RULE_asDirected);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(AS);
			State = 499;
			Match(DIRECTED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithFoodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DefaultParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEAL() { return GetToken(DefaultParser.MEAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOOD() { return GetToken(DefaultParser.FOOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EATING() { return GetToken(DefaultParser.EATING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(DefaultParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PC() { return GetToken(DefaultParser.PC, 0); }
		public WithFoodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withFood; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWithFood(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWithFood(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithFood(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithFoodContext withFood() {
		WithFoodContext _localctx = new WithFoodContext(Context, State);
		EnterRule(_localctx, 82, RULE_withFood);
		int _la;
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFTER:
			case BEFORE:
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				_la = TokenStream.LA(1);
				if ( !(_la==AFTER || _la==BEFORE || _la==WITH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 502;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & ((1L << (EATING - 52)) | (1L << (FOOD - 52)) | (1L << (MEAL - 52)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case AC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 503;
				Match(AC);
				}
				break;
			case PC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 504;
				Match(PC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithLiquidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DefaultParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WATER() { return GetToken(DefaultParser.WATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILK() { return GetToken(DefaultParser.MILK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIQUID() { return GetToken(DefaultParser.LIQUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLENTY() { return GetToken(DefaultParser.PLENTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(DefaultParser.OF, 0); }
		public WithLiquidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withLiquid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWithLiquid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWithLiquid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithLiquid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithLiquidContext withLiquid() {
		WithLiquidContext _localctx = new WithLiquidContext(Context, State);
		EnterRule(_localctx, 84, RULE_withLiquid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(WITH);
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLENTY) {
				{
				State = 508;
				Match(PLENTY);
				State = 509;
				Match(OF);
				}
			}

			State = 512;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LIQUID - 68)) | (1L << (MILK - 68)) | (1L << (WATER - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationForUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndicationValueContext indicationValue() {
			return GetRuleContext<IndicationValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndicationPrecursorContext indicationPrecursor() {
			return GetRuleContext<IndicationPrecursorContext>(0);
		}
		public IndicationForUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationForUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationForUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationForUseContext indicationForUse() {
		IndicationForUseContext _localctx = new IndicationForUseContext(Context, State);
		EnterRule(_localctx, 86, RULE_indicationForUse);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 514;
					Match(FOR);
					}
					break;
				case AS:
				case PRN:
					{
					State = 515;
					indicationPrecursor();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 518;
				indicationValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519;
				indicationPrecursor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationPrecursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(DefaultParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEEDED() { return GetToken(DefaultParser.NEEDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRN() { return GetToken(DefaultParser.PRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		public IndicationPrecursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationPrecursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationPrecursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationPrecursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationPrecursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationPrecursorContext indicationPrecursor() {
		IndicationPrecursorContext _localctx = new IndicationPrecursorContext(Context, State);
		EnterRule(_localctx, 88, RULE_indicationPrecursor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 522;
				Match(AS);
				State = 523;
				Match(NEEDED);
				}
				break;
			case PRN:
				{
				State = 524;
				Match(PRN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 527;
				Match(FOR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext[] freeText() {
			return GetRuleContexts<FreeTextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText(int i) {
			return GetRuleContext<FreeTextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationEnumContext[] indicationEnum() {
			return GetRuleContexts<IndicationEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationEnumContext indicationEnum(int i) {
			return GetRuleContext<IndicationEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DefaultParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DefaultParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(DefaultParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(DefaultParser.TO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARDSLASH() { return GetTokens(DefaultParser.FORWARDSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH(int i) {
			return GetToken(DefaultParser.FORWARDSLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(DefaultParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(DefaultParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THE() { return GetTokens(DefaultParser.THE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE(int i) {
			return GetToken(DefaultParser.THE, i);
		}
		public IndicationValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationValueContext indicationValue() {
		IndicationValueContext _localctx = new IndicationValueContext(Context, State);
		EnterRule(_localctx, 90, RULE_indicationValue);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 538;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WORD:
						{
						State = 530;
						freeText();
						}
						break;
					case COUGH:
					case HEADACHE:
					case NAUSEA:
					case PAIN:
					case SHORTNESS:
					case SLEEP:
					case SOB:
						{
						State = 531;
						indicationEnum();
						}
						break;
					case OR:
						{
						State = 532;
						Match(OR);
						}
						break;
					case AND:
						{
						State = 533;
						Match(AND);
						}
						break;
					case TO:
						{
						State = 534;
						Match(TO);
						}
						break;
					case FORWARDSLASH:
						{
						State = 535;
						Match(FORWARDSLASH);
						}
						break;
					case IN:
						{
						State = 536;
						Match(IN);
						}
						break;
					case THE:
						{
						State = 537;
						Match(THE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 540;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUGH() { return GetToken(DefaultParser.COUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADACHE() { return GetToken(DefaultParser.HEADACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAUSEA() { return GetToken(DefaultParser.NAUSEA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAIN() { return GetToken(DefaultParser.PAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLEEP() { return GetToken(DefaultParser.SLEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTNESS() { return GetToken(DefaultParser.SHORTNESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(DefaultParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREATH() { return GetToken(DefaultParser.BREATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOB() { return GetToken(DefaultParser.SOB, 0); }
		public IndicationEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationEnumContext indicationEnum() {
		IndicationEnumContext _localctx = new IndicationEnumContext(Context, State);
		EnterRule(_localctx, 92, RULE_indicationEnum);
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COUGH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542;
				Match(COUGH);
				}
				break;
			case HEADACHE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543;
				Match(HEADACHE);
				}
				break;
			case NAUSEA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 544;
				Match(NAUSEA);
				}
				break;
			case PAIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 545;
				Match(PAIN);
				}
				break;
			case SLEEP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 546;
				Match(SLEEP);
				}
				break;
			case SHORTNESS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 547;
				Match(SHORTNESS);
				State = 548;
				Match(OF);
				State = 549;
				Match(BREATH);
				}
				break;
			case SOB:
				EnterOuterAlt(_localctx, 7);
				{
				State = 550;
				Match(SOB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrdinalNumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(DefaultParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(DefaultParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIRD() { return GetToken(DefaultParser.THIRD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOURTH() { return GetToken(DefaultParser.FOURTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIFTH() { return GetToken(DefaultParser.FIFTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIXTH() { return GetToken(DefaultParser.SIXTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVENTH() { return GetToken(DefaultParser.SEVENTH, 0); }
		public OrdinalNumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinalNumeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterOrdinalNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitOrdinalNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdinalNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrdinalNumericContext ordinalNumeric() {
		OrdinalNumericContext _localctx = new OrdinalNumericContext(Context, State);
		EnterRule(_localctx, 94, RULE_ordinalNumeric);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST) | (1L << THIRD) | (1L << FOURTH) | (1L << FIFTH) | (1L << SIXTH) | (1L << SEVENTH))) != 0) || _la==SECOND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DefaultParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordNumberContext wordNumber() {
			return GetRuleContext<WordNumberContext>(0);
		}
		public NumericValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericValueContext numericValue() {
		NumericValueContext _localctx = new NumericValueContext(Context, State);
		EnterRule(_localctx, 96, RULE_numericValue);
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555;
				Match(NUMBER);
				}
				break;
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 556;
				wordNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeNumericValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext[] numericValue() {
			return GetRuleContexts<NumericValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue(int i) {
			return GetRuleContext<NumericValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeSeparatorContext rangeSeparator() {
			return GetRuleContext<RangeSeparatorContext>(0);
		}
		public RangeNumericValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeNumericValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRangeNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRangeNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeNumericValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeNumericValueContext rangeNumericValue() {
		RangeNumericValueContext _localctx = new RangeNumericValueContext(Context, State);
		EnterRule(_localctx, 98, RULE_rangeNumericValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			numericValue();
			State = 560;
			rangeSeparator();
			State = 561;
			numericValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeNumericValueWithUOMContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext[] numericValue() {
			return GetRuleContexts<NumericValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue(int i) {
			return GetRuleContext<NumericValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext[] doseUnitOfMeasure() {
			return GetRuleContexts<DoseUnitOfMeasureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext doseUnitOfMeasure(int i) {
			return GetRuleContext<DoseUnitOfMeasureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeSeparatorContext rangeSeparator() {
			return GetRuleContext<RangeSeparatorContext>(0);
		}
		public RangeNumericValueWithUOMContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeNumericValueWithUOM; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRangeNumericValueWithUOM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRangeNumericValueWithUOM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeNumericValueWithUOM(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeNumericValueWithUOMContext rangeNumericValueWithUOM() {
		RangeNumericValueWithUOMContext _localctx = new RangeNumericValueWithUOMContext(Context, State);
		EnterRule(_localctx, 100, RULE_rangeNumericValueWithUOM);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			numericValue();
			State = 564;
			doseUnitOfMeasure();
			State = 565;
			rangeSeparator();
			State = 566;
			numericValue();
			State = 567;
			doseUnitOfMeasure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(DefaultParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(DefaultParser.DASH, 0); }
		public RangeSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRangeSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRangeSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeSeparatorContext rangeSeparator() {
		RangeSeparatorContext _localctx = new RangeSeparatorContext(Context, State);
		EnterRule(_localctx, 102, RULE_rangeSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			_la = TokenStream.LA(1);
			if ( !(_la==DASH || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PeriodEnumContext periodEnum() {
			return GetRuleContext<PeriodEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrdinalNumericContext ordinalNumeric() {
			return GetRuleContext<OrdinalNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(DefaultParser.OTHER, 0); }
		public PeriodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_period; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodContext period() {
		PeriodContext _localctx = new PeriodContext(Context, State);
		EnterRule(_localctx, 104, RULE_period);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 571;
				ordinalNumeric();
				}
				break;
			case 2:
				{
				State = 572;
				Match(OTHER);
				}
				break;
			}
			State = 575;
			periodEnum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(DefaultParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(DefaultParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(DefaultParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(DefaultParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(DefaultParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(DefaultParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(DefaultParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(DefaultParser.YEAR, 0); }
		public PeriodEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodEnumContext periodEnum() {
		PeriodEnumContext _localctx = new PeriodEnumContext(Context, State);
		EnterRule(_localctx, 106, RULE_periodEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (MILLISECOND - 178)) | (1L << (SECOND - 178)) | (1L << (MINUTE - 178)) | (1L << (HOUR - 178)) | (1L << (DAY - 178)) | (1L << (WEEK - 178)) | (1L << (MONTH - 178)) | (1L << (YEAR - 178)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayOfTheWeekContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONDAY() { return GetToken(DefaultParser.MONDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUESDAY() { return GetToken(DefaultParser.TUESDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEDNESDAY() { return GetToken(DefaultParser.WEDNESDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THURSDAY() { return GetToken(DefaultParser.THURSDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRIDAY() { return GetToken(DefaultParser.FRIDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SATURDAY() { return GetToken(DefaultParser.SATURDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUNDAY() { return GetToken(DefaultParser.SUNDAY, 0); }
		public DayOfTheWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayOfTheWeek; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDayOfTheWeek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDayOfTheWeek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayOfTheWeek(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayOfTheWeekContext dayOfTheWeek() {
		DayOfTheWeekContext _localctx = new DayOfTheWeekContext(Context, State);
		EnterRule(_localctx, 108, RULE_dayOfTheWeek);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (MONDAY - 191)) | (1L << (TUESDAY - 191)) | (1L << (WEDNESDAY - 191)) | (1L << (THURSDAY - 191)) | (1L << (FRIDAY - 191)) | (1L << (SATURDAY - 191)) | (1L << (SUNDAY - 191)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOURLY() { return GetToken(DefaultParser.HOURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAILY() { return GetToken(DefaultParser.DAILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKLY() { return GetToken(DefaultParser.WEEKLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTHLY() { return GetToken(DefaultParser.MONTHLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEARLY() { return GetToken(DefaultParser.YEARLY, 0); }
		public PeriodlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodlyContext periodly() {
		PeriodlyContext _localctx = new PeriodlyContext(Context, State);
		EnterRule(_localctx, 110, RULE_periodly);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (HOURLY - 186)) | (1L << (DAILY - 186)) | (1L << (WEEKLY - 186)) | (1L << (MONTHLY - 186)) | (1L << (YEARLY - 186)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WordDigitContext[] wordDigit() {
			return GetRuleContexts<WordDigitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WordDigitContext wordDigit(int i) {
			return GetRuleContext<WordDigitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A_AN() { return GetTokens(DefaultParser.A_AN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN(int i) {
			return GetToken(DefaultParser.A_AN, i);
		}
		public WordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWordNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWordNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordNumberContext wordNumber() {
		WordNumberContext _localctx = new WordNumberContext(Context, State);
		EnterRule(_localctx, 112, RULE_wordNumber);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			wordDigit();
			State = 593;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 588;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND) {
						{
						State = 584;
						Match(AND);
						State = 586;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==A_AN) {
							{
							State = 585;
							Match(A_AN);
							}
						}

						}
					}

					State = 590;
					wordDigit();
					}
					} 
				}
				State = 595;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordDigitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(DefaultParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO() { return GetToken(DefaultParser.TWO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREE() { return GetToken(DefaultParser.THREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUR() { return GetToken(DefaultParser.FOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIVE() { return GetToken(DefaultParser.FIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIX() { return GetToken(DefaultParser.SIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVEN() { return GetToken(DefaultParser.SEVEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EIGHT() { return GetToken(DefaultParser.EIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NINE() { return GetToken(DefaultParser.NINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEN() { return GetToken(DefaultParser.TEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWELVE() { return GetToken(DefaultParser.TWELVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HALF() { return GetToken(DefaultParser.HALF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWENTY() { return GetToken(DefaultParser.TWENTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIRTY() { return GetToken(DefaultParser.THIRTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORTY() { return GetToken(DefaultParser.FORTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVENTY() { return GetToken(DefaultParser.SEVENTY, 0); }
		public WordDigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordDigit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWordDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWordDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordDigit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordDigitContext wordDigit() {
		WordDigitContext _localctx = new WordDigitContext(Context, State);
		EnterRule(_localctx, 114, RULE_wordDigit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HALF) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << TEN) | (1L << TWELVE) | (1L << TWENTY) | (1L << THIRTY) | (1L << FORTY) | (1L << SEVENTY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MedicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MedicationComponentContext[] medicationComponent() {
			return GetRuleContexts<MedicationComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MedicationComponentContext medicationComponent(int i) {
			return GetRuleContext<MedicationComponentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DefaultParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARDSLASH() { return GetTokens(DefaultParser.FORWARDSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH(int i) {
			return GetToken(DefaultParser.FORWARDSLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugFormContext drugForm() {
			return GetRuleContext<DrugFormContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BrandNameContext brandName() {
			return GetRuleContext<BrandNameContext>(0);
		}
		public MedicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_medication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMedication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMedication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMedication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MedicationContext medication() {
		MedicationContext _localctx = new MedicationContext(Context, State);
		EnterRule(_localctx, 116, RULE_medication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			medicationComponent();
			State = 603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORWARDSLASH) {
				{
				{
				State = 599;
				Match(FORWARDSLASH);
				State = 600;
				medicationComponent();
				}
				}
				State = 605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EACH || _la==LIQUID || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (APPLICATION - 129)) | (1L << (CAPSULE - 129)) | (1L << (CARTRIDGE - 129)) | (1L << (DOSE - 129)) | (1L << (DROP - 129)) | (1L << (ELIXIR - 129)) | (1L << (FILM - 129)) | (1L << (INJECTION - 129)) | (1L << (LOLLIPOP - 129)) | (1L << (LOZENGE - 129)) | (1L << (PATCH - 129)) | (1L << (PILL - 129)) | (1L << (PUFF - 129)) | (1L << (SOLUTION - 129)) | (1L << (SPRAY - 129)) | (1L << (SUPPOSITORY - 129)) | (1L << (SUSPENSION - 129)) | (1L << (SYRINGE - 129)) | (1L << (SYRUP - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLET - 129)) | (1L << (TROCHE - 129)) | (1L << (TDP - 129)) | (1L << (BUCCAL - 129)) | (1L << (INJECTABLE - 129)) | (1L << (NASAL - 129)) | (1L << (ORAL - 129)) | (1L << (SUBLINGUAL - 129)) | (1L << (TRANSDERMAL - 129)) | (1L << (RECTAL - 129)))) != 0) || _la==WORD) {
				{
				State = 606;
				drugForm();
				}
			}

			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BRANDNAME) {
				{
				State = 609;
				brandName();
				}
			}

			State = 612;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MedicationComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleMedicationComponentContext simpleMedicationComponent() {
			return GetRuleContext<SimpleMedicationComponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexMedicationComponentContext complexMedicationComponent() {
			return GetRuleContext<ComplexMedicationComponentContext>(0);
		}
		public MedicationComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_medicationComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMedicationComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MedicationComponentContext medicationComponent() {
		MedicationComponentContext _localctx = new MedicationComponentContext(Context, State);
		EnterRule(_localctx, 118, RULE_medicationComponent);
		try {
			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614;
				simpleMedicationComponent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615;
				complexMedicationComponent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleMedicationComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrengthContext strength() {
			return GetRuleContext<StrengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpioidContext opioid() {
			return GetRuleContext<OpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonOpioidContext nonOpioid() {
			return GetRuleContext<NonOpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext[] description() {
			return GetRuleContexts<DescriptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description(int i) {
			return GetRuleContext<DescriptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugSuffixContext drugSuffix() {
			return GetRuleContext<DrugSuffixContext>(0);
		}
		public SimpleMedicationComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleMedicationComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSimpleMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSimpleMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleMedicationComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleMedicationComponentContext simpleMedicationComponent() {
		SimpleMedicationComponentContext _localctx = new SimpleMedicationComponentContext(Context, State);
		EnterRule(_localctx, 120, RULE_simpleMedicationComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NUMBER || _la==HOUR || _la==WORD) {
					{
					{
					State = 618;
					description();
					}
					}
					State = 623;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 624;
				opioid();
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (SULFATE - 232)) | (1L << (HCL - 232)) | (1L << (HYDROCHLORIDE - 232)) | (1L << (BITARTRATE - 232)) | (1L << (TARTRATE - 232)) | (1L << (PHOSPHATE - 232)) | (1L << (POLISTIREX - 232)))) != 0)) {
					{
					State = 625;
					drugSuffix();
					}
				}

				}
				break;
			case 2:
				{
				State = 628;
				nonOpioid();
				}
				break;
			}
			State = 631;
			strength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexMedicationComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrengthContext[] strength() {
			return GetRuleContexts<StrengthContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrengthContext strength(int i) {
			return GetRuleContext<StrengthContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpioidContext opioid() {
			return GetRuleContext<OpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugSuffixContext drugSuffix() {
			return GetRuleContext<DrugSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonOpioidContext nonOpioid() {
			return GetRuleContext<NonOpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route() {
			return GetRuleContext<RouteContext>(0);
		}
		public ComplexMedicationComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexMedicationComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterComplexMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitComplexMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexMedicationComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexMedicationComponentContext complexMedicationComponent() {
		ComplexMedicationComponentContext _localctx = new ComplexMedicationComponentContext(Context, State);
		EnterRule(_localctx, 122, RULE_complexMedicationComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			strength();
			State = 638;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUPRENORPHINE:
			case BUTORPHANOL:
			case CODEINE:
			case DIHYDROCODEINE:
			case FENTANYL:
			case HYDROCODONE:
			case HYDROMORPHONE:
			case LEVORPHANOL:
			case MEPERIDINE:
			case METHADONE:
			case MORPHINE:
			case OPIUM:
			case OXYCODONE:
			case OXYMORPHONE:
			case PENTAZOCINE:
			case TAPENTADOL:
			case TRAMADOL:
				{
				State = 634;
				opioid();
				State = 635;
				drugSuffix();
				}
				break;
			case NUMBER:
			case HOUR:
			case WORD:
				{
				State = 637;
				nonOpioid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (BY - 46)) | (1L << (EACH - 46)) | (1L << (PER - 46)) | (1L << (UNDER - 46)) | (1L << (VIA - 46)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (NASALLY - 155)) | (1L << (ORAL - 155)) | (1L << (ORALLY - 155)) | (1L << (PO - 155)) | (1L << (SL - 155)) | (1L << (SUBLINGUAL - 155)) | (1L << (SUBLINGUALLY - 155)) | (1L << (TRANSDERMAL - 155)) | (1L << (TRANSDERMALLY - 155)) | (1L << (MOUTH - 155)) | (1L << (FEEDING - 155)) | (1L << (GASTROSTOMY - 155)) | (1L << (RECTAL - 155)) | (1L << (RECTALLY - 155)) | (1L << (INHALED - 155)) | (1L << (TOPICAL - 155)) | (1L << (TOPICALLY - 155)) | (1L << (INTRANASALLY - 155)) | (1L << (TOSKIN - 155)) | (1L << (ONSKIN - 155)) | (1L << (TOUPPERTORSO - 155)))) != 0)) {
				{
				State = 640;
				route();
				}
			}

			State = 643;
			strength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonOpioidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugSuffixContext drugSuffix() {
			return GetRuleContext<DrugSuffixContext>(0);
		}
		public NonOpioidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonOpioid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterNonOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitNonOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonOpioid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonOpioidContext nonOpioid() {
		NonOpioidContext _localctx = new NonOpioidContext(Context, State);
		EnterRule(_localctx, 124, RULE_nonOpioid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			description();
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (SULFATE - 232)) | (1L << (HCL - 232)) | (1L << (HYDROCHLORIDE - 232)) | (1L << (BITARTRATE - 232)) | (1L << (TARTRATE - 232)) | (1L << (PHOSPHATE - 232)) | (1L << (POLISTIREX - 232)))) != 0)) {
				{
				State = 646;
				drugSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(DefaultParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(DefaultParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(DefaultParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(DefaultParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HOUR() { return GetTokens(DefaultParser.HOUR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR(int i) {
			return GetToken(DefaultParser.HOUR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DASH() { return GetTokens(DefaultParser.DASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH(int i) {
			return GetToken(DefaultParser.DASH, i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 126, RULE_description);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==HOUR || _la==WORD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 656;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 651;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DASH) {
						{
						State = 650;
						Match(DASH);
						}
					}

					State = 653;
					_la = TokenStream.LA(1);
					if ( !(_la==NUMBER || _la==HOUR || _la==WORD) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 658;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrugFormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext[] formExpression() {
			return GetRuleContexts<FormExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext formExpression(int i) {
			return GetRuleContext<FormExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(DefaultParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(DefaultParser.WORD, i);
		}
		public DrugFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drugForm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDrugForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDrugForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrugForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrugFormContext drugForm() {
		DrugFormContext _localctx = new DrugFormContext(Context, State);
		EnterRule(_localctx, 128, RULE_drugForm);
		int _la;
		try {
			State = 684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 659;
					formExpression();
					}
					}
					State = 662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EACH || _la==LIQUID || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (APPLICATION - 129)) | (1L << (CAPSULE - 129)) | (1L << (CARTRIDGE - 129)) | (1L << (DOSE - 129)) | (1L << (DROP - 129)) | (1L << (ELIXIR - 129)) | (1L << (FILM - 129)) | (1L << (INJECTION - 129)) | (1L << (LOLLIPOP - 129)) | (1L << (LOZENGE - 129)) | (1L << (PATCH - 129)) | (1L << (PILL - 129)) | (1L << (PUFF - 129)) | (1L << (SOLUTION - 129)) | (1L << (SPRAY - 129)) | (1L << (SUPPOSITORY - 129)) | (1L << (SUSPENSION - 129)) | (1L << (SYRINGE - 129)) | (1L << (SYRUP - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLET - 129)) | (1L << (TROCHE - 129)) | (1L << (TDP - 129)) | (1L << (BUCCAL - 129)) | (1L << (INJECTABLE - 129)) | (1L << (NASAL - 129)) | (1L << (ORAL - 129)) | (1L << (SUBLINGUAL - 129)) | (1L << (TRANSDERMAL - 129)) | (1L << (RECTAL - 129)))) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 664;
					Match(WORD);
					}
					}
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WORD );
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 669;
					formExpression();
					}
					}
					State = 672;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EACH || _la==LIQUID || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (APPLICATION - 129)) | (1L << (CAPSULE - 129)) | (1L << (CARTRIDGE - 129)) | (1L << (DOSE - 129)) | (1L << (DROP - 129)) | (1L << (ELIXIR - 129)) | (1L << (FILM - 129)) | (1L << (INJECTION - 129)) | (1L << (LOLLIPOP - 129)) | (1L << (LOZENGE - 129)) | (1L << (PATCH - 129)) | (1L << (PILL - 129)) | (1L << (PUFF - 129)) | (1L << (SOLUTION - 129)) | (1L << (SPRAY - 129)) | (1L << (SUPPOSITORY - 129)) | (1L << (SUSPENSION - 129)) | (1L << (SYRINGE - 129)) | (1L << (SYRUP - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLET - 129)) | (1L << (TROCHE - 129)) | (1L << (TDP - 129)) | (1L << (BUCCAL - 129)) | (1L << (INJECTABLE - 129)) | (1L << (NASAL - 129)) | (1L << (ORAL - 129)) | (1L << (SUBLINGUAL - 129)) | (1L << (TRANSDERMAL - 129)) | (1L << (RECTAL - 129)))) != 0) );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 674;
					formExpression();
					}
					}
					State = 677;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EACH || _la==LIQUID || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (APPLICATION - 129)) | (1L << (CAPSULE - 129)) | (1L << (CARTRIDGE - 129)) | (1L << (DOSE - 129)) | (1L << (DROP - 129)) | (1L << (ELIXIR - 129)) | (1L << (FILM - 129)) | (1L << (INJECTION - 129)) | (1L << (LOLLIPOP - 129)) | (1L << (LOZENGE - 129)) | (1L << (PATCH - 129)) | (1L << (PILL - 129)) | (1L << (PUFF - 129)) | (1L << (SOLUTION - 129)) | (1L << (SPRAY - 129)) | (1L << (SUPPOSITORY - 129)) | (1L << (SUSPENSION - 129)) | (1L << (SYRINGE - 129)) | (1L << (SYRUP - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLET - 129)) | (1L << (TROCHE - 129)) | (1L << (TDP - 129)) | (1L << (BUCCAL - 129)) | (1L << (INJECTABLE - 129)) | (1L << (NASAL - 129)) | (1L << (ORAL - 129)) | (1L << (SUBLINGUAL - 129)) | (1L << (TRANSDERMAL - 129)) | (1L << (RECTAL - 129)))) != 0) );
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 679;
					Match(WORD);
					}
					}
					State = 682;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WORD );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpioidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUPRENORPHINE() { return GetToken(DefaultParser.BUPRENORPHINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUTORPHANOL() { return GetToken(DefaultParser.BUTORPHANOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEINE() { return GetToken(DefaultParser.CODEINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIHYDROCODEINE() { return GetToken(DefaultParser.DIHYDROCODEINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FENTANYL() { return GetToken(DefaultParser.FENTANYL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYDROCODONE() { return GetToken(DefaultParser.HYDROCODONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYDROMORPHONE() { return GetToken(DefaultParser.HYDROMORPHONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVORPHANOL() { return GetToken(DefaultParser.LEVORPHANOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEPERIDINE() { return GetToken(DefaultParser.MEPERIDINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHADONE() { return GetToken(DefaultParser.METHADONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORPHINE() { return GetToken(DefaultParser.MORPHINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPIUM() { return GetToken(DefaultParser.OPIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OXYCODONE() { return GetToken(DefaultParser.OXYCODONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OXYMORPHONE() { return GetToken(DefaultParser.OXYMORPHONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PENTAZOCINE() { return GetToken(DefaultParser.PENTAZOCINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAPENTADOL() { return GetToken(DefaultParser.TAPENTADOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAMADOL() { return GetToken(DefaultParser.TRAMADOL, 0); }
		public OpioidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opioid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpioid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpioidContext opioid() {
		OpioidContext _localctx = new OpioidContext(Context, State);
		EnterRule(_localctx, 130, RULE_opioid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (BUPRENORPHINE - 215)) | (1L << (BUTORPHANOL - 215)) | (1L << (CODEINE - 215)) | (1L << (DIHYDROCODEINE - 215)) | (1L << (FENTANYL - 215)) | (1L << (HYDROCODONE - 215)) | (1L << (HYDROMORPHONE - 215)) | (1L << (LEVORPHANOL - 215)) | (1L << (MEPERIDINE - 215)) | (1L << (METHADONE - 215)) | (1L << (MORPHINE - 215)) | (1L << (OPIUM - 215)) | (1L << (OXYCODONE - 215)) | (1L << (OXYMORPHONE - 215)) | (1L << (PENTAZOCINE - 215)) | (1L << (TAPENTADOL - 215)) | (1L << (TRAMADOL - 215)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrugSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SULFATE() { return GetToken(DefaultParser.SULFATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HCL() { return GetToken(DefaultParser.HCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYDROCHLORIDE() { return GetToken(DefaultParser.HYDROCHLORIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITARTRATE() { return GetToken(DefaultParser.BITARTRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARTRATE() { return GetToken(DefaultParser.TARTRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHOSPHATE() { return GetToken(DefaultParser.PHOSPHATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLISTIREX() { return GetToken(DefaultParser.POLISTIREX, 0); }
		public DrugSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drugSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDrugSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDrugSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrugSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrugSuffixContext drugSuffix() {
		DrugSuffixContext _localctx = new DrugSuffixContext(Context, State);
		EnterRule(_localctx, 132, RULE_drugSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (SULFATE - 232)) | (1L << (HCL - 232)) | (1L << (HYDROCHLORIDE - 232)) | (1L << (BITARTRATE - 232)) | (1L << (TARTRATE - 232)) | (1L << (PHOSPHATE - 232)) | (1L << (POLISTIREX - 232)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext doseUnitOfMeasure() {
			return GetRuleContext<DoseUnitOfMeasureContext>(0);
		}
		public StrengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterStrength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitStrength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrengthContext strength() {
		StrengthContext _localctx = new StrengthContext(Context, State);
		EnterRule(_localctx, 134, RULE_strength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			numericValue();
			State = 691;
			doseUnitOfMeasure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRANDNAME() { return GetToken(DefaultParser.BRANDNAME, 0); }
		public BrandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterBrandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitBrandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrandNameContext brandName() {
		BrandNameContext _localctx = new BrandNameContext(Context, State);
		EnterRule(_localctx, 136, RULE_brandName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			Match(BRANDNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(DefaultParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(DefaultParser.WORD, i);
		}
		public FreeTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFreeText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFreeText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeTextContext freeText() {
		FreeTextContext _localctx = new FreeTextContext(Context, State);
		EnterRule(_localctx, 138, RULE_freeText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 695;
					Match(WORD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestDoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext[] dose() {
			return GetRuleContexts<DoseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose(int i) {
			return GetRuleContext<DoseContext>(i);
		}
		public TestDoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testDose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestDoseContext testDose() {
		TestDoseContext _localctx = new TestDoseContext(Context, State);
		EnterRule(_localctx, 140, RULE_testDose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 700;
				dose();
				}
				}
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HALF) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << TEN) | (1L << TWELVE) | (1L << TWENTY) | (1L << THIRTY) | (1L << FORTY) | (1L << SEVENTY) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestAmbiguousDoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousDoseContext[] ambiguousDose() {
			return GetRuleContexts<AmbiguousDoseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousDoseContext ambiguousDose(int i) {
			return GetRuleContext<AmbiguousDoseContext>(i);
		}
		public TestAmbiguousDoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testAmbiguousDose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestAmbiguousDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestAmbiguousDoseContext testAmbiguousDose() {
		TestAmbiguousDoseContext _localctx = new TestAmbiguousDoseContext(Context, State);
		EnterRule(_localctx, 142, RULE_testAmbiguousDose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 705;
				ambiguousDose();
				}
				}
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HALF) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << TEN) | (1L << TWELVE) | (1L << TWENTY) | (1L << THIRTY) | (1L << FORTY) | (1L << SEVENTY) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestFormExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext[] formExpression() {
			return GetRuleContexts<FormExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext formExpression(int i) {
			return GetRuleContext<FormExpressionContext>(i);
		}
		public TestFormExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testFormExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestFormExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestFormExpressionContext testFormExpression() {
		TestFormExpressionContext _localctx = new TestFormExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_testFormExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 710;
				formExpression();
				}
				}
				State = 713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EACH || _la==LIQUID || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (APPLICATION - 129)) | (1L << (CAPSULE - 129)) | (1L << (CARTRIDGE - 129)) | (1L << (DOSE - 129)) | (1L << (DROP - 129)) | (1L << (ELIXIR - 129)) | (1L << (FILM - 129)) | (1L << (INJECTION - 129)) | (1L << (LOLLIPOP - 129)) | (1L << (LOZENGE - 129)) | (1L << (PATCH - 129)) | (1L << (PILL - 129)) | (1L << (PUFF - 129)) | (1L << (SOLUTION - 129)) | (1L << (SPRAY - 129)) | (1L << (SUPPOSITORY - 129)) | (1L << (SUSPENSION - 129)) | (1L << (SYRINGE - 129)) | (1L << (SYRUP - 129)) | (1L << (SYSTEM - 129)) | (1L << (TABLET - 129)) | (1L << (TROCHE - 129)) | (1L << (TDP - 129)) | (1L << (BUCCAL - 129)) | (1L << (INJECTABLE - 129)) | (1L << (NASAL - 129)) | (1L << (ORAL - 129)) | (1L << (SUBLINGUAL - 129)) | (1L << (TRANSDERMAL - 129)) | (1L << (RECTAL - 129)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestRouteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext[] route() {
			return GetRuleContexts<RouteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route(int i) {
			return GetRuleContext<RouteContext>(i);
		}
		public TestRouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testRoute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestRoute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestRouteContext testRoute() {
		TestRouteContext _localctx = new TestRouteContext(Context, State);
		EnterRule(_localctx, 146, RULE_testRoute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 715;
				route();
				}
				}
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (BY - 46)) | (1L << (EACH - 46)) | (1L << (PER - 46)) | (1L << (UNDER - 46)) | (1L << (VIA - 46)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (NASALLY - 155)) | (1L << (ORAL - 155)) | (1L << (ORALLY - 155)) | (1L << (PO - 155)) | (1L << (SL - 155)) | (1L << (SUBLINGUAL - 155)) | (1L << (SUBLINGUALLY - 155)) | (1L << (TRANSDERMAL - 155)) | (1L << (TRANSDERMALLY - 155)) | (1L << (MOUTH - 155)) | (1L << (FEEDING - 155)) | (1L << (GASTROSTOMY - 155)) | (1L << (RECTAL - 155)) | (1L << (RECTALLY - 155)) | (1L << (INHALED - 155)) | (1L << (TOPICAL - 155)) | (1L << (TOPICALLY - 155)) | (1L << (INTRANASALLY - 155)) | (1L << (TOSKIN - 155)) | (1L << (ONSKIN - 155)) | (1L << (TOUPPERTORSO - 155)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestFrequenciesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext frequencies() {
			return GetRuleContext<FrequenciesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route() {
			return GetRuleContext<RouteContext>(0);
		}
		public TestFrequenciesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testFrequencies; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestFrequencies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestFrequenciesContext testFrequencies() {
		TestFrequenciesContext _localctx = new TestFrequenciesContext(Context, State);
		EnterRule(_localctx, 148, RULE_testFrequencies);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 720;
				dose();
				}
				break;
			}
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 723;
				route();
				}
				break;
			}
			State = 726;
			frequencies();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestDurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext[] duration() {
			return GetRuleContexts<DurationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration(int i) {
			return GetRuleContext<DurationContext>(i);
		}
		public TestDurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testDuration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestDurationContext testDuration() {
		TestDurationContext _localctx = new TestDurationContext(Context, State);
		EnterRule(_localctx, 150, RULE_testDuration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 728;
				duration();
				}
				}
				State = 731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (FOR - 63)) | (1L << (MUST - 63)) | (1L << (ON - 63)) | (1L << (THIS - 63)) | (1L << (THEREAFTER - 63)) | (1L << (X_X - 63)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestAdditionalInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext[] additionalInstruction() {
			return GetRuleContexts<AdditionalInstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext additionalInstruction(int i) {
			return GetRuleContext<AdditionalInstructionContext>(i);
		}
		public TestAdditionalInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testAdditionalInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestAdditionalInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestAdditionalInstructionContext testAdditionalInstruction() {
		TestAdditionalInstructionContext _localctx = new TestAdditionalInstructionContext(Context, State);
		EnterRule(_localctx, 152, RULE_testAdditionalInstruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 733;
				additionalInstruction();
				}
				}
				State = 736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AFTER) | (1L << AS) | (1L << BEFORE))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (ON - 82)) | (1L << (WITH - 82)) | (1L << (AC - 82)) | (1L << (PC - 82)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestIndicationForUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext[] indicationForUse() {
			return GetRuleContexts<IndicationForUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext indicationForUse(int i) {
			return GetRuleContext<IndicationForUseContext>(i);
		}
		public TestIndicationForUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testIndicationForUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestIndicationForUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestIndicationForUseContext testIndicationForUse() {
		TestIndicationForUseContext _localctx = new TestIndicationForUseContext(Context, State);
		EnterRule(_localctx, 154, RULE_testIndicationForUse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 738;
				indicationForUse();
				}
				}
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AS || _la==FOR || _la==PRN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF4', '\x2EA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xA1', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xA4', '\v', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\xA7', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\xAA', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x5', '\x3', '\xAF', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\xB2', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\xB6', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\xBD', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xC0', '\v', '\x3', '\x3', '\x4', 
		'\x5', '\x4', '\xC3', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\xC7', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xCF', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xD5', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\xDB', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xDF', 
		'\n', '\t', '\x3', '\n', '\x5', '\n', '\xE2', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x5', '\xE', '\xED', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xF2', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\xF5', '\v', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xF8', '\n', '\xE', '\x3', '\xE', '\a', '\xE', '\xFB', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\xFE', '\v', '\xE', '\x3', '\xF', '\x5', '\xF', 
		'\x101', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x11E', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x122', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x125', '\v', '\x11', '\x3', '\x12', 
		'\x5', '\x12', '\x128', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\x12B', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x132', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x141', '\n', '\x13', '\x3', '\x14', 
		'\x5', '\x14', '\x144', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x147', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x14B', '\n', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x150', 
		'\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x153', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x157', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x15C', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x160', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x167', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x16C', '\n', '\x18', '\x3', '\x18', '\a', '\x18', '\x16F', '\n', 
		'\x18', '\f', '\x18', '\xE', '\x18', '\x172', '\v', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x5', '\x1A', '\x177', '\n', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x17A', '\n', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x17D', '\n', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x180', '\n', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x183', '\n', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x189', '\n', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x18D', '\n', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x190', '\n', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x193', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x196', '\v', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x19A', '\n', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x19D', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x5', '\x1F', '\x1A4', '\n', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1A8', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x1AF', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1B2', 
		'\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1B5', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1BB', '\n', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x5', '!', '\x1C1', '\n', 
		'!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', 
		'$', '\x1CE', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1D7', '\n', '%', '\x3', 
		'%', '\x5', '%', '\x1DA', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x1DF', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x5', '(', '\x1EC', '\n', '(', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x1F0', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x5', '+', '\x1FC', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x5', ',', '\x201', '\n', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', 
		'-', '\x5', '-', '\x207', '\n', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x20B', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x210', 
		'\n', '.', '\x3', '.', '\x5', '.', '\x213', '\n', '.', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x6', '/', '\x21D', '\n', '/', '\r', '/', '\xE', '/', '\x21E', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x22A', 
		'\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x230', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x5', '\x36', '\x240', '\n', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', 
		':', '\x24D', '\n', ':', '\x5', ':', '\x24F', '\n', ':', '\x3', ':', '\a', 
		':', '\x252', '\n', ':', '\f', ':', '\xE', ':', '\x255', '\v', ':', '\x3', 
		';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\a', '<', '\x25C', 
		'\n', '<', '\f', '<', '\xE', '<', '\x25F', '\v', '<', '\x3', '<', '\x5', 
		'<', '\x262', '\n', '<', '\x3', '<', '\x5', '<', '\x265', '\n', '<', '\x3', 
		'<', '\x3', '<', '\x3', '=', '\x3', '=', '\x5', '=', '\x26B', '\n', '=', 
		'\x3', '>', '\a', '>', '\x26E', '\n', '>', '\f', '>', '\xE', '>', '\x271', 
		'\v', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x275', '\n', '>', '\x3', 
		'>', '\x5', '>', '\x278', '\n', '>', '\x3', '>', '\x3', '>', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x281', '\n', 
		'?', '\x3', '?', '\x5', '?', '\x284', '\n', '?', '\x3', '?', '\x3', '?', 
		'\x3', '@', '\x3', '@', '\x5', '@', '\x28A', '\n', '@', '\x3', '\x41', 
		'\x3', '\x41', '\x5', '\x41', '\x28E', '\n', '\x41', '\x3', '\x41', '\a', 
		'\x41', '\x291', '\n', '\x41', '\f', '\x41', '\xE', '\x41', '\x294', '\v', 
		'\x41', '\x3', '\x42', '\x6', '\x42', '\x297', '\n', '\x42', '\r', '\x42', 
		'\xE', '\x42', '\x298', '\x3', '\x42', '\x6', '\x42', '\x29C', '\n', '\x42', 
		'\r', '\x42', '\xE', '\x42', '\x29D', '\x3', '\x42', '\x6', '\x42', '\x2A1', 
		'\n', '\x42', '\r', '\x42', '\xE', '\x42', '\x2A2', '\x3', '\x42', '\x6', 
		'\x42', '\x2A6', '\n', '\x42', '\r', '\x42', '\xE', '\x42', '\x2A7', '\x3', 
		'\x42', '\x6', '\x42', '\x2AB', '\n', '\x42', '\r', '\x42', '\xE', '\x42', 
		'\x2AC', '\x5', '\x42', '\x2AF', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x6', 'G', '\x2BB', '\n', 'G', 
		'\r', 'G', '\xE', 'G', '\x2BC', '\x3', 'H', '\x6', 'H', '\x2C0', '\n', 
		'H', '\r', 'H', '\xE', 'H', '\x2C1', '\x3', 'I', '\x6', 'I', '\x2C5', 
		'\n', 'I', '\r', 'I', '\xE', 'I', '\x2C6', '\x3', 'J', '\x6', 'J', '\x2CA', 
		'\n', 'J', '\r', 'J', '\xE', 'J', '\x2CB', '\x3', 'K', '\x6', 'K', '\x2CF', 
		'\n', 'K', '\r', 'K', '\xE', 'K', '\x2D0', '\x3', 'L', '\x5', 'L', '\x2D4', 
		'\n', 'L', '\x3', 'L', '\x5', 'L', '\x2D7', '\n', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'M', '\x6', 'M', '\x2DC', '\n', 'M', '\r', 'M', '\xE', 'M', 
		'\x2DD', '\x3', 'N', '\x6', 'N', '\x2E1', '\n', 'N', '\r', 'N', '\xE', 
		'N', '\x2E2', '\x3', 'O', '\x6', 'O', '\x2E6', '\n', 'O', '\r', 'O', '\xE', 
		'O', '\x2E7', '\x3', 'O', '\x2', '\x2', 'P', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x2', '%', '\x4', '\x2', '\x5', 
		'\x5', '\b', '\b', '\v', '\x2', '%', '%', ')', ')', '\x35', '\x35', '\x37', 
		':', '\x42', '\x42', 'X', 'X', '`', '`', '\x62', '\x62', 'l', 'l', '\a', 
		'\x2', '\x9B', '\x9C', '\x9E', '\x9E', '\xA2', '\xA2', '\xA4', '\xA4', 
		'\xAB', '\xAB', '\x5', '\x2', '<', '<', '\x46', '\x46', '\x83', '\x9A', 
		'\x3', '\x2', '\xC8', '\xD8', '\x5', '\x2', '\x30', '\x30', 'Z', 'Z', 
		'm', 'm', '\x4', '\x2', '\xA7', '\xA7', '\xAA', '\xAA', '\x4', '\x2', 
		'<', '<', 'Z', 'Z', '\x4', '\x2', '\n', '\n', '\"', '\"', '\a', '\x2', 
		'$', '$', '<', '<', '?', '?', 'Z', 'Z', 'v', 'v', '\x4', '\x2', 'g', 'h', 
		'p', 'p', '\x4', '\x2', '?', '?', 'T', 'T', '\x6', '\x2', 'r', 'r', 'y', 
		'z', '|', '\x7F', '\x81', '\x82', '\x4', '\x2', '\b', '\b', '(', '(', 
		'\x4', '\x2', '\'', '\'', '[', '[', '\x4', '\x2', '<', '<', '?', '?', 
		'\x5', '\x2', '&', '&', '+', '+', '/', '/', '\x4', '\x2', 'J', 'J', 'Q', 
		'Q', '\x5', '\x2', 's', 's', 'w', 'w', '\x80', '\x80', '\x3', '\x2', '\xB6', 
		'\xB7', '\x4', '\x2', '&', '&', '/', '/', '\x6', '\x2', '-', '-', '\x33', 
		'\x33', 'G', 'G', 'I', 'I', '\x4', '\x2', '\x41', '\x41', 'T', 'T', '\x5', 
		'\x2', '&', '&', '/', '/', 'o', 'o', '\x5', '\x2', '\x36', '\x36', '@', 
		'@', 'I', 'I', '\x5', '\x2', '\x46', '\x46', 'K', 'K', 'n', 'n', '\x4', 
		'\x2', '\x1C', '!', '\xB5', '\xB5', '\x4', '\x2', '\x6', '\x6', 'i', 'i', 
		'\x3', '\x2', '\xB4', '\xBB', '\x3', '\x2', '\xC1', '\xC7', '\x3', '\x2', 
		'\xBC', '\xC0', '\x6', '\x2', '\t', '\n', '\f', '\f', '\xE', '\xE', '\x10', 
		'\x1B', '\x5', '\x2', '\"', '\"', '\xB7', '\xB7', '\xF2', '\xF2', '\x3', 
		'\x2', '\xD9', '\xE9', '\x3', '\x2', '\xEA', '\xF0', '\x2', '\x338', '\x2', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x4', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\xC6', '\x3', '\x2', '\x2', '\x2', '\b', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\xCA', '\x3', '\x2', '\x2', '\x2', '\f', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x12', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x16', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x100', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x11D', '\x3', '\x2', '\x2', '\x2', ' ', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x140', '\x3', '\x2', '\x2', '\x2', '&', '\x143', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x156', '\x3', '\x2', '\x2', '\x2', '*', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x168', '\x3', '\x2', '\x2', '\x2', '\x30', '\x173', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x176', '\x3', '\x2', '\x2', '\x2', '\x34', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x19E', '\x3', '\x2', '\x2', '\x2', ':', '\x1A0', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1A3', '\x3', '\x2', '\x2', '\x2', '>', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1C8', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1CD', '\x3', '\x2', '\x2', '\x2', 'H', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1E5', '\x3', '\x2', '\x2', '\x2', 'N', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1ED', '\x3', '\x2', '\x2', '\x2', 'R', '\x1F4', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x1FD', '\x3', '\x2', '\x2', '\x2', 'X', '\x20A', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x20F', '\x3', '\x2', '\x2', '\x2', '\\', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x62', '\x22F', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x231', '\x3', '\x2', '\x2', '\x2', '\x66', '\x235', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x23B', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x23F', '\x3', '\x2', '\x2', '\x2', 'l', '\x243', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x245', '\x3', '\x2', '\x2', '\x2', 'p', '\x247', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x249', '\x3', '\x2', '\x2', '\x2', 
		't', '\x256', '\x3', '\x2', '\x2', '\x2', 'v', '\x258', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x26A', '\x3', '\x2', '\x2', '\x2', 'z', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x27B', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x287', '\x3', '\x2', '\x2', '\x2', '\x80', '\x28B', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x84', '\x2B0', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x2B2', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x2B7', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x2BF', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x2C4', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x94', '\x2CE', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x98', '\x2DB', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x2E0', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA2', '\x5', '\x4', 
		'\x3', '\x2', '\x9F', '\xA1', '\x5', '\x4', '\x3', '\x2', '\xA0', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA7', '\t', '\x2', '\x2', '\x2', 
		'\xA6', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAA', 
		'\x5', '\x8C', 'G', '\x2', '\xA9', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAC', '\a', '\x2', '\x2', '\x3', '\xAC', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAF', '\x5', '\x6', '\x4', '\x2', 
		'\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', 
		'\x5', '\b', '\x5', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB6', '\x5', '\xE', '\b', '\x2', '\xB4', '\xB6', 
		'\x5', '\n', '\x6', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xBD', '\x5', '\x1A', '\xE', '\x2', '\xB8', '\xBD', 
		'\x5', ' ', '\x11', '\x2', '\xB9', '\xBD', '\x5', '\x46', '$', '\x2', 
		'\xBA', '\xBD', '\x5', 'N', '(', '\x2', '\xBB', '\xBD', '\x5', 'X', '-', 
		'\x2', '\xBC', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC3', '\a', '(', '\x2', '\x2', '\xC2', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', '\a', '\x64', '\x2', 
		'\x2', '\xC5', '\xC7', '\a', 'U', '\x2', '\x2', '\xC6', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\t', '\x3', '\x2', 
		'\x2', '\xC9', '\t', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', 
		'\f', '\a', '\x2', '\xCB', '\v', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', 
		'\x5', '\x62', '\x32', '\x2', '\xCD', '\xCF', '\x5', '\x64', '\x33', '\x2', 
		'\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\r', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\x5', '\f', '\a', '\x2', '\xD1', '\xD2', '\x5', '\x10', '\t', '\x2', 
		'\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD5', '\x5', '\x66', 
		'\x34', '\x2', '\xD4', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD7', '\a', '\x3', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\xE', 
		'\b', '\x2', '\xD8', '\xD9', '\a', '\x4', '\x2', '\x2', '\xD9', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xDF', '\x5', '\x12', '\n', '\x2', '\xDD', '\xDF', 
		'\x5', '\x18', '\r', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE2', '\x5', '\x14', '\v', '\x2', '\xE1', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x5', '\x16', 
		'\f', '\x2', '\xE4', '\x13', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', 
		'\t', '\x4', '\x2', '\x2', '\xE6', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\t', '\x5', '\x2', '\x2', '\xE8', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\t', '\x6', '\x2', '\x2', '\xEA', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xED', '\x5', '\x1C', '\xF', '\x2', 
		'\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF3', 
		'\x5', '\x1E', '\x10', '\x2', '\xEF', '\xF0', '\a', '\a', '\x2', '\x2', 
		'\xF0', '\xF2', '\x5', '\x1E', '\x10', '\x2', '\xF1', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF8', '\a', 'U', '\x2', '\x2', '\xF7', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFB', '\x5', '\x1A', 
		'\xE', '\x2', '\xFA', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x101', 
		'\a', '\xAD', '\x2', '\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x103', '\t', '\a', '\x2', '\x2', '\x103', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x104', '\x11E', '\a', '\xA6', '\x2', 
		'\x2', '\x105', '\x11E', '\a', '\x9E', '\x2', '\x2', '\x106', '\x11E', 
		'\a', '\x9F', '\x2', '\x2', '\x107', '\x11E', '\a', '\xA0', '\x2', '\x2', 
		'\x108', '\x109', '\a', 'j', '\x2', '\x2', '\x109', '\x10A', '\a', '\x63', 
		'\x2', '\x2', '\x10A', '\x11E', '\a', '\xA9', '\x2', '\x2', '\x10B', '\x11E', 
		'\a', '\xA1', '\x2', '\x2', '\x10C', '\x11E', '\a', '\xA2', '\x2', '\x2', 
		'\x10D', '\x11E', '\a', '\xA3', '\x2', '\x2', '\x10E', '\x10F', '\t', 
		'\b', '\x2', '\x2', '\x10F', '\x11E', '\a', '\xA8', '\x2', '\x2', '\x110', 
		'\x11E', '\a', '\xB0', '\x2', '\x2', '\x111', '\x11E', '\a', '\x9D', '\x2', 
		'\x2', '\x112', '\x113', '\t', '\t', '\x2', '\x2', '\x113', '\x11E', '\a', 
		'R', '\x2', '\x2', '\x114', '\x11E', '\a', '\xAB', '\x2', '\x2', '\x115', 
		'\x11E', '\a', '\xAC', '\x2', '\x2', '\x116', '\x11E', '\a', '\xAE', '\x2', 
		'\x2', '\x117', '\x11E', '\a', '\xAF', '\x2', '\x2', '\x118', '\x11E', 
		'\a', '\xA4', '\x2', '\x2', '\x119', '\x11E', '\a', '\xA5', '\x2', '\x2', 
		'\x11A', '\x11E', '\a', '\xB1', '\x2', '\x2', '\x11B', '\x11E', '\a', 
		'\xB2', '\x2', '\x2', '\x11C', '\x11E', '\a', '\xB3', '\x2', '\x2', '\x11D', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x106', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x111', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x115', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x123', '\x5', 
		'\"', '\x12', '\x2', '\x120', '\x122', '\x5', '\"', '\x12', '\x2', '\x121', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x122', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x126', '\x128', '\a', 
		'(', '\x2', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x129', '\x12B', '\a', '\x31', '\x2', '\x2', '\x12A', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x131', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x132', '\x5', 
		'$', '\x13', '\x2', '\x12D', '\x132', '\x5', '&', '\x14', '\x2', '\x12E', 
		'\x132', '\x5', '.', '\x18', '\x2', '\x12F', '\x132', '\x5', '\x30', '\x19', 
		'\x2', '\x130', '\x132', '\x5', '\x32', '\x1A', '\x2', '\x131', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x130', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\a', '?', '\x2', '\x2', 
		'\x134', '\x135', '\x5', '\x62', '\x32', '\x2', '\x135', '\x136', '\a', 
		'\xB7', '\x2', '\x2', '\x136', '\x137', '\a', '\x3', '\x2', '\x2', '\x137', 
		'\x138', '\x5', '\x62', '\x32', '\x2', '\x138', '\x139', '\a', 'h', '\x2', 
		'\x2', '\x139', '\x13A', '\a', '\a', '\x2', '\x2', '\x13A', '\x13B', '\a', 
		'\xB8', '\x2', '\x2', '\x13B', '\x13C', '\a', '\x4', '\x2', '\x2', '\x13C', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\a', '*', '\x2', 
		'\x2', '\x13E', '\x13F', '\t', '\n', '\x2', '\x2', '\x13F', '\x141', '\a', 
		'\x86', '\x2', '\x2', '\x140', '\x133', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x141', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x144', '\x5', '*', '\x16', '\x2', '\x143', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x146', '\x3', '\x2', '\x2', '\x2', '\x145', '\x147', '\x5', 
		',', '\x17', '\x2', '\x146', '\x145', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\x14A', '\t', '\v', '\x2', '\x2', '\x149', '\x14B', '\x5', 
		'(', '\x15', '\x2', '\x14A', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x153', '\x5', 'j', '\x36', '\x2', '\x14D', '\x153', 
		'\x5', '\x30', '\x19', '\x2', '\x14E', '\x150', '\a', 'v', '\x2', '\x2', 
		'\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x153', '\x5', 'p', '\x39', '\x2', '\x152', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x152', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x157', '\x5', '\x62', '\x32', '\x2', '\x155', '\x157', '\x5', 
		'\x64', '\x33', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x155', '\x3', '\x2', '\x2', '\x2', '\x157', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x15C', '\a', 'H', '\x2', '\x2', '\x159', '\x15A', '\a', 
		'k', '\x2', '\x2', '\x15A', '\x15C', '\a', 'i', '\x2', '\x2', '\x15B', 
		'\x158', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '+', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x160', '\x5', 
		'\x62', '\x32', '\x2', '\x15E', '\x160', '\x5', '\x64', '\x33', '\x2', 
		'\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x162', '\t', '\f', '\x2', '\x2', '\x162', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x167', '\a', '\v', '\x2', '\x2', '\x164', '\x167', '\a', 
		'\r', '\x2', '\x2', '\x165', '\x167', '\a', '\xF', '\x2', '\x2', '\x166', 
		'\x15F', '\x3', '\x2', '\x2', '\x2', '\x166', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x164', '\x3', '\x2', '\x2', '\x2', '\x166', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x169', '\t', '\r', '\x2', '\x2', '\x169', '\x170', '\x5', 'n', 
		'\x38', '\x2', '\x16A', '\x16C', '\a', '(', '\x2', '\x2', '\x16B', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16F', '\x5', 
		'n', '\x38', '\x2', '\x16E', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x171', '\x3', '\x2', '\x2', '\x2', '\x171', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x170', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x174', '\t', '\xE', '\x2', '\x2', '\x174', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x175', '\x177', '\a', '(', '\x2', '\x2', '\x176', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x178', '\x17A', '\a', '\x64', '\x2', 
		'\x2', '\x179', '\x178', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17D', '\a', '+', '\x2', '\x2', '\x17C', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', '\x17C', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x180', '\a', '\x44', '\x2', '\x2', 
		'\x17F', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x182', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x183', '\a', '\x63', '\x2', '\x2', '\x182', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x182', '\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x189', '\x5', '\x34', '\x1B', '\x2', 
		'\x185', '\x189', '\x5', '<', '\x1F', '\x2', '\x186', '\x189', '\x5', 
		'>', ' ', '\x2', '\x187', '\x189', '\x5', '@', '!', '\x2', '\x188', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x188', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x186', '\x3', '\x2', '\x2', '\x2', '\x188', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x33', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x194', '\x5', '\x36', '\x1C', '\x2', '\x18B', '\x18D', '\t', '\xF', 
		'\x2', '\x2', '\x18C', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x18D', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x190', '\a', '+', '\x2', '\x2', '\x18F', '\x18E', '\x3', '\x2', 
		'\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x193', '\x5', '\x36', '\x1C', '\x2', 
		'\x192', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x193', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x195', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x194', '\x3', '\x2', '\x2', '\x2', '\x197', '\x19A', 
		'\x5', '\x38', '\x1D', '\x2', '\x198', '\x19A', '\x5', ':', '\x1E', '\x2', 
		'\x199', '\x197', '\x3', '\x2', '\x2', '\x2', '\x199', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x19D', '\t', '\x10', '\x2', '\x2', '\x19C', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', '\"', '\x2', '\x2', 
		'\x19F', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\a', '#', 
		'\x2', '\x2', '\x1A1', ';', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A4', 
		'\t', '\x11', '\x2', '\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1B4', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1B5', '\a', 'L', '\x2', '\x2', '\x1A6', 
		'\x1A8', '\a', '\xB8', '\x2', '\x2', '\x1A7', '\x1A6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\t', '\x12', '\x2', '\x2', 
		'\x1AA', '\x1B5', '\t', '\x13', '\x2', '\x2', '\x1AB', '\x1B5', '\a', 
		'>', '\x2', '\x2', '\x1AC', '\x1AE', '\a', 'P', '\x2', '\x2', '\x1AD', 
		'\x1AF', '\a', 'g', '\x2', '\x2', '\x1AE', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B2', '\x5', '\x42', '\"', '\x2', 
		'\x1B1', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\x3', 
		'\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B3', 
		'\x1B5', '\a', ',', '\x2', '\x2', '\x1B4', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1AC', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B5', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6', '\x1BB', '\a', '/', '\x2', '\x2', '\x1B7', '\x1BB', 
		'\a', '&', '\x2', '\x2', '\x1B8', '\x1BB', '\a', 'o', '\x2', '\x2', '\x1B9', 
		'\x1BB', '\x5', '\x42', '\"', '\x2', '\x1BA', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\t', 
		'\x11', '\x2', '\x2', '\x1BD', '\x1BE', '\x5', '\x44', '#', '\x2', '\x1BE', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C1', '\a', '?', '\x2', '\x2', 
		'\x1C0', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C3', '\t', '\x14', '\x2', '\x2', '\x1C3', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x1C4', '\x1C5', '\x5', '\x62', '\x32', '\x2', '\x1C5', '\x1C6', 
		'\t', '\x15', '\x2', '\x2', '\x1C6', '\x1C7', '\t', '\x16', '\x2', '\x2', 
		'\x1C7', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\t', '\x17', 
		'\x2', '\x2', '\x1C9', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CE', 
		'\x5', 'H', '%', '\x2', '\x1CB', '\x1CE', '\x5', 'J', '&', '\x2', '\x1CC', 
		'\x1CE', '\x5', 'L', '\'', '\x2', '\x1CD', '\x1CA', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1DA', '\a', '\x41', '\x2', '\x2', '\x1D0', '\x1D1', '\a', 
		'\x65', '\x2', '\x2', '\x1D1', '\x1D2', '\a', ';', '\x2', '\x2', '\x1D2', 
		'\x1DA', '\a', '$', '\x2', '\x2', '\x1D3', '\x1D4', '\a', 'M', '\x2', 
		'\x2', '\x1D4', '\x1D6', '\a', '\x45', '\x2', '\x2', '\x1D5', '\x1D7', 
		'\a', '\x41', '\x2', '\x2', '\x1D6', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1DA', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\x1DA', '\a', 'p', '\x2', '\x2', '\x1D9', 
		'\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D8', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\x5', '\x62', '\x32', '\x2', '\x1DC', '\x1DE', '\x5', 
		'j', '\x36', '\x2', '\x1DD', '\x1DF', '\a', '\x61', '\x2', '\x2', '\x1DE', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\x3', '\x2', '\x2', 
		'\x2', '\x1DF', 'I', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\t', 
		'\x18', '\x2', '\x2', '\x1E1', '\x1E2', '\a', '\x63', '\x2', '\x2', '\x1E2', 
		'\x1E3', '\x5', '`', '\x31', '\x2', '\x1E3', '\x1E4', '\x5', 'j', '\x36', 
		'\x2', '\x1E4', 'K', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E6', '\a', 
		'\x66', '\x2', '\x2', '\x1E6', 'M', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1EC', '\x5', 'T', '+', '\x2', '\x1E8', '\x1EC', '\x5', 'V', ',', '\x2', 
		'\x1E9', '\x1EC', '\x5', 'R', '*', '\x2', '\x1EA', '\x1EC', '\x5', 'P', 
		')', '\x2', '\x1EB', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EC', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1ED', '\x1EF', '\a', 'T', '\x2', '\x2', '\x1EE', '\x1F0', 
		'\a', '$', '\x2', '\x2', '\x1EF', '\x1EE', '\x3', '\x2', '\x2', '\x2', 
		'\x1EF', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x3', 
		'\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\a', '=', '\x2', '\x2', '\x1F2', 
		'\x1F3', '\a', '_', '\x2', '\x2', '\x1F3', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F5', '\a', '*', '\x2', '\x2', '\x1F5', '\x1F6', '\a', '\x34', 
		'\x2', '\x2', '\x1F6', 'S', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', 
		'\t', '\x19', '\x2', '\x2', '\x1F8', '\x1FC', '\t', '\x1A', '\x2', '\x2', 
		'\x1F9', '\x1FC', '\a', 'q', '\x2', '\x2', '\x1FA', '\x1FC', '\a', 't', 
		'\x2', '\x2', '\x1FB', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FA', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC', 'U', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x200', '\a', 'o', 
		'\x2', '\x2', '\x1FE', '\x1FF', '\a', 'Y', '\x2', '\x2', '\x1FF', '\x201', 
		'\a', 'S', '\x2', '\x2', '\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x201', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\x3', 
		'\x2', '\x2', '\x2', '\x202', '\x203', '\t', '\x1B', '\x2', '\x2', '\x203', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x204', '\x207', '\a', '\x41', '\x2', 
		'\x2', '\x205', '\x207', '\x5', 'Z', '.', '\x2', '\x206', '\x204', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x205', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x208', '\x20B', '\x5', '\\', '/', 
		'\x2', '\x209', '\x20B', '\x5', 'Z', '.', '\x2', '\x20A', '\x206', '\x3', 
		'\x2', '\x2', '\x2', '\x20A', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20B', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\a', '*', '\x2', '\x2', 
		'\x20D', '\x210', '\a', 'O', '\x2', '\x2', '\x20E', '\x210', '\a', 'u', 
		'\x2', '\x2', '\x20F', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x20E', 
		'\x3', '\x2', '\x2', '\x2', '\x210', '\x212', '\x3', '\x2', '\x2', '\x2', 
		'\x211', '\x213', '\a', '\x41', '\x2', '\x2', '\x212', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x214', '\x21D', '\x5', '\x8C', 'G', 
		'\x2', '\x215', '\x21D', '\x5', '^', '\x30', '\x2', '\x216', '\x21D', 
		'\a', 'U', '\x2', '\x2', '\x217', '\x21D', '\a', '(', '\x2', '\x2', '\x218', 
		'\x21D', '\a', 'i', '\x2', '\x2', '\x219', '\x21D', '\a', '\a', '\x2', 
		'\x2', '\x21A', '\x21D', '\a', '\x44', '\x2', '\x2', '\x21B', '\x21D', 
		'\a', '\x63', '\x2', '\x2', '\x21C', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x215', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x216', '\x3', 
		'\x2', '\x2', '\x2', '\x21C', '\x217', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x219', '\x3', '\x2', '\x2', 
		'\x2', '\x21C', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x21F', ']', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x22A', '\a', '\x32', '\x2', '\x2', '\x221', '\x22A', '\a', '\x43', '\x2', 
		'\x2', '\x222', '\x22A', '\a', 'N', '\x2', '\x2', '\x223', '\x22A', '\a', 
		'W', '\x2', '\x2', '\x224', '\x22A', '\a', ']', '\x2', '\x2', '\x225', 
		'\x226', '\a', '\\', '\x2', '\x2', '\x226', '\x227', '\a', 'S', '\x2', 
		'\x2', '\x227', '\x22A', '\a', '.', '\x2', '\x2', '\x228', '\x22A', '\a', 
		'^', '\x2', '\x2', '\x229', '\x220', '\x3', '\x2', '\x2', '\x2', '\x229', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x229', '\x222', '\x3', '\x2', '\x2', 
		'\x2', '\x229', '\x223', '\x3', '\x2', '\x2', '\x2', '\x229', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x229', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'\x229', '\x228', '\x3', '\x2', '\x2', '\x2', '\x22A', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x22B', '\x22C', '\t', '\x1C', '\x2', '\x2', '\x22C', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x22D', '\x230', '\a', '\"', '\x2', '\x2', 
		'\x22E', '\x230', '\x5', 'r', ':', '\x2', '\x22F', '\x22D', '\x3', '\x2', 
		'\x2', '\x2', '\x22F', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x230', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\x5', '\x62', '\x32', '\x2', 
		'\x232', '\x233', '\x5', 'h', '\x35', '\x2', '\x233', '\x234', '\x5', 
		'\x62', '\x32', '\x2', '\x234', '\x65', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x236', '\x5', '\x62', '\x32', '\x2', '\x236', '\x237', '\x5', '\x18', 
		'\r', '\x2', '\x237', '\x238', '\x5', 'h', '\x35', '\x2', '\x238', '\x239', 
		'\x5', '\x62', '\x32', '\x2', '\x239', '\x23A', '\x5', '\x18', '\r', '\x2', 
		'\x23A', 'g', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\t', '\x1D', 
		'\x2', '\x2', '\x23C', 'i', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x240', 
		'\x5', '`', '\x31', '\x2', '\x23E', '\x240', '\a', 'V', '\x2', '\x2', 
		'\x23F', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x241', '\x242', '\x5', 'l', '\x37', 
		'\x2', '\x242', 'k', '\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\t', 
		'\x1E', '\x2', '\x2', '\x244', 'm', '\x3', '\x2', '\x2', '\x2', '\x245', 
		'\x246', '\t', '\x1F', '\x2', '\x2', '\x246', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x248', '\t', ' ', '\x2', '\x2', '\x248', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x253', '\x5', 't', ';', '\x2', '\x24A', 
		'\x24C', '\a', '(', '\x2', '\x2', '\x24B', '\x24D', '\a', '$', '\x2', 
		'\x2', '\x24C', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'\x24E', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x24F', '\x250', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x252', '\x5', 't', ';', '\x2', '\x251', '\x24E', '\x3', '\x2', '\x2', 
		'\x2', '\x252', '\x255', '\x3', '\x2', '\x2', '\x2', '\x253', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x254', 's', '\x3', '\x2', '\x2', '\x2', '\x255', '\x253', '\x3', '\x2', 
		'\x2', '\x2', '\x256', '\x257', '\t', '!', '\x2', '\x2', '\x257', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\x258', '\x25D', '\x5', 'x', '=', '\x2', 
		'\x259', '\x25A', '\a', '\a', '\x2', '\x2', '\x25A', '\x25C', '\x5', 'x', 
		'=', '\x2', '\x25B', '\x259', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', '\x25D', '\x25B', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x261', '\x3', 
		'\x2', '\x2', '\x2', '\x25F', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x262', '\x5', '\x82', '\x42', '\x2', '\x261', '\x260', '\x3', '\x2', 
		'\x2', '\x2', '\x261', '\x262', '\x3', '\x2', '\x2', '\x2', '\x262', '\x264', 
		'\x3', '\x2', '\x2', '\x2', '\x263', '\x265', '\x5', '\x8A', '\x46', '\x2', 
		'\x264', '\x263', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x266', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x267', '\a', '\x2', '\x2', '\x3', '\x267', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x268', '\x26B', '\x5', 'z', '>', '\x2', '\x269', '\x26B', '\x5', 
		'|', '?', '\x2', '\x26A', '\x268', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x26B', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x26C', '\x26E', '\x5', '\x80', '\x41', '\x2', '\x26D', '\x26C', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x270', '\x3', 
		'\x2', '\x2', '\x2', '\x270', '\x272', '\x3', '\x2', '\x2', '\x2', '\x271', 
		'\x26F', '\x3', '\x2', '\x2', '\x2', '\x272', '\x274', '\x5', '\x84', 
		'\x43', '\x2', '\x273', '\x275', '\x5', '\x86', '\x44', '\x2', '\x274', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\x3', '\x2', '\x2', 
		'\x2', '\x275', '\x278', '\x3', '\x2', '\x2', '\x2', '\x276', '\x278', 
		'\x5', '~', '@', '\x2', '\x277', '\x26F', '\x3', '\x2', '\x2', '\x2', 
		'\x277', '\x276', '\x3', '\x2', '\x2', '\x2', '\x278', '\x279', '\x3', 
		'\x2', '\x2', '\x2', '\x279', '\x27A', '\x5', '\x88', '\x45', '\x2', '\x27A', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x280', '\x5', '\x88', '\x45', 
		'\x2', '\x27C', '\x27D', '\x5', '\x84', '\x43', '\x2', '\x27D', '\x27E', 
		'\x5', '\x86', '\x44', '\x2', '\x27E', '\x281', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x281', '\x5', '~', '@', '\x2', '\x280', '\x27C', '\x3', '\x2', 
		'\x2', '\x2', '\x280', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x281', '\x283', 
		'\x3', '\x2', '\x2', '\x2', '\x282', '\x284', '\x5', '\x1A', '\xE', '\x2', 
		'\x283', '\x282', '\x3', '\x2', '\x2', '\x2', '\x283', '\x284', '\x3', 
		'\x2', '\x2', '\x2', '\x284', '\x285', '\x3', '\x2', '\x2', '\x2', '\x285', 
		'\x286', '\x5', '\x88', '\x45', '\x2', '\x286', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x287', '\x289', '\x5', '\x80', '\x41', '\x2', '\x288', '\x28A', 
		'\x5', '\x86', '\x44', '\x2', '\x289', '\x288', '\x3', '\x2', '\x2', '\x2', 
		'\x289', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x28B', '\x292', '\t', '\"', '\x2', '\x2', '\x28C', 
		'\x28E', '\a', '\x6', '\x2', '\x2', '\x28D', '\x28C', '\x3', '\x2', '\x2', 
		'\x2', '\x28D', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', 
		'\x3', '\x2', '\x2', '\x2', '\x28F', '\x291', '\t', '\"', '\x2', '\x2', 
		'\x290', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x291', '\x294', '\x3', 
		'\x2', '\x2', '\x2', '\x292', '\x290', '\x3', '\x2', '\x2', '\x2', '\x292', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x293', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x294', '\x292', '\x3', '\x2', '\x2', '\x2', '\x295', '\x297', 
		'\x5', '\x12', '\n', '\x2', '\x296', '\x295', '\x3', '\x2', '\x2', '\x2', 
		'\x297', '\x298', '\x3', '\x2', '\x2', '\x2', '\x298', '\x296', '\x3', 
		'\x2', '\x2', '\x2', '\x298', '\x299', '\x3', '\x2', '\x2', '\x2', '\x299', 
		'\x2AF', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29C', '\a', '\xF2', '\x2', 
		'\x2', '\x29B', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29B', '\x3', '\x2', '\x2', '\x2', 
		'\x29D', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x2A0', '\x3', 
		'\x2', '\x2', '\x2', '\x29F', '\x2A1', '\x5', '\x12', '\n', '\x2', '\x2A0', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\x3', '\x2', '\x2', 
		'\x2', '\x2A2', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', 
		'\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'\x2A4', '\x2A6', '\x5', '\x12', '\n', '\x2', '\x2A5', '\x2A4', '\x3', 
		'\x2', '\x2', '\x2', '\x2A6', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A7', 
		'\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AB', 
		'\a', '\xF2', '\x2', '\x2', '\x2AA', '\x2A9', '\x3', '\x2', '\x2', '\x2', 
		'\x2AB', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AD', 
		'\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x296', '\x3', '\x2', '\x2', 
		'\x2', '\x2AE', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x2AF', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x2B0', '\x2B1', '\t', '#', '\x2', '\x2', '\x2B1', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x2B2', '\x2B3', '\t', '$', '\x2', '\x2', '\x2B3', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\x5', '\x62', '\x32', '\x2', 
		'\x2B5', '\x2B6', '\x5', '\x18', '\r', '\x2', '\x2B6', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x2B7', '\x2B8', '\a', '\xF3', '\x2', '\x2', '\x2B8', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BB', '\a', '\xF2', '\x2', 
		'\x2', '\x2BA', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2BC', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x2BE', '\x2C0', '\x5', '\xE', '\b', '\x2', '\x2BF', 
		'\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', 
		'\x2', '\x2C1', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C2', 
		'\x3', '\x2', '\x2', '\x2', '\x2C2', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x2C3', '\x2C5', '\x5', '\n', '\x6', '\x2', '\x2C4', '\x2C3', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C7', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x91', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2CA', 
		'\x5', '\x12', '\n', '\x2', '\x2C9', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x2CA', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2C9', '\x3', 
		'\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CC', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CF', '\x5', '\x1A', '\xE', 
		'\x2', '\x2CE', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D0', 
		'\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2CE', '\x3', '\x2', '\x2', '\x2', 
		'\x2D0', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x2D2', '\x2D4', '\x5', '\xE', '\b', '\x2', '\x2D3', 
		'\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\x3', '\x2', '\x2', 
		'\x2', '\x2D4', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D7', 
		'\x5', '\x1A', '\xE', '\x2', '\x2D6', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\x2D6', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D8', '\x3', 
		'\x2', '\x2', '\x2', '\x2D8', '\x2D9', '\x5', ' ', '\x11', '\x2', '\x2D9', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DC', '\x5', '\x46', '$', 
		'\x2', '\x2DB', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DD', 
		'\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DB', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x2DF', '\x2E1', '\x5', 'N', '(', '\x2', '\x2E0', 
		'\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', '\x3', '\x2', '\x2', 
		'\x2', '\x2E2', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E3', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x2E4', '\x2E6', '\x5', 'X', '-', '\x2', '\x2E5', '\x2E4', '\x3', '\x2', 
		'\x2', '\x2', '\x2E6', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E5', 
		'\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E8', '\x3', '\x2', '\x2', '\x2', 
		'\x2E8', '\x9D', '\x3', '\x2', '\x2', '\x2', 'i', '\xA2', '\xA6', '\xA9', 
		'\xAE', '\xB1', '\xB5', '\xBC', '\xBE', '\xC2', '\xC6', '\xCE', '\xD4', 
		'\xDA', '\xDE', '\xE1', '\xEC', '\xF3', '\xF7', '\xFC', '\x100', '\x11D', 
		'\x123', '\x127', '\x12A', '\x131', '\x140', '\x143', '\x146', '\x14A', 
		'\x14F', '\x152', '\x156', '\x15B', '\x15F', '\x166', '\x16B', '\x170', 
		'\x176', '\x179', '\x17C', '\x17F', '\x182', '\x188', '\x18C', '\x18F', 
		'\x194', '\x199', '\x19C', '\x1A3', '\x1A7', '\x1AE', '\x1B1', '\x1B4', 
		'\x1BA', '\x1C0', '\x1CD', '\x1D6', '\x1D9', '\x1DE', '\x1EB', '\x1EF', 
		'\x1FB', '\x200', '\x206', '\x20A', '\x20F', '\x212', '\x21C', '\x21E', 
		'\x229', '\x22F', '\x23F', '\x24C', '\x24E', '\x253', '\x25D', '\x261', 
		'\x264', '\x26A', '\x26F', '\x274', '\x277', '\x280', '\x283', '\x289', 
		'\x28D', '\x292', '\x298', '\x29D', '\x2A2', '\x2A7', '\x2AC', '\x2AE', 
		'\x2BC', '\x2C1', '\x2C6', '\x2CB', '\x2D0', '\x2D3', '\x2D6', '\x2DD', 
		'\x2E2', '\x2E7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace PracticeFusion.MmeCalculator.Core.Parsers.Generated
