//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/jmalek/src/mmecalculator/src/Grammar/DefaultParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PracticeFusion.MmeCalculator.Core.Parsers.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class DefaultParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_PAREN=1, CLOSE_PAREN=2, DOT=3, DASH=4, FORWARDSLASH=5, COMMA=6, HALF=7, 
		ONE=8, ONCE=9, TWO=10, TWICE=11, THREE=12, THRICE=13, FOUR=14, FIVE=15, 
		SIX=16, SEVEN=17, EIGHT=18, NINE=19, TEN=20, TWELVE=21, TWENTY=22, THIRTY=23, 
		FORTY=24, SEVENTY=25, FIRST=26, THIRD=27, FOURTH=28, FIFTH=29, SIXTH=30, 
		SEVENTH=31, NUMBER=32, CLOCKNUMBER=33, A_AN=34, ADMINISTER=35, AFTERNOON=36, 
		AFTER=37, AM=38, AND=39, APPLY=40, AS=41, AT=42, BEDTIME=43, BREAKFAST=44, 
		BREATH=45, BEFORE=46, BY=47, CHANGE=48, CHEW=49, COUGH=50, DINNER=51, 
		DIRECTED=52, DISSOLVE=53, EATING=54, INHALE=55, INFUSE=56, INJECT=57, 
		INSERT=58, IS=59, EACH=60, EMPTY_TOKEN=61, EVENING=62, EVERY=63, FOOD=64, 
		FOR=65, GIVE=66, HEADACHE=67, IN=68, LAST=69, LIQUID=70, LUNCH=71, MAXIMUM=72, 
		MEAL=73, MIDDAY=74, MILK=75, MORNING=76, MUST=77, NAUSEA=78, NEEDED=79, 
		NIGHT=80, NOON=81, NOSTRIL=82, OF=83, ON=84, OR=85, OTHER=86, PAIN=87, 
		PLACE=88, PLENTY=89, PER=90, PM=91, SHORTNESS=92, SLEEP=93, SOB=94, STOMACH=95, 
		SUCK=96, SUPPLY=97, SWALLOW=98, TAKE=99, THE=100, THEN=101, THIS=102, 
		THEREAFTER=103, TIME=104, TIMES=105, TO=106, UNDER=107, UP=108, USE=109, 
		VIA=110, WATER=111, WITH=112, X_X=113, AC=114, BID=115, HS=116, PC=117, 
		PRN=118, Q_Q=119, QAC=120, QAD=121, QAM=122, QD=123, QH=124, QHS=125, 
		QID=126, QN=127, QOD=128, QPC=129, QPM=130, TID=131, APPLICATION=132, 
		CAPSULE=133, CARTRIDGE=134, DOSE=135, DROP=136, ELIXIR=137, FILM=138, 
		INJECTION=139, LOLLIPOP=140, LOZENGE=141, PATCH=142, PIECE=143, PILL=144, 
		PUFF=145, SOLUTION=146, SPRAY=147, SUPPOSITORY=148, SUSPENSION=149, SYRINGE=150, 
		SYRUP=151, SYSTEM=152, TABLET=153, TROCHE=154, TDP=155, BUCCAL=156, INJECTABLE=157, 
		NASAL=158, NASALLY=159, ORAL=160, ORALLY=161, PO=162, SL=163, SUBLINGUAL=164, 
		SUBLINGUALLY=165, TRANSDERMAL=166, TRANSDERMALLY=167, MOUTH=168, FEEDING=169, 
		TUBE=170, TONGUE=171, GASTROSTOMY=172, RECTAL=173, RECTALLY=174, INHALED=175, 
		TOPICAL=176, TOPICALLY=177, INTRANASALLY=178, TOSKIN=179, ONSKIN=180, 
		TOUPPERTORSO=181, MILLISECOND=182, SECOND=183, MINUTE=184, HOUR=185, DAY=186, 
		WEEK=187, MONTH=188, YEAR=189, HOURLY=190, DAILY=191, WEEKLY=192, MONTHLY=193, 
		YEARLY=194, MONDAY=195, TUESDAY=196, WEDNESDAY=197, THURSDAY=198, FRIDAY=199, 
		SATURDAY=200, SUNDAY=201, CENTIMETERS=202, CUBICCENTIMETERS=203, GRAMS=204, 
		INTERNATIONALUNITS=205, LITERS=206, MILLIEQUIVALENTS=207, MICROGRAMSPERHOUR=208, 
		MICROGRAMSPERACT=209, MICROGRAMS=210, MILLIGRAMSPERHOUR=211, MILLIGRAMSPERACT=212, 
		MILLIGRAMSPERML=213, MILLIGRAMS=214, MILLILITERS=215, OUNCES=216, TABLESPOONS=217, 
		TEASPOONS=218, BUPRENORPHINE=219, BUTORPHANOL=220, CODEINE=221, DIHYDROCODEINE=222, 
		FENTANYL=223, HYDROCODONE=224, HYDROMORPHONE=225, LEVORPHANOL=226, MEPERIDINE=227, 
		METHADONE=228, MORPHINE=229, OPIUM=230, OXYCODONE=231, OXYMORPHONE=232, 
		PENTAZOCINE=233, TAPENTADOL=234, TRAMADOL=235, SULFATE=236, HCL=237, HYDROCHLORIDE=238, 
		BITARTRATE=239, TARTRATE=240, PHOSPHATE=241, POLISTIREX=242, DONOTSWALLOW=243, 
		WS=244, WORD=245, BRANDNAME=246, ANYTOKEN=247;
	public const int
		RULE_sig = 0, RULE_strictSig = 1, RULE_dosage = 2, RULE_strictDosage = 3, 
		RULE_dosageSeparator = 4, RULE_doseDeliveryMethod = 5, RULE_ambiguousDose = 6, 
		RULE_doseVal = 7, RULE_dose = 8, RULE_doseUnit = 9, RULE_formExpression = 10, 
		RULE_formRoute = 11, RULE_form = 12, RULE_doseUnitOfMeasure = 13, RULE_route = 14, 
		RULE_routeInstruction = 15, RULE_routeEnum = 16, RULE_frequencies = 17, 
		RULE_frequency = 18, RULE_specialFrequency = 19, RULE_basicFrequency = 20, 
		RULE_periodVal = 21, RULE_maximum = 22, RULE_frequencyVal = 23, RULE_dayFrequency = 24, 
		RULE_latinFrequency = 25, RULE_administrationTiming = 26, RULE_specificTimes = 27, 
		RULE_specificTime = 28, RULE_hour = 29, RULE_hourAndMinute = 30, RULE_timeOfDay = 31, 
		RULE_timingEvent = 32, RULE_latinAdministrationTiming = 33, RULE_periodBeforeOrAfter = 34, 
		RULE_meals = 35, RULE_duration = 36, RULE_durationStandard = 37, RULE_durationOrdinal = 38, 
		RULE_durationUnbounded = 39, RULE_additionalInstruction = 40, RULE_emptyStomach = 41, 
		RULE_asDirected = 42, RULE_withFood = 43, RULE_withLiquid = 44, RULE_doNotSwallow = 45, 
		RULE_indicationForUse = 46, RULE_indicationPrecursor = 47, RULE_indicationValue = 48, 
		RULE_indicationEnum = 49, RULE_ordinalNumeric = 50, RULE_numericValue = 51, 
		RULE_rangeNumericValue = 52, RULE_rangeNumericValueWithUOM = 53, RULE_rangeSeparator = 54, 
		RULE_period = 55, RULE_periodEnum = 56, RULE_dayOfTheWeek = 57, RULE_periodly = 58, 
		RULE_wordNumber = 59, RULE_wordDigit = 60, RULE_medication = 61, RULE_medicationComponent = 62, 
		RULE_simpleMedicationComponent = 63, RULE_complexMedicationComponent = 64, 
		RULE_nonOpioid = 65, RULE_description = 66, RULE_drugForm = 67, RULE_opioid = 68, 
		RULE_drugSuffix = 69, RULE_strength = 70, RULE_brandName = 71, RULE_freeText = 72, 
		RULE_testDose = 73, RULE_testAmbiguousDose = 74, RULE_testFormExpression = 75, 
		RULE_testRoute = 76, RULE_testFrequencies = 77, RULE_testDuration = 78, 
		RULE_testAdditionalInstruction = 79, RULE_testIndicationForUse = 80;
	public static readonly string[] ruleNames = {
		"sig", "strictSig", "dosage", "strictDosage", "dosageSeparator", "doseDeliveryMethod", 
		"ambiguousDose", "doseVal", "dose", "doseUnit", "formExpression", "formRoute", 
		"form", "doseUnitOfMeasure", "route", "routeInstruction", "routeEnum", 
		"frequencies", "frequency", "specialFrequency", "basicFrequency", "periodVal", 
		"maximum", "frequencyVal", "dayFrequency", "latinFrequency", "administrationTiming", 
		"specificTimes", "specificTime", "hour", "hourAndMinute", "timeOfDay", 
		"timingEvent", "latinAdministrationTiming", "periodBeforeOrAfter", "meals", 
		"duration", "durationStandard", "durationOrdinal", "durationUnbounded", 
		"additionalInstruction", "emptyStomach", "asDirected", "withFood", "withLiquid", 
		"doNotSwallow", "indicationForUse", "indicationPrecursor", "indicationValue", 
		"indicationEnum", "ordinalNumeric", "numericValue", "rangeNumericValue", 
		"rangeNumericValueWithUOM", "rangeSeparator", "period", "periodEnum", 
		"dayOfTheWeek", "periodly", "wordNumber", "wordDigit", "medication", "medicationComponent", 
		"simpleMedicationComponent", "complexMedicationComponent", "nonOpioid", 
		"description", "drugForm", "opioid", "drugSuffix", "strength", "brandName", 
		"freeText", "testDose", "testAmbiguousDose", "testFormExpression", "testRoute", 
		"testFrequencies", "testDuration", "testAdditionalInstruction", "testIndicationForUse"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'-'", "'/'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_PAREN", "CLOSE_PAREN", "DOT", "DASH", "FORWARDSLASH", "COMMA", 
		"HALF", "ONE", "ONCE", "TWO", "TWICE", "THREE", "THRICE", "FOUR", "FIVE", 
		"SIX", "SEVEN", "EIGHT", "NINE", "TEN", "TWELVE", "TWENTY", "THIRTY", 
		"FORTY", "SEVENTY", "FIRST", "THIRD", "FOURTH", "FIFTH", "SIXTH", "SEVENTH", 
		"NUMBER", "CLOCKNUMBER", "A_AN", "ADMINISTER", "AFTERNOON", "AFTER", "AM", 
		"AND", "APPLY", "AS", "AT", "BEDTIME", "BREAKFAST", "BREATH", "BEFORE", 
		"BY", "CHANGE", "CHEW", "COUGH", "DINNER", "DIRECTED", "DISSOLVE", "EATING", 
		"INHALE", "INFUSE", "INJECT", "INSERT", "IS", "EACH", "EMPTY_TOKEN", "EVENING", 
		"EVERY", "FOOD", "FOR", "GIVE", "HEADACHE", "IN", "LAST", "LIQUID", "LUNCH", 
		"MAXIMUM", "MEAL", "MIDDAY", "MILK", "MORNING", "MUST", "NAUSEA", "NEEDED", 
		"NIGHT", "NOON", "NOSTRIL", "OF", "ON", "OR", "OTHER", "PAIN", "PLACE", 
		"PLENTY", "PER", "PM", "SHORTNESS", "SLEEP", "SOB", "STOMACH", "SUCK", 
		"SUPPLY", "SWALLOW", "TAKE", "THE", "THEN", "THIS", "THEREAFTER", "TIME", 
		"TIMES", "TO", "UNDER", "UP", "USE", "VIA", "WATER", "WITH", "X_X", "AC", 
		"BID", "HS", "PC", "PRN", "Q_Q", "QAC", "QAD", "QAM", "QD", "QH", "QHS", 
		"QID", "QN", "QOD", "QPC", "QPM", "TID", "APPLICATION", "CAPSULE", "CARTRIDGE", 
		"DOSE", "DROP", "ELIXIR", "FILM", "INJECTION", "LOLLIPOP", "LOZENGE", 
		"PATCH", "PIECE", "PILL", "PUFF", "SOLUTION", "SPRAY", "SUPPOSITORY", 
		"SUSPENSION", "SYRINGE", "SYRUP", "SYSTEM", "TABLET", "TROCHE", "TDP", 
		"BUCCAL", "INJECTABLE", "NASAL", "NASALLY", "ORAL", "ORALLY", "PO", "SL", 
		"SUBLINGUAL", "SUBLINGUALLY", "TRANSDERMAL", "TRANSDERMALLY", "MOUTH", 
		"FEEDING", "TUBE", "TONGUE", "GASTROSTOMY", "RECTAL", "RECTALLY", "INHALED", 
		"TOPICAL", "TOPICALLY", "INTRANASALLY", "TOSKIN", "ONSKIN", "TOUPPERTORSO", 
		"MILLISECOND", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "YEAR", 
		"HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY", "MONDAY", "TUESDAY", 
		"WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY", "CENTIMETERS", 
		"CUBICCENTIMETERS", "GRAMS", "INTERNATIONALUNITS", "LITERS", "MILLIEQUIVALENTS", 
		"MICROGRAMSPERHOUR", "MICROGRAMSPERACT", "MICROGRAMS", "MILLIGRAMSPERHOUR", 
		"MILLIGRAMSPERACT", "MILLIGRAMSPERML", "MILLIGRAMS", "MILLILITERS", "OUNCES", 
		"TABLESPOONS", "TEASPOONS", "BUPRENORPHINE", "BUTORPHANOL", "CODEINE", 
		"DIHYDROCODEINE", "FENTANYL", "HYDROCODONE", "HYDROMORPHONE", "LEVORPHANOL", 
		"MEPERIDINE", "METHADONE", "MORPHINE", "OPIUM", "OXYCODONE", "OXYMORPHONE", 
		"PENTAZOCINE", "TAPENTADOL", "TRAMADOL", "SULFATE", "HCL", "HYDROCHLORIDE", 
		"BITARTRATE", "TARTRATE", "PHOSPHATE", "POLISTIREX", "DONOTSWALLOW", "WS", 
		"WORD", "BRANDNAME", "ANYTOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DefaultParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DefaultParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DefaultParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DefaultParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DosageContext[] dosage() {
			return GetRuleContexts<DosageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DosageContext dosage(int i) {
			return GetRuleContext<DosageContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DefaultParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(DefaultParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(DefaultParser.COMMA, 0); }
		public SigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SigContext sig() {
		SigContext _localctx = new SigContext(Context, State);
		EnterRule(_localctx, 0, RULE_sig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			dosage();
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 550003792481867136L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 8840121155585L) != 0)) {
				{
				{
				State = 163;
				dosage();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==COMMA || _la==WORD) {
				{
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT || _la==COMMA) {
					{
					State = 169;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==COMMA) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 172;
				freeText();
				}
			}

			State = 175;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrictSigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrictDosageContext[] strictDosage() {
			return GetRuleContexts<StrictDosageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrictDosageContext strictDosage(int i) {
			return GetRuleContext<StrictDosageContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DefaultParser.Eof, 0); }
		public StrictSigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strictSig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterStrictSig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitStrictSig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrictSig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrictSigContext strictSig() {
		StrictSigContext _localctx = new StrictSigContext(Context, State);
		EnterRule(_localctx, 2, RULE_strictSig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			strictDosage();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 550003788119801856L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 8840121155585L) != 0)) {
				{
				{
				State = 178;
				strictDosage();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DosageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousDoseContext ambiguousDose() {
			return GetRuleContext<AmbiguousDoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DosageSeparatorContext dosageSeparator() {
			return GetRuleContext<DosageSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseDeliveryMethodContext doseDeliveryMethod() {
			return GetRuleContext<DoseDeliveryMethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext[] route() {
			return GetRuleContexts<RouteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route(int i) {
			return GetRuleContext<RouteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext[] frequencies() {
			return GetRuleContexts<FrequenciesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext frequencies(int i) {
			return GetRuleContext<FrequenciesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext[] duration() {
			return GetRuleContexts<DurationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration(int i) {
			return GetRuleContext<DurationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext[] additionalInstruction() {
			return GetRuleContexts<AdditionalInstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext additionalInstruction(int i) {
			return GetRuleContext<AdditionalInstructionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext[] indicationForUse() {
			return GetRuleContexts<IndicationForUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext indicationForUse(int i) {
			return GetRuleContext<IndicationForUseContext>(i);
		}
		public DosageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dosage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDosage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDosage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDosage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DosageContext dosage() {
		DosageContext _localctx = new DosageContext(Context, State);
		EnterRule(_localctx, 4, RULE_dosage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 4611756387171565569L) != 0)) {
				{
				State = 186;
				dosageSeparator();
				}
			}

			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 550003238363987968L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 8805760892929L) != 0)) {
				{
				State = 189;
				doseDeliveryMethod();
				}
			}

			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 192;
				dose();
				}
				break;
			case 2:
				{
				State = 193;
				ambiguousDose();
				}
				break;
			}
			State = 203;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 201;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 196;
						route();
						}
						break;
					case 2:
						{
						State = 197;
						frequencies();
						}
						break;
					case 3:
						{
						State = 198;
						duration();
						}
						break;
					case 4:
						{
						State = 199;
						additionalInstruction();
						}
						break;
					case 5:
						{
						State = 200;
						indicationForUse();
						}
						break;
					}
					} 
				}
				State = 205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrictDosageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseDeliveryMethodContext doseDeliveryMethod() {
			return GetRuleContext<DoseDeliveryMethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route() {
			return GetRuleContext<RouteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DosageSeparatorContext dosageSeparator() {
			return GetRuleContext<DosageSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext frequencies() {
			return GetRuleContext<FrequenciesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext additionalInstruction() {
			return GetRuleContext<AdditionalInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext indicationForUse() {
			return GetRuleContext<IndicationForUseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration() {
			return GetRuleContext<DurationContext>(0);
		}
		public StrictDosageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strictDosage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterStrictDosage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitStrictDosage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrictDosage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrictDosageContext strictDosage() {
		StrictDosageContext _localctx = new StrictDosageContext(Context, State);
		EnterRule(_localctx, 6, RULE_strictDosage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 4611756387171565569L) != 0)) {
				{
				State = 206;
				dosageSeparator();
				}
			}

			State = 209;
			doseDeliveryMethod();
			State = 210;
			dose();
			State = 211;
			route();
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 212;
				frequencies();
				}
				break;
			}
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 215;
				additionalInstruction();
				}
				break;
			}
			State = 219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 218;
				indicationForUse();
				}
				break;
			}
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 281887294099457L) != 0)) {
				{
				State = 221;
				duration();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DosageSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(DefaultParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(DefaultParser.OR, 0); }
		public DosageSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dosageSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDosageSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDosageSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDosageSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DosageSeparatorContext dosageSeparator() {
		DosageSeparatorContext _localctx = new DosageSeparatorContext(Context, State);
		EnterRule(_localctx, 8, RULE_dosageSeparator);
		int _la;
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case THEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 224;
					Match(AND);
					}
				}

				State = 227;
				Match(THEN);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228;
				Match(OR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseDeliveryMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMINISTER() { return GetToken(DefaultParser.ADMINISTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLY() { return GetToken(DefaultParser.APPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHEW() { return GetToken(DefaultParser.CHEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWALLOW() { return GetToken(DefaultParser.SWALLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISSOLVE() { return GetToken(DefaultParser.DISSOLVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GIVE() { return GetToken(DefaultParser.GIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFUSE() { return GetToken(DefaultParser.INFUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHALE() { return GetToken(DefaultParser.INHALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INJECT() { return GetToken(DefaultParser.INJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(DefaultParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACE() { return GetToken(DefaultParser.PLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUCK() { return GetToken(DefaultParser.SUCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAKE() { return GetToken(DefaultParser.TAKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(DefaultParser.USE, 0); }
		public DoseDeliveryMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseDeliveryMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseDeliveryMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseDeliveryMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseDeliveryMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseDeliveryMethodContext doseDeliveryMethod() {
		DoseDeliveryMethodContext _localctx = new DoseDeliveryMethodContext(Context, State);
		EnterRule(_localctx, 10, RULE_doseDeliveryMethod);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				Match(ADMINISTER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				Match(APPLY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				Match(CHEW);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 234;
				Match(CHEW);
				State = 235;
				Match(AND);
				State = 236;
				Match(SWALLOW);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 237;
				Match(DISSOLVE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 238;
				Match(GIVE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 239;
				Match(INFUSE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 240;
				Match(INHALE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 241;
				Match(INJECT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 242;
				Match(INSERT);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 243;
				Match(PLACE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 244;
				Match(SUCK);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 245;
				Match(TAKE);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 246;
				Match(USE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousDoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseValContext doseVal() {
			return GetRuleContext<DoseValContext>(0);
		}
		public AmbiguousDoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousDose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousDoseContext ambiguousDose() {
		AmbiguousDoseContext _localctx = new AmbiguousDoseContext(Context, State);
		EnterRule(_localctx, 12, RULE_ambiguousDose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			doseVal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueContext rangeNumericValue() {
			return GetRuleContext<RangeNumericValueContext>(0);
		}
		public DoseValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseValContext doseVal() {
		DoseValContext _localctx = new DoseValContext(Context, State);
		EnterRule(_localctx, 14, RULE_doseVal);
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				numericValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				rangeNumericValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseValContext doseVal() {
			return GetRuleContext<DoseValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitContext doseUnit() {
			return GetRuleContext<DoseUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueWithUOMContext rangeNumericValueWithUOM() {
			return GetRuleContext<RangeNumericValueWithUOMContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(DefaultParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(DefaultParser.CLOSE_PAREN, 0); }
		public DoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseContext dose() {
		DoseContext _localctx = new DoseContext(Context, State);
		EnterRule(_localctx, 16, RULE_dose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 255;
				doseVal();
				State = 256;
				doseUnit();
				}
				break;
			case 2:
				{
				State = 258;
				rangeNumericValueWithUOM();
				}
				break;
			}
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 261;
				Match(OPEN_PAREN);
				State = 262;
				dose();
				State = 263;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext formExpression() {
			return GetRuleContext<FormExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext doseUnitOfMeasure() {
			return GetRuleContext<DoseUnitOfMeasureContext>(0);
		}
		public DoseUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseUnitContext doseUnit() {
		DoseUnitContext _localctx = new DoseUnitContext(Context, State);
		EnterRule(_localctx, 18, RULE_doseUnit);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EACH:
			case LIQUID:
			case APPLICATION:
			case CAPSULE:
			case CARTRIDGE:
			case DOSE:
			case DROP:
			case ELIXIR:
			case FILM:
			case INJECTION:
			case LOLLIPOP:
			case LOZENGE:
			case PATCH:
			case PIECE:
			case PILL:
			case PUFF:
			case SOLUTION:
			case SPRAY:
			case SUPPOSITORY:
			case SUSPENSION:
			case SYRINGE:
			case SYRUP:
			case SYSTEM:
			case TABLET:
			case TROCHE:
			case TDP:
			case BUCCAL:
			case INJECTABLE:
			case NASAL:
			case ORAL:
			case SUBLINGUAL:
			case TRANSDERMAL:
			case RECTAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				formExpression();
				}
				break;
			case CENTIMETERS:
			case CUBICCENTIMETERS:
			case GRAMS:
			case INTERNATIONALUNITS:
			case LITERS:
			case MILLIEQUIVALENTS:
			case MICROGRAMSPERHOUR:
			case MICROGRAMSPERACT:
			case MICROGRAMS:
			case MILLIGRAMSPERHOUR:
			case MILLIGRAMSPERACT:
			case MILLIGRAMSPERML:
			case MILLIGRAMS:
			case MILLILITERS:
			case OUNCES:
			case TABLESPOONS:
			case TEASPOONS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				doseUnitOfMeasure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormRouteContext formRoute() {
			return GetRuleContext<FormRouteContext>(0);
		}
		public FormExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormExpressionContext formExpression() {
		FormExpressionContext _localctx = new FormExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_formExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & 66187L) != 0)) {
				{
				State = 271;
				formRoute();
				}
			}

			State = 274;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormRouteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INJECTABLE() { return GetToken(DefaultParser.INJECTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NASAL() { return GetToken(DefaultParser.NASAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORAL() { return GetToken(DefaultParser.ORAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECTAL() { return GetToken(DefaultParser.RECTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBLINGUAL() { return GetToken(DefaultParser.SUBLINGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSDERMAL() { return GetToken(DefaultParser.TRANSDERMAL, 0); }
		public FormRouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formRoute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFormRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFormRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormRoute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormRouteContext formRoute() {
		FormRouteContext _localctx = new FormRouteContext(Context, State);
		EnterRule(_localctx, 22, RULE_formRoute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & 66187L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION() { return GetToken(DefaultParser.APPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCCAL() { return GetToken(DefaultParser.BUCCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPSULE() { return GetToken(DefaultParser.CAPSULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARTRIDGE() { return GetToken(DefaultParser.CARTRIDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSE() { return GetToken(DefaultParser.DOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(DefaultParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIXIR() { return GetToken(DefaultParser.ELIXIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILM() { return GetToken(DefaultParser.FILM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INJECTION() { return GetToken(DefaultParser.INJECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIQUID() { return GetToken(DefaultParser.LIQUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOLLIPOP() { return GetToken(DefaultParser.LOLLIPOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOZENGE() { return GetToken(DefaultParser.LOZENGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCH() { return GetToken(DefaultParser.PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIECE() { return GetToken(DefaultParser.PIECE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PILL() { return GetToken(DefaultParser.PILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUFF() { return GetToken(DefaultParser.PUFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOLUTION() { return GetToken(DefaultParser.SOLUTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPRAY() { return GetToken(DefaultParser.SPRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPOSITORY() { return GetToken(DefaultParser.SUPPOSITORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPENSION() { return GetToken(DefaultParser.SUSPENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYRINGE() { return GetToken(DefaultParser.SYRINGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYRUP() { return GetToken(DefaultParser.SYRUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(DefaultParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLET() { return GetToken(DefaultParser.TABLET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDP() { return GetToken(DefaultParser.TDP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TROCHE() { return GetToken(DefaultParser.TROCHE, 0); }
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 24, RULE_form);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = TokenStream.LA(1);
			if ( !(_la==EACH || _la==LIQUID || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 33554431L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoseUnitOfMeasureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CENTIMETERS() { return GetToken(DefaultParser.CENTIMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBICCENTIMETERS() { return GetToken(DefaultParser.CUBICCENTIMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMS() { return GetToken(DefaultParser.GRAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNATIONALUNITS() { return GetToken(DefaultParser.INTERNATIONALUNITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERS() { return GetToken(DefaultParser.LITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIEQUIVALENTS() { return GetToken(DefaultParser.MILLIEQUIVALENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROGRAMSPERHOUR() { return GetToken(DefaultParser.MICROGRAMSPERHOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROGRAMSPERACT() { return GetToken(DefaultParser.MICROGRAMSPERACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROGRAMS() { return GetToken(DefaultParser.MICROGRAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMSPERHOUR() { return GetToken(DefaultParser.MILLIGRAMSPERHOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMSPERACT() { return GetToken(DefaultParser.MILLIGRAMSPERACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMSPERML() { return GetToken(DefaultParser.MILLIGRAMSPERML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIGRAMS() { return GetToken(DefaultParser.MILLIGRAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLILITERS() { return GetToken(DefaultParser.MILLILITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUNCES() { return GetToken(DefaultParser.OUNCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPOONS() { return GetToken(DefaultParser.TABLESPOONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEASPOONS() { return GetToken(DefaultParser.TEASPOONS, 0); }
		public DoseUnitOfMeasureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doseUnitOfMeasure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoseUnitOfMeasure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoseUnitOfMeasure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoseUnitOfMeasure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoseUnitOfMeasureContext doseUnitOfMeasure() {
		DoseUnitOfMeasureContext _localctx = new DoseUnitOfMeasureContext(Context, State);
		EnterRule(_localctx, 26, RULE_doseUnitOfMeasure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & 131071L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RouteEnumContext[] routeEnum() {
			return GetRuleContexts<RouteEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteEnumContext routeEnum(int i) {
			return GetRuleContext<RouteEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteInstructionContext routeInstruction() {
			return GetRuleContext<RouteInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARDSLASH() { return GetTokens(DefaultParser.FORWARDSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH(int i) {
			return GetToken(DefaultParser.FORWARDSLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext[] route() {
			return GetRuleContexts<RouteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route(int i) {
			return GetRuleContext<RouteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DefaultParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DefaultParser.OR, i);
		}
		public RouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_route; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteContext route() {
		RouteContext _localctx = new RouteContext(Context, State);
		EnterRule(_localctx, 28, RULE_route);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 282;
				routeInstruction();
				}
				break;
			}
			State = 285;
			routeEnum();
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORWARDSLASH) {
				{
				{
				State = 286;
				Match(FORWARDSLASH);
				State = 287;
				routeEnum();
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OR) {
						{
						State = 293;
						Match(OR);
						}
					}

					State = 296;
					route();
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(DefaultParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIA() { return GetToken(DefaultParser.VIA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(DefaultParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHALED() { return GetToken(DefaultParser.INHALED, 0); }
		public RouteInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRouteInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRouteInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteInstructionContext routeInstruction() {
		RouteInstructionContext _localctx = new RouteInstructionContext(Context, State);
		EnterRule(_localctx, 30, RULE_routeInstruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHALED) {
				{
				State = 302;
				Match(INHALED);
				}
			}

			State = 305;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & -9223363240761753599L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOUTH() { return GetToken(DefaultParser.MOUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORAL() { return GetToken(DefaultParser.ORAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORALLY() { return GetToken(DefaultParser.ORALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PO() { return GetToken(DefaultParser.PO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDER() { return GetToken(DefaultParser.UNDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(DefaultParser.THE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TONGUE() { return GetToken(DefaultParser.TONGUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SL() { return GetToken(DefaultParser.SL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBLINGUAL() { return GetToken(DefaultParser.SUBLINGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBLINGUALLY() { return GetToken(DefaultParser.SUBLINGUALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUBE() { return GetToken(DefaultParser.TUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEEDING() { return GetToken(DefaultParser.FEEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GASTROSTOMY() { return GetToken(DefaultParser.GASTROSTOMY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRANASALLY() { return GetToken(DefaultParser.INTRANASALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NASALLY() { return GetToken(DefaultParser.NASALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOSTRIL() { return GetToken(DefaultParser.NOSTRIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(DefaultParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECTAL() { return GetToken(DefaultParser.RECTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECTALLY() { return GetToken(DefaultParser.RECTALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPICAL() { return GetToken(DefaultParser.TOPICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPICALLY() { return GetToken(DefaultParser.TOPICALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSDERMAL() { return GetToken(DefaultParser.TRANSDERMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSDERMALLY() { return GetToken(DefaultParser.TRANSDERMALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOSKIN() { return GetToken(DefaultParser.TOSKIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONSKIN() { return GetToken(DefaultParser.ONSKIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUPPERTORSO() { return GetToken(DefaultParser.TOUPPERTORSO, 0); }
		public RouteEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRouteEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRouteEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteEnumContext routeEnum() {
		RouteEnumContext _localctx = new RouteEnumContext(Context, State);
		EnterRule(_localctx, 32, RULE_routeEnum);
		int _la;
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MOUTH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				Match(MOUTH);
				}
				break;
			case ORAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				Match(ORAL);
				}
				break;
			case ORALLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 309;
				Match(ORALLY);
				}
				break;
			case PO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 310;
				Match(PO);
				}
				break;
			case UNDER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 311;
				Match(UNDER);
				State = 312;
				Match(THE);
				State = 313;
				Match(TONGUE);
				}
				break;
			case SL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 314;
				Match(SL);
				}
				break;
			case SUBLINGUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 315;
				Match(SUBLINGUAL);
				}
				break;
			case SUBLINGUALLY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 316;
				Match(SUBLINGUALLY);
				}
				break;
			case FEEDING:
			case GASTROSTOMY:
				EnterOuterAlt(_localctx, 9);
				{
				State = 317;
				_la = TokenStream.LA(1);
				if ( !(_la==FEEDING || _la==GASTROSTOMY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 318;
				Match(TUBE);
				}
				break;
			case INTRANASALLY:
				EnterOuterAlt(_localctx, 10);
				{
				State = 319;
				Match(INTRANASALLY);
				}
				break;
			case NASALLY:
				EnterOuterAlt(_localctx, 11);
				{
				State = 320;
				Match(NASALLY);
				}
				break;
			case EACH:
			case PER:
				EnterOuterAlt(_localctx, 12);
				{
				State = 321;
				_la = TokenStream.LA(1);
				if ( !(_la==EACH || _la==PER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 322;
				Match(NOSTRIL);
				}
				break;
			case RECTAL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 323;
				Match(RECTAL);
				}
				break;
			case RECTALLY:
				EnterOuterAlt(_localctx, 14);
				{
				State = 324;
				Match(RECTALLY);
				}
				break;
			case TOPICAL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 325;
				Match(TOPICAL);
				}
				break;
			case TOPICALLY:
				EnterOuterAlt(_localctx, 16);
				{
				State = 326;
				Match(TOPICALLY);
				}
				break;
			case TRANSDERMAL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 327;
				Match(TRANSDERMAL);
				}
				break;
			case TRANSDERMALLY:
				EnterOuterAlt(_localctx, 18);
				{
				State = 328;
				Match(TRANSDERMALLY);
				}
				break;
			case TOSKIN:
				EnterOuterAlt(_localctx, 19);
				{
				State = 329;
				Match(TOSKIN);
				}
				break;
			case ONSKIN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 330;
				Match(ONSKIN);
				}
				break;
			case TOUPPERTORSO:
				EnterOuterAlt(_localctx, 21);
				{
				State = 331;
				Match(TOUPPERTORSO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequenciesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyContext[] frequency() {
			return GetRuleContexts<FrequencyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyContext frequency(int i) {
			return GetRuleContext<FrequencyContext>(i);
		}
		public FrequenciesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequencies; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequencies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequenciesContext frequencies() {
		FrequenciesContext _localctx = new FrequenciesContext(Context, State);
		EnterRule(_localctx, 34, RULE_frequencies);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			frequency();
			State = 338;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 335;
					frequency();
					}
					} 
				}
				State = 340;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialFrequencyContext specialFrequency() {
			return GetRuleContext<SpecialFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicFrequencyContext basicFrequency() {
			return GetRuleContext<BasicFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayFrequencyContext dayFrequency() {
			return GetRuleContext<DayFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LatinFrequencyContext latinFrequency() {
			return GetRuleContext<LatinFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdministrationTimingContext administrationTiming() {
			return GetRuleContext<AdministrationTimingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(DefaultParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		public FrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequencyContext frequency() {
		FrequencyContext _localctx = new FrequencyContext(Context, State);
		EnterRule(_localctx, 36, RULE_frequency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 341;
					Match(AND);
					}
				}

				State = 344;
				Match(CHANGE);
				}
				break;
			}
			State = 352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 347;
				specialFrequency();
				}
				break;
			case 2:
				{
				State = 348;
				basicFrequency();
				}
				break;
			case 3:
				{
				State = 349;
				dayFrequency();
				}
				break;
			case 4:
				{
				State = 350;
				latinFrequency();
				}
				break;
			case 5:
				{
				State = 351;
				administrationTiming();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext[] numericValue() {
			return GetRuleContexts<NumericValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue(int i) {
			return GetRuleContext<NumericValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(DefaultParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(DefaultParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(DefaultParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH() { return GetToken(DefaultParser.FORWARDSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(DefaultParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(DefaultParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(DefaultParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSE() { return GetToken(DefaultParser.DOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(DefaultParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DefaultParser.NUMBER, 0); }
		public SpecialFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSpecialFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSpecialFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialFrequencyContext specialFrequency() {
		SpecialFrequencyContext _localctx = new SpecialFrequencyContext(Context, State);
		EnterRule(_localctx, 38, RULE_specialFrequency);
		int _la;
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354;
				Match(EVERY);
				State = 355;
				numericValue();
				State = 356;
				Match(HOUR);
				State = 357;
				Match(OPEN_PAREN);
				State = 358;
				numericValue();
				State = 359;
				Match(TIMES);
				State = 360;
				Match(FORWARDSLASH);
				State = 361;
				Match(DAY);
				State = 362;
				Match(CLOSE_PAREN);
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				Match(AS);
				State = 365;
				_la = TokenStream.LA(1);
				if ( !(_la==ONE || _la==NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 366;
				Match(DOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PeriodContext period() {
			return GetRuleContext<PeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LatinFrequencyContext latinFrequency() {
			return GetRuleContext<LatinFrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeriodlyContext periodly() {
			return GetRuleContext<PeriodlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaximumContext maximum() {
			return GetRuleContext<MaximumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyValContext frequencyVal() {
			return GetRuleContext<FrequencyValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(DefaultParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN() { return GetToken(DefaultParser.A_AN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q_Q() { return GetToken(DefaultParser.Q_Q, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PeriodValContext periodVal() {
			return GetRuleContext<PeriodValContext>(0);
		}
		public BasicFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterBasicFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitBasicFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicFrequencyContext basicFrequency() {
		BasicFrequencyContext _localctx = new BasicFrequencyContext(Context, State);
		EnterRule(_localctx, 40, RULE_basicFrequency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAXIMUM || _la==UP) {
				{
				State = 369;
				maximum();
				}
			}

			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4362076032L) != 0)) {
				{
				State = 372;
				frequencyVal();
				}
			}

			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 375;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -8070450515068059648L) != 0) || _la==PER || _la==Q_Q) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4362065280L) != 0)) {
					{
					State = 376;
					periodVal();
					}
				}

				State = 379;
				period();
				}
				break;
			case 2:
				{
				State = 380;
				latinFrequency();
				}
				break;
			case 3:
				{
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Q_Q) {
					{
					State = 381;
					Match(Q_Q);
					}
				}

				State = 384;
				periodly();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueContext rangeNumericValue() {
			return GetRuleContext<RangeNumericValueContext>(0);
		}
		public PeriodValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodValContext periodVal() {
		PeriodValContext _localctx = new PeriodValContext(Context, State);
		EnterRule(_localctx, 42, RULE_periodVal);
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387;
				numericValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				rangeNumericValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaximumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXIMUM() { return GetToken(DefaultParser.MAXIMUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UP() { return GetToken(DefaultParser.UP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(DefaultParser.TO, 0); }
		public MaximumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maximum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMaximum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMaximum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaximum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaximumContext maximum() {
		MaximumContext _localctx = new MaximumContext(Context, State);
		EnterRule(_localctx, 44, RULE_maximum);
		try {
			State = 394;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAXIMUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				Match(MAXIMUM);
				}
				break;
			case UP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				Match(UP);
				State = 393;
				Match(TO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequencyValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(DefaultParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(DefaultParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_X() { return GetToken(DefaultParser.X_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeNumericValueContext rangeNumericValue() {
			return GetRuleContext<RangeNumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONCE() { return GetToken(DefaultParser.ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWICE() { return GetToken(DefaultParser.TWICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THRICE() { return GetToken(DefaultParser.THRICE, 0); }
		public FrequencyValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequencyVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFrequencyVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFrequencyVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequencyVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequencyValContext frequencyVal() {
		FrequencyValContext _localctx = new FrequencyValContext(Context, State);
		EnterRule(_localctx, 46, RULE_frequencyVal);
		int _la;
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 398;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 396;
					numericValue();
					}
					break;
				case 2:
					{
					State = 397;
					rangeNumericValue();
					}
					break;
				}
				State = 400;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & 515L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ONCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 402;
				Match(ONCE);
				}
				break;
			case TWICE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 403;
				Match(TWICE);
				}
				break;
			case THRICE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 404;
				Match(THRICE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DayOfTheWeekContext[] dayOfTheWeek() {
			return GetRuleContexts<DayOfTheWeekContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayOfTheWeekContext dayOfTheWeek(int i) {
			return GetRuleContext<DayOfTheWeekContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(DefaultParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		public DayFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDayFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDayFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayFrequencyContext dayFrequency() {
		DayFrequencyContext _localctx = new DayFrequencyContext(Context, State);
		EnterRule(_localctx, 48, RULE_dayFrequency);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			_la = TokenStream.LA(1);
			if ( !(_la==EVERY || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 408;
			dayOfTheWeek();
			State = 415;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 410;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND) {
						{
						State = 409;
						Match(AND);
						}
					}

					State = 412;
					dayOfTheWeek();
					}
					} 
				}
				State = 417;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LatinFrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QD() { return GetToken(DefaultParser.QD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QHS() { return GetToken(DefaultParser.QHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QOD() { return GetToken(DefaultParser.QOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BID() { return GetToken(DefaultParser.BID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TID() { return GetToken(DefaultParser.TID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QID() { return GetToken(DefaultParser.QID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QPM() { return GetToken(DefaultParser.QPM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QN() { return GetToken(DefaultParser.QN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QAM() { return GetToken(DefaultParser.QAM, 0); }
		public LatinFrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_latinFrequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterLatinFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitLatinFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLatinFrequency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LatinFrequencyContext latinFrequency() {
		LatinFrequencyContext _localctx = new LatinFrequencyContext(Context, State);
		EnterRule(_localctx, 50, RULE_latinFrequency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 114049L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdministrationTimingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificTimesContext specificTimes() {
			return GetRuleContext<SpecificTimesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeOfDayContext timeOfDay() {
			return GetRuleContext<TimeOfDayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimingEventContext timingEvent() {
			return GetRuleContext<TimingEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LatinAdministrationTimingContext latinAdministrationTiming() {
			return GetRuleContext<LatinAdministrationTimingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DefaultParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(DefaultParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(DefaultParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(DefaultParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(DefaultParser.THE, 0); }
		public AdministrationTimingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_administrationTiming; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdministrationTiming(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdministrationTimingContext administrationTiming() {
		AdministrationTimingContext _localctx = new AdministrationTimingContext(Context, State);
		EnterRule(_localctx, 52, RULE_administrationTiming);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 420;
				Match(AND);
				}
			}

			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 423;
				Match(THEN);
				}
			}

			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 426;
				Match(AT);
				}
				break;
			}
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 429;
				Match(IN);
				}
			}

			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THE) {
				{
				State = 432;
				Match(THE);
				}
			}

			}
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 435;
				specificTimes();
				}
				break;
			case 2:
				{
				State = 436;
				timeOfDay();
				}
				break;
			case 3:
				{
				State = 437;
				timingEvent();
				}
				break;
			case 4:
				{
				State = 438;
				latinAdministrationTiming();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificTimesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificTimeContext[] specificTime() {
			return GetRuleContexts<SpecificTimeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecificTimeContext specificTime(int i) {
			return GetRuleContext<SpecificTimeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT() { return GetTokens(DefaultParser.AT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT(int i) {
			return GetToken(DefaultParser.AT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DefaultParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DefaultParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		public SpecificTimesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificTimes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSpecificTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSpecificTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificTimes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificTimesContext specificTimes() {
		SpecificTimesContext _localctx = new SpecificTimesContext(Context, State);
		EnterRule(_localctx, 54, RULE_specificTimes);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			specificTime();
			State = 451;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 443;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA || _la==AND) {
						{
						State = 442;
						_la = TokenStream.LA(1);
						if ( !(_la==COMMA || _la==AND) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT) {
						{
						State = 445;
						Match(AT);
						}
					}

					State = 448;
					specificTime();
					}
					} 
				}
				State = 453;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificTimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HourContext hour() {
			return GetRuleContext<HourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HourAndMinuteContext hourAndMinute() {
			return GetRuleContext<HourAndMinuteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AM() { return GetToken(DefaultParser.AM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PM() { return GetToken(DefaultParser.PM, 0); }
		public SpecificTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSpecificTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSpecificTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificTimeContext specificTime() {
		SpecificTimeContext _localctx = new SpecificTimeContext(Context, State);
		EnterRule(_localctx, 56, RULE_specificTime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 454;
				hour();
				}
				break;
			case CLOCKNUMBER:
				{
				State = 455;
				hourAndMinute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AM || _la==PM) {
				{
				State = 458;
				_la = TokenStream.LA(1);
				if ( !(_la==AM || _la==PM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DefaultParser.NUMBER, 0); }
		public HourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHour(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HourContext hour() {
		HourContext _localctx = new HourContext(Context, State);
		EnterRule(_localctx, 58, RULE_hour);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HourAndMinuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCKNUMBER() { return GetToken(DefaultParser.CLOCKNUMBER, 0); }
		public HourAndMinuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hourAndMinute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterHourAndMinute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitHourAndMinute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHourAndMinute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HourAndMinuteContext hourAndMinute() {
		HourAndMinuteContext _localctx = new HourAndMinuteContext(Context, State);
		EnterRule(_localctx, 60, RULE_hourAndMinute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(CLOCKNUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOfDayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORNING() { return GetToken(DefaultParser.MORNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTERNOON() { return GetToken(DefaultParser.AFTERNOON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENING() { return GetToken(DefaultParser.EVENING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIGHT() { return GetToken(DefaultParser.NIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEDTIME() { return GetToken(DefaultParser.BEDTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(DefaultParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOON() { return GetToken(DefaultParser.NOON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIDDAY() { return GetToken(DefaultParser.MIDDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(DefaultParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(DefaultParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PeriodBeforeOrAfterContext periodBeforeOrAfter() {
			return GetRuleContext<PeriodBeforeOrAfterContext>(0);
		}
		public TimeOfDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOfDay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTimeOfDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTimeOfDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeOfDay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOfDayContext timeOfDay() {
		TimeOfDayContext _localctx = new TimeOfDayContext(Context, State);
		EnterRule(_localctx, 62, RULE_timeOfDay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EACH || _la==EVERY) {
				{
				State = 465;
				_la = TokenStream.LA(1);
				if ( !(_la==EACH || _la==EVERY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MORNING:
				{
				State = 468;
				Match(MORNING);
				}
				break;
			case AFTER:
			case AT:
			case BEFORE:
			case DAY:
				{
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DAY) {
					{
					State = 469;
					Match(DAY);
					}
				}

				State = 472;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 74904229642240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 473;
				_la = TokenStream.LA(1);
				if ( !(_la==MIDDAY || _la==NOON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case AFTERNOON:
				{
				State = 474;
				Match(AFTERNOON);
				}
				break;
			case EVENING:
				{
				State = 475;
				Match(EVENING);
				}
				break;
			case NIGHT:
				{
				State = 476;
				Match(NIGHT);
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TIME) {
					{
					State = 477;
					Match(TIME);
					}
				}

				}
				break;
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
			case NUMBER:
			case BEDTIME:
				{
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4362065280L) != 0)) {
					{
					State = 480;
					periodBeforeOrAfter();
					}
				}

				State = 483;
				Match(BEDTIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimingEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MealsContext meals() {
			return GetRuleContext<MealsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DefaultParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PeriodBeforeOrAfterContext periodBeforeOrAfter() {
			return GetRuleContext<PeriodBeforeOrAfterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(DefaultParser.EACH, 0); }
		public TimingEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timingEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTimingEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTimingEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimingEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimingEventContext timingEvent() {
		TimingEventContext _localctx = new TimingEventContext(Context, State);
		EnterRule(_localctx, 64, RULE_timingEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				{
				State = 486;
				Match(BEFORE);
				}
				break;
			case AFTER:
				{
				State = 487;
				Match(AFTER);
				}
				break;
			case WITH:
				{
				State = 488;
				Match(WITH);
				}
				break;
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
			case NUMBER:
				{
				State = 489;
				periodBeforeOrAfter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EACH || _la==EVERY) {
				{
				State = 492;
				_la = TokenStream.LA(1);
				if ( !(_la==EACH || _la==EVERY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 495;
			meals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LatinAdministrationTimingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HS() { return GetToken(DefaultParser.HS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QPC() { return GetToken(DefaultParser.QPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QAC() { return GetToken(DefaultParser.QAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(DefaultParser.EVERY, 0); }
		public LatinAdministrationTimingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_latinAdministrationTiming; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterLatinAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitLatinAdministrationTiming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLatinAdministrationTiming(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LatinAdministrationTimingContext latinAdministrationTiming() {
		LatinAdministrationTimingContext _localctx = new LatinAdministrationTimingContext(Context, State);
		EnterRule(_localctx, 66, RULE_latinAdministrationTiming);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVERY) {
				{
				State = 497;
				Match(EVERY);
				}
			}

			State = 500;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 8209L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodBeforeOrAfterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(DefaultParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(DefaultParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		public PeriodBeforeOrAfterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodBeforeOrAfter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodBeforeOrAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodBeforeOrAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodBeforeOrAfter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodBeforeOrAfterContext periodBeforeOrAfter() {
		PeriodBeforeOrAfterContext _localctx = new PeriodBeforeOrAfterContext(Context, State);
		EnterRule(_localctx, 68, RULE_periodBeforeOrAfter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			numericValue();
			State = 503;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUTE || _la==HOUR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 504;
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MealsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEAL() { return GetToken(DefaultParser.MEAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAKFAST() { return GetToken(DefaultParser.BREAKFAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LUNCH() { return GetToken(DefaultParser.LUNCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DINNER() { return GetToken(DefaultParser.DINNER, 0); }
		public MealsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMeals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMeals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MealsContext meals() {
		MealsContext _localctx = new MealsContext(Context, State);
		EnterRule(_localctx, 70, RULE_meals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 671088769L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationStandardContext durationStandard() {
			return GetRuleContext<DurationStandardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationOrdinalContext durationOrdinal() {
			return GetRuleContext<DurationOrdinalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationUnboundedContext durationUnbounded() {
			return GetRuleContext<DurationUnboundedContext>(0);
		}
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(Context, State);
		EnterRule(_localctx, 72, RULE_duration);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508;
				durationStandard();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509;
				durationOrdinal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 510;
				durationUnbounded();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationStandardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeriodContext period() {
			return GetRuleContext<PeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(DefaultParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(DefaultParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN() { return GetToken(DefaultParser.A_AN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUST() { return GetToken(DefaultParser.MUST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(DefaultParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_X() { return GetToken(DefaultParser.X_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPLY() { return GetToken(DefaultParser.SUPPLY, 0); }
		public DurationStandardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationStandard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDurationStandard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDurationStandard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationStandard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationStandardContext durationStandard() {
		DurationStandardContext _localctx = new DurationStandardContext(Context, State);
		EnterRule(_localctx, 74, RULE_durationStandard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 513;
				Match(FOR);
				}
				break;
			case THIS:
				{
				State = 514;
				Match(THIS);
				State = 515;
				Match(IS);
				State = 516;
				Match(A_AN);
				}
				break;
			case MUST:
				{
				State = 517;
				Match(MUST);
				State = 518;
				Match(LAST);
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 519;
					Match(FOR);
					}
				}

				}
				break;
			case X_X:
				{
				State = 522;
				Match(X_X);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 525;
			numericValue();
			State = 526;
			period();
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUPPLY) {
				{
				State = 527;
				Match(SUPPLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationOrdinalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(DefaultParser.THE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrdinalNumericContext ordinalNumeric() {
			return GetRuleContext<OrdinalNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeriodContext period() {
			return GetRuleContext<PeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(DefaultParser.ON, 0); }
		public DurationOrdinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationOrdinal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDurationOrdinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDurationOrdinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationOrdinal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationOrdinalContext durationOrdinal() {
		DurationOrdinalContext _localctx = new DurationOrdinalContext(Context, State);
		EnterRule(_localctx, 76, RULE_durationOrdinal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			_la = TokenStream.LA(1);
			if ( !(_la==FOR || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 531;
			Match(THE);
			State = 532;
			ordinalNumeric();
			State = 533;
			period();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationUnboundedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEREAFTER() { return GetToken(DefaultParser.THEREAFTER, 0); }
		public DurationUnboundedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationUnbounded; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDurationUnbounded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDurationUnbounded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationUnbounded(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationUnboundedContext durationUnbounded() {
		DurationUnboundedContext _localctx = new DurationUnboundedContext(Context, State);
		EnterRule(_localctx, 78, RULE_durationUnbounded);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(THEREAFTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WithFoodContext withFood() {
			return GetRuleContext<WithFoodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithLiquidContext withLiquid() {
			return GetRuleContext<WithLiquidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsDirectedContext asDirected() {
			return GetRuleContext<AsDirectedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStomachContext emptyStomach() {
			return GetRuleContext<EmptyStomachContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoNotSwallowContext doNotSwallow() {
			return GetRuleContext<DoNotSwallowContext>(0);
		}
		public AdditionalInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalInstructionContext additionalInstruction() {
		AdditionalInstructionContext _localctx = new AdditionalInstructionContext(Context, State);
		EnterRule(_localctx, 80, RULE_additionalInstruction);
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537;
				withFood();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 538;
				withLiquid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 539;
				asDirected();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 540;
				emptyStomach();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 541;
				doNotSwallow();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStomachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(DefaultParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_TOKEN() { return GetToken(DefaultParser.EMPTY_TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOMACH() { return GetToken(DefaultParser.STOMACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN() { return GetToken(DefaultParser.A_AN, 0); }
		public EmptyStomachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStomach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterEmptyStomach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitEmptyStomach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStomach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStomachContext emptyStomach() {
		EmptyStomachContext _localctx = new EmptyStomachContext(Context, State);
		EnterRule(_localctx, 82, RULE_emptyStomach);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(ON);
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A_AN) {
				{
				State = 545;
				Match(A_AN);
				}
			}

			State = 548;
			Match(EMPTY_TOKEN);
			State = 549;
			Match(STOMACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsDirectedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(DefaultParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTED() { return GetToken(DefaultParser.DIRECTED, 0); }
		public AsDirectedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asDirected; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterAsDirected(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitAsDirected(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsDirected(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsDirectedContext asDirected() {
		AsDirectedContext _localctx = new AsDirectedContext(Context, State);
		EnterRule(_localctx, 84, RULE_asDirected);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			Match(AS);
			State = 552;
			Match(DIRECTED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithFoodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(DefaultParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(DefaultParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DefaultParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEAL() { return GetToken(DefaultParser.MEAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOOD() { return GetToken(DefaultParser.FOOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EATING() { return GetToken(DefaultParser.EATING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(DefaultParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PC() { return GetToken(DefaultParser.PC, 0); }
		public WithFoodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withFood; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWithFood(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWithFood(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithFood(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithFoodContext withFood() {
		WithFoodContext _localctx = new WithFoodContext(Context, State);
		EnterRule(_localctx, 86, RULE_withFood);
		int _la;
		try {
			State = 558;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFTER:
			case BEFORE:
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554;
				_la = TokenStream.LA(1);
				if ( !(_la==AFTER || _la==BEFORE || _la==WITH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 555;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 525313L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case AC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 556;
				Match(AC);
				}
				break;
			case PC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 557;
				Match(PC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithLiquidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DefaultParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WATER() { return GetToken(DefaultParser.WATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILK() { return GetToken(DefaultParser.MILK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIQUID() { return GetToken(DefaultParser.LIQUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLENTY() { return GetToken(DefaultParser.PLENTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(DefaultParser.OF, 0); }
		public WithLiquidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withLiquid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWithLiquid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWithLiquid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithLiquid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithLiquidContext withLiquid() {
		WithLiquidContext _localctx = new WithLiquidContext(Context, State);
		EnterRule(_localctx, 88, RULE_withLiquid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			Match(WITH);
			State = 563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLENTY) {
				{
				State = 561;
				Match(PLENTY);
				State = 562;
				Match(OF);
				}
			}

			State = 565;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2199023255585L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoNotSwallowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONOTSWALLOW() { return GetToken(DefaultParser.DONOTSWALLOW, 0); }
		public DoNotSwallowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doNotSwallow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDoNotSwallow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDoNotSwallow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoNotSwallow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoNotSwallowContext doNotSwallow() {
		DoNotSwallowContext _localctx = new DoNotSwallowContext(Context, State);
		EnterRule(_localctx, 90, RULE_doNotSwallow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(DONOTSWALLOW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationForUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndicationValueContext indicationValue() {
			return GetRuleContext<IndicationValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndicationPrecursorContext indicationPrecursor() {
			return GetRuleContext<IndicationPrecursorContext>(0);
		}
		public IndicationForUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationForUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationForUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationForUseContext indicationForUse() {
		IndicationForUseContext _localctx = new IndicationForUseContext(Context, State);
		EnterRule(_localctx, 92, RULE_indicationForUse);
		try {
			State = 575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 571;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 569;
					Match(FOR);
					}
					break;
				case AS:
				case PRN:
					{
					State = 570;
					indicationPrecursor();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 573;
				indicationValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574;
				indicationPrecursor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationPrecursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(DefaultParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEEDED() { return GetToken(DefaultParser.NEEDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRN() { return GetToken(DefaultParser.PRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(DefaultParser.FOR, 0); }
		public IndicationPrecursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationPrecursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationPrecursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationPrecursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationPrecursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationPrecursorContext indicationPrecursor() {
		IndicationPrecursorContext _localctx = new IndicationPrecursorContext(Context, State);
		EnterRule(_localctx, 94, RULE_indicationPrecursor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 577;
				Match(AS);
				State = 578;
				Match(NEEDED);
				}
				break;
			case PRN:
				{
				State = 579;
				Match(PRN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 582;
				Match(FOR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext[] freeText() {
			return GetRuleContexts<FreeTextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText(int i) {
			return GetRuleContext<FreeTextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationEnumContext[] indicationEnum() {
			return GetRuleContexts<IndicationEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationEnumContext indicationEnum(int i) {
			return GetRuleContext<IndicationEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DefaultParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DefaultParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(DefaultParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(DefaultParser.TO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARDSLASH() { return GetTokens(DefaultParser.FORWARDSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH(int i) {
			return GetToken(DefaultParser.FORWARDSLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(DefaultParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(DefaultParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THE() { return GetTokens(DefaultParser.THE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE(int i) {
			return GetToken(DefaultParser.THE, i);
		}
		public IndicationValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationValueContext indicationValue() {
		IndicationValueContext _localctx = new IndicationValueContext(Context, State);
		EnterRule(_localctx, 96, RULE_indicationValue);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 593;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WORD:
						{
						State = 585;
						freeText();
						}
						break;
					case COUGH:
					case HEADACHE:
					case NAUSEA:
					case PAIN:
					case SHORTNESS:
					case SLEEP:
					case SOB:
						{
						State = 586;
						indicationEnum();
						}
						break;
					case OR:
						{
						State = 587;
						Match(OR);
						}
						break;
					case AND:
						{
						State = 588;
						Match(AND);
						}
						break;
					case TO:
						{
						State = 589;
						Match(TO);
						}
						break;
					case FORWARDSLASH:
						{
						State = 590;
						Match(FORWARDSLASH);
						}
						break;
					case IN:
						{
						State = 591;
						Match(IN);
						}
						break;
					case THE:
						{
						State = 592;
						Match(THE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 595;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndicationEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUGH() { return GetToken(DefaultParser.COUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADACHE() { return GetToken(DefaultParser.HEADACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAUSEA() { return GetToken(DefaultParser.NAUSEA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAIN() { return GetToken(DefaultParser.PAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLEEP() { return GetToken(DefaultParser.SLEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTNESS() { return GetToken(DefaultParser.SHORTNESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(DefaultParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREATH() { return GetToken(DefaultParser.BREATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOB() { return GetToken(DefaultParser.SOB, 0); }
		public IndicationEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicationEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterIndicationEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitIndicationEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicationEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicationEnumContext indicationEnum() {
		IndicationEnumContext _localctx = new IndicationEnumContext(Context, State);
		EnterRule(_localctx, 98, RULE_indicationEnum);
		try {
			State = 606;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COUGH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 597;
				Match(COUGH);
				}
				break;
			case HEADACHE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 598;
				Match(HEADACHE);
				}
				break;
			case NAUSEA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 599;
				Match(NAUSEA);
				}
				break;
			case PAIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 600;
				Match(PAIN);
				}
				break;
			case SLEEP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 601;
				Match(SLEEP);
				}
				break;
			case SHORTNESS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 602;
				Match(SHORTNESS);
				State = 603;
				Match(OF);
				State = 604;
				Match(BREATH);
				}
				break;
			case SOB:
				EnterOuterAlt(_localctx, 7);
				{
				State = 605;
				Match(SOB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrdinalNumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(DefaultParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(DefaultParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIRD() { return GetToken(DefaultParser.THIRD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOURTH() { return GetToken(DefaultParser.FOURTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIFTH() { return GetToken(DefaultParser.FIFTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIXTH() { return GetToken(DefaultParser.SIXTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVENTH() { return GetToken(DefaultParser.SEVENTH, 0); }
		public OrdinalNumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinalNumeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterOrdinalNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitOrdinalNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdinalNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrdinalNumericContext ordinalNumeric() {
		OrdinalNumericContext _localctx = new OrdinalNumericContext(Context, State);
		EnterRule(_localctx, 100, RULE_ordinalNumeric);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4227858432L) != 0) || _la==SECOND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DefaultParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WordNumberContext wordNumber() {
			return GetRuleContext<WordNumberContext>(0);
		}
		public NumericValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericValueContext numericValue() {
		NumericValueContext _localctx = new NumericValueContext(Context, State);
		EnterRule(_localctx, 102, RULE_numericValue);
		try {
			State = 612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 610;
				Match(NUMBER);
				}
				break;
			case HALF:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
			case TEN:
			case TWELVE:
			case TWENTY:
			case THIRTY:
			case FORTY:
			case SEVENTY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611;
				wordNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeNumericValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext[] numericValue() {
			return GetRuleContexts<NumericValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue(int i) {
			return GetRuleContext<NumericValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeSeparatorContext rangeSeparator() {
			return GetRuleContext<RangeSeparatorContext>(0);
		}
		public RangeNumericValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeNumericValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRangeNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRangeNumericValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeNumericValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeNumericValueContext rangeNumericValue() {
		RangeNumericValueContext _localctx = new RangeNumericValueContext(Context, State);
		EnterRule(_localctx, 104, RULE_rangeNumericValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			numericValue();
			State = 615;
			rangeSeparator();
			State = 616;
			numericValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeNumericValueWithUOMContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext[] numericValue() {
			return GetRuleContexts<NumericValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue(int i) {
			return GetRuleContext<NumericValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext[] doseUnitOfMeasure() {
			return GetRuleContexts<DoseUnitOfMeasureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext doseUnitOfMeasure(int i) {
			return GetRuleContext<DoseUnitOfMeasureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeSeparatorContext rangeSeparator() {
			return GetRuleContext<RangeSeparatorContext>(0);
		}
		public RangeNumericValueWithUOMContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeNumericValueWithUOM; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRangeNumericValueWithUOM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRangeNumericValueWithUOM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeNumericValueWithUOM(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeNumericValueWithUOMContext rangeNumericValueWithUOM() {
		RangeNumericValueWithUOMContext _localctx = new RangeNumericValueWithUOMContext(Context, State);
		EnterRule(_localctx, 106, RULE_rangeNumericValueWithUOM);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			numericValue();
			State = 619;
			doseUnitOfMeasure();
			State = 620;
			rangeSeparator();
			State = 621;
			numericValue();
			State = 622;
			doseUnitOfMeasure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(DefaultParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(DefaultParser.DASH, 0); }
		public RangeSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterRangeSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitRangeSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeSeparatorContext rangeSeparator() {
		RangeSeparatorContext _localctx = new RangeSeparatorContext(Context, State);
		EnterRule(_localctx, 108, RULE_rangeSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			_la = TokenStream.LA(1);
			if ( !(_la==DASH || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PeriodEnumContext periodEnum() {
			return GetRuleContext<PeriodEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrdinalNumericContext ordinalNumeric() {
			return GetRuleContext<OrdinalNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(DefaultParser.OTHER, 0); }
		public PeriodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_period; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodContext period() {
		PeriodContext _localctx = new PeriodContext(Context, State);
		EnterRule(_localctx, 110, RULE_period);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 626;
				ordinalNumeric();
				}
				break;
			case 2:
				{
				State = 627;
				Match(OTHER);
				}
				break;
			}
			State = 630;
			periodEnum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(DefaultParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(DefaultParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(DefaultParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(DefaultParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(DefaultParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(DefaultParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(DefaultParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(DefaultParser.YEAR, 0); }
		public PeriodEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodEnumContext periodEnum() {
		PeriodEnumContext _localctx = new PeriodEnumContext(Context, State);
		EnterRule(_localctx, 112, RULE_periodEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayOfTheWeekContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONDAY() { return GetToken(DefaultParser.MONDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUESDAY() { return GetToken(DefaultParser.TUESDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEDNESDAY() { return GetToken(DefaultParser.WEDNESDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THURSDAY() { return GetToken(DefaultParser.THURSDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRIDAY() { return GetToken(DefaultParser.FRIDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SATURDAY() { return GetToken(DefaultParser.SATURDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUNDAY() { return GetToken(DefaultParser.SUNDAY, 0); }
		public DayOfTheWeekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayOfTheWeek; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDayOfTheWeek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDayOfTheWeek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayOfTheWeek(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayOfTheWeekContext dayOfTheWeek() {
		DayOfTheWeekContext _localctx = new DayOfTheWeekContext(Context, State);
		EnterRule(_localctx, 114, RULE_dayOfTheWeek);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeriodlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOURLY() { return GetToken(DefaultParser.HOURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAILY() { return GetToken(DefaultParser.DAILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKLY() { return GetToken(DefaultParser.WEEKLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTHLY() { return GetToken(DefaultParser.MONTHLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEARLY() { return GetToken(DefaultParser.YEARLY, 0); }
		public PeriodlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_periodly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterPeriodly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitPeriodly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeriodlyContext periodly() {
		PeriodlyContext _localctx = new PeriodlyContext(Context, State);
		EnterRule(_localctx, 116, RULE_periodly);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WordDigitContext[] wordDigit() {
			return GetRuleContexts<WordDigitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WordDigitContext wordDigit(int i) {
			return GetRuleContext<WordDigitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DefaultParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DefaultParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A_AN() { return GetTokens(DefaultParser.A_AN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AN(int i) {
			return GetToken(DefaultParser.A_AN, i);
		}
		public WordNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWordNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWordNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordNumberContext wordNumber() {
		WordNumberContext _localctx = new WordNumberContext(Context, State);
		EnterRule(_localctx, 118, RULE_wordNumber);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			wordDigit();
			State = 648;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 643;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND) {
						{
						State = 639;
						Match(AND);
						State = 641;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==A_AN) {
							{
							State = 640;
							Match(A_AN);
							}
						}

						}
					}

					State = 645;
					wordDigit();
					}
					} 
				}
				State = 650;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordDigitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(DefaultParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO() { return GetToken(DefaultParser.TWO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREE() { return GetToken(DefaultParser.THREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUR() { return GetToken(DefaultParser.FOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIVE() { return GetToken(DefaultParser.FIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIX() { return GetToken(DefaultParser.SIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVEN() { return GetToken(DefaultParser.SEVEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EIGHT() { return GetToken(DefaultParser.EIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NINE() { return GetToken(DefaultParser.NINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEN() { return GetToken(DefaultParser.TEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWELVE() { return GetToken(DefaultParser.TWELVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HALF() { return GetToken(DefaultParser.HALF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWENTY() { return GetToken(DefaultParser.TWENTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIRTY() { return GetToken(DefaultParser.THIRTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORTY() { return GetToken(DefaultParser.FORTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVENTY() { return GetToken(DefaultParser.SEVENTY, 0); }
		public WordDigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordDigit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterWordDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitWordDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordDigit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordDigitContext wordDigit() {
		WordDigitContext _localctx = new WordDigitContext(Context, State);
		EnterRule(_localctx, 120, RULE_wordDigit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67097984L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MedicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MedicationComponentContext[] medicationComponent() {
			return GetRuleContexts<MedicationComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MedicationComponentContext medicationComponent(int i) {
			return GetRuleContext<MedicationComponentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DefaultParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARDSLASH() { return GetTokens(DefaultParser.FORWARDSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH(int i) {
			return GetToken(DefaultParser.FORWARDSLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugFormContext drugForm() {
			return GetRuleContext<DrugFormContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BrandNameContext brandName() {
			return GetRuleContext<BrandNameContext>(0);
		}
		public MedicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_medication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMedication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMedication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMedication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MedicationContext medication() {
		MedicationContext _localctx = new MedicationContext(Context, State);
		EnterRule(_localctx, 122, RULE_medication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			medicationComponent();
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORWARDSLASH) {
				{
				{
				State = 654;
				Match(FORWARDSLASH);
				State = 655;
				medicationComponent();
				}
				}
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EACH || _la==LIQUID || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 2220900745215L) != 0) || _la==WORD) {
				{
				State = 661;
				drugForm();
				}
			}

			State = 665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BRANDNAME) {
				{
				State = 664;
				brandName();
				}
			}

			State = 667;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MedicationComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleMedicationComponentContext simpleMedicationComponent() {
			return GetRuleContext<SimpleMedicationComponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexMedicationComponentContext complexMedicationComponent() {
			return GetRuleContext<ComplexMedicationComponentContext>(0);
		}
		public MedicationComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_medicationComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMedicationComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MedicationComponentContext medicationComponent() {
		MedicationComponentContext _localctx = new MedicationComponentContext(Context, State);
		EnterRule(_localctx, 124, RULE_medicationComponent);
		try {
			State = 671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669;
				simpleMedicationComponent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670;
				complexMedicationComponent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleMedicationComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrengthContext strength() {
			return GetRuleContext<StrengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpioidContext opioid() {
			return GetRuleContext<OpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonOpioidContext nonOpioid() {
			return GetRuleContext<NonOpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext[] description() {
			return GetRuleContexts<DescriptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description(int i) {
			return GetRuleContext<DescriptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugSuffixContext drugSuffix() {
			return GetRuleContext<DrugSuffixContext>(0);
		}
		public SimpleMedicationComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleMedicationComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterSimpleMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitSimpleMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleMedicationComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleMedicationComponentContext simpleMedicationComponent() {
		SimpleMedicationComponentContext _localctx = new SimpleMedicationComponentContext(Context, State);
		EnterRule(_localctx, 126, RULE_simpleMedicationComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NUMBER || _la==HOUR || _la==WORD) {
					{
					{
					State = 673;
					description();
					}
					}
					State = 678;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 679;
				opioid();
				State = 681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & 127L) != 0)) {
					{
					State = 680;
					drugSuffix();
					}
				}

				}
				break;
			case 2:
				{
				State = 683;
				nonOpioid();
				}
				break;
			}
			State = 686;
			strength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexMedicationComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrengthContext[] strength() {
			return GetRuleContexts<StrengthContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrengthContext strength(int i) {
			return GetRuleContext<StrengthContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpioidContext opioid() {
			return GetRuleContext<OpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugSuffixContext drugSuffix() {
			return GetRuleContext<DrugSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonOpioidContext nonOpioid() {
			return GetRuleContext<NonOpioidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route() {
			return GetRuleContext<RouteContext>(0);
		}
		public ComplexMedicationComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexMedicationComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterComplexMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitComplexMedicationComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexMedicationComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexMedicationComponentContext complexMedicationComponent() {
		ComplexMedicationComponentContext _localctx = new ComplexMedicationComponentContext(Context, State);
		EnterRule(_localctx, 128, RULE_complexMedicationComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			strength();
			State = 693;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUPRENORPHINE:
			case BUTORPHANOL:
			case CODEINE:
			case DIHYDROCODEINE:
			case FENTANYL:
			case HYDROCODONE:
			case HYDROMORPHONE:
			case LEVORPHANOL:
			case MEPERIDINE:
			case METHADONE:
			case MORPHINE:
			case OPIUM:
			case OXYCODONE:
			case OXYMORPHONE:
			case PENTAZOCINE:
			case TAPENTADOL:
			case TRAMADOL:
				{
				State = 689;
				opioid();
				State = 690;
				drugSuffix();
				}
				break;
			case NUMBER:
			case HOUR:
			case WORD:
				{
				State = 692;
				nonOpioid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & -8070441736154898431L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 8382463L) != 0)) {
				{
				State = 695;
				route();
				}
			}

			State = 698;
			strength();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonOpioidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrugSuffixContext drugSuffix() {
			return GetRuleContext<DrugSuffixContext>(0);
		}
		public NonOpioidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonOpioid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterNonOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitNonOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonOpioid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonOpioidContext nonOpioid() {
		NonOpioidContext _localctx = new NonOpioidContext(Context, State);
		EnterRule(_localctx, 130, RULE_nonOpioid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			description();
			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & 127L) != 0)) {
				{
				State = 701;
				drugSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(DefaultParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(DefaultParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(DefaultParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(DefaultParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HOUR() { return GetTokens(DefaultParser.HOUR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR(int i) {
			return GetToken(DefaultParser.HOUR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DASH() { return GetTokens(DefaultParser.DASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH(int i) {
			return GetToken(DefaultParser.DASH, i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 132, RULE_description);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==HOUR || _la==WORD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 711;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 706;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DASH) {
						{
						State = 705;
						Match(DASH);
						}
					}

					State = 708;
					_la = TokenStream.LA(1);
					if ( !(_la==NUMBER || _la==HOUR || _la==WORD) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 713;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrugFormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext[] formExpression() {
			return GetRuleContexts<FormExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext formExpression(int i) {
			return GetRuleContext<FormExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(DefaultParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(DefaultParser.WORD, i);
		}
		public DrugFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drugForm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDrugForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDrugForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrugForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrugFormContext drugForm() {
		DrugFormContext _localctx = new DrugFormContext(Context, State);
		EnterRule(_localctx, 134, RULE_drugForm);
		int _la;
		try {
			State = 739;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 714;
					formExpression();
					}
					}
					State = 717;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EACH || _la==LIQUID || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 2220900745215L) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 719;
					Match(WORD);
					}
					}
					State = 722;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WORD );
				State = 725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 724;
					formExpression();
					}
					}
					State = 727;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EACH || _la==LIQUID || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 2220900745215L) != 0) );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 729;
					formExpression();
					}
					}
					State = 732;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EACH || _la==LIQUID || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 2220900745215L) != 0) );
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 734;
					Match(WORD);
					}
					}
					State = 737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WORD );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpioidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUPRENORPHINE() { return GetToken(DefaultParser.BUPRENORPHINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUTORPHANOL() { return GetToken(DefaultParser.BUTORPHANOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEINE() { return GetToken(DefaultParser.CODEINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIHYDROCODEINE() { return GetToken(DefaultParser.DIHYDROCODEINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FENTANYL() { return GetToken(DefaultParser.FENTANYL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYDROCODONE() { return GetToken(DefaultParser.HYDROCODONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYDROMORPHONE() { return GetToken(DefaultParser.HYDROMORPHONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVORPHANOL() { return GetToken(DefaultParser.LEVORPHANOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEPERIDINE() { return GetToken(DefaultParser.MEPERIDINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHADONE() { return GetToken(DefaultParser.METHADONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORPHINE() { return GetToken(DefaultParser.MORPHINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPIUM() { return GetToken(DefaultParser.OPIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OXYCODONE() { return GetToken(DefaultParser.OXYCODONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OXYMORPHONE() { return GetToken(DefaultParser.OXYMORPHONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PENTAZOCINE() { return GetToken(DefaultParser.PENTAZOCINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAPENTADOL() { return GetToken(DefaultParser.TAPENTADOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAMADOL() { return GetToken(DefaultParser.TRAMADOL, 0); }
		public OpioidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opioid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitOpioid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpioid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpioidContext opioid() {
		OpioidContext _localctx = new OpioidContext(Context, State);
		EnterRule(_localctx, 136, RULE_opioid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & 131071L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrugSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SULFATE() { return GetToken(DefaultParser.SULFATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HCL() { return GetToken(DefaultParser.HCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYDROCHLORIDE() { return GetToken(DefaultParser.HYDROCHLORIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITARTRATE() { return GetToken(DefaultParser.BITARTRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARTRATE() { return GetToken(DefaultParser.TARTRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHOSPHATE() { return GetToken(DefaultParser.PHOSPHATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLISTIREX() { return GetToken(DefaultParser.POLISTIREX, 0); }
		public DrugSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drugSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterDrugSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitDrugSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrugSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrugSuffixContext drugSuffix() {
		DrugSuffixContext _localctx = new DrugSuffixContext(Context, State);
		EnterRule(_localctx, 138, RULE_drugSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericValueContext numericValue() {
			return GetRuleContext<NumericValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseUnitOfMeasureContext doseUnitOfMeasure() {
			return GetRuleContext<DoseUnitOfMeasureContext>(0);
		}
		public StrengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterStrength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitStrength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrengthContext strength() {
		StrengthContext _localctx = new StrengthContext(Context, State);
		EnterRule(_localctx, 140, RULE_strength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			numericValue();
			State = 746;
			doseUnitOfMeasure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRANDNAME() { return GetToken(DefaultParser.BRANDNAME, 0); }
		public BrandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterBrandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitBrandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrandNameContext brandName() {
		BrandNameContext _localctx = new BrandNameContext(Context, State);
		EnterRule(_localctx, 142, RULE_brandName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(BRANDNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(DefaultParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(DefaultParser.WORD, i);
		}
		public FreeTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterFreeText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitFreeText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeTextContext freeText() {
		FreeTextContext _localctx = new FreeTextContext(Context, State);
		EnterRule(_localctx, 144, RULE_freeText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 750;
					Match(WORD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 753;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestDoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext[] dose() {
			return GetRuleContexts<DoseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose(int i) {
			return GetRuleContext<DoseContext>(i);
		}
		public TestDoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testDose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestDoseContext testDose() {
		TestDoseContext _localctx = new TestDoseContext(Context, State);
		EnterRule(_localctx, 146, RULE_testDose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 755;
				dose();
				}
				}
				State = 758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4362065280L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestAmbiguousDoseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousDoseContext[] ambiguousDose() {
			return GetRuleContexts<AmbiguousDoseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmbiguousDoseContext ambiguousDose(int i) {
			return GetRuleContext<AmbiguousDoseContext>(i);
		}
		public TestAmbiguousDoseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testAmbiguousDose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestAmbiguousDose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestAmbiguousDose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestAmbiguousDoseContext testAmbiguousDose() {
		TestAmbiguousDoseContext _localctx = new TestAmbiguousDoseContext(Context, State);
		EnterRule(_localctx, 148, RULE_testAmbiguousDose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 760;
				ambiguousDose();
				}
				}
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4362065280L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestFormExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext[] formExpression() {
			return GetRuleContexts<FormExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormExpressionContext formExpression(int i) {
			return GetRuleContext<FormExpressionContext>(i);
		}
		public TestFormExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testFormExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestFormExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestFormExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestFormExpressionContext testFormExpression() {
		TestFormExpressionContext _localctx = new TestFormExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_testFormExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 765;
				formExpression();
				}
				}
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EACH || _la==LIQUID || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 2220900745215L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestRouteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext[] route() {
			return GetRuleContexts<RouteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route(int i) {
			return GetRuleContext<RouteContext>(i);
		}
		public TestRouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testRoute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestRoute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestRoute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestRouteContext testRoute() {
		TestRouteContext _localctx = new TestRouteContext(Context, State);
		EnterRule(_localctx, 152, RULE_testRoute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 770;
				route();
				}
				}
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & -8070441736154898431L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 8382463L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestFrequenciesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrequenciesContext frequencies() {
			return GetRuleContext<FrequenciesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoseContext dose() {
			return GetRuleContext<DoseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteContext route() {
			return GetRuleContext<RouteContext>(0);
		}
		public TestFrequenciesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testFrequencies; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestFrequencies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestFrequencies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestFrequenciesContext testFrequencies() {
		TestFrequenciesContext _localctx = new TestFrequenciesContext(Context, State);
		EnterRule(_localctx, 154, RULE_testFrequencies);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 775;
				dose();
				}
				break;
			}
			State = 779;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 778;
				route();
				}
				break;
			}
			State = 781;
			frequencies();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestDurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext[] duration() {
			return GetRuleContexts<DurationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration(int i) {
			return GetRuleContext<DurationContext>(i);
		}
		public TestDurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testDuration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestDurationContext testDuration() {
		TestDurationContext _localctx = new TestDurationContext(Context, State);
		EnterRule(_localctx, 156, RULE_testDuration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 783;
				duration();
				}
				}
				State = 786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 281887294099457L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestAdditionalInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext[] additionalInstruction() {
			return GetRuleContexts<AdditionalInstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalInstructionContext additionalInstruction(int i) {
			return GetRuleContext<AdditionalInstructionContext>(i);
		}
		public TestAdditionalInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testAdditionalInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestAdditionalInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestAdditionalInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestAdditionalInstructionContext testAdditionalInstruction() {
		TestAdditionalInstructionContext _localctx = new TestAdditionalInstructionContext(Context, State);
		EnterRule(_localctx, 158, RULE_testAdditionalInstruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 788;
				additionalInstruction();
				}
				}
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72705206386688L) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 9932111873L) != 0) || _la==DONOTSWALLOW );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestIndicationForUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext[] indicationForUse() {
			return GetRuleContexts<IndicationForUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndicationForUseContext indicationForUse(int i) {
			return GetRuleContext<IndicationForUseContext>(i);
		}
		public TestIndicationForUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testIndicationForUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.EnterTestIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDefaultParserListener typedListener = listener as IDefaultParserListener;
			if (typedListener != null) typedListener.ExitTestIndicationForUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDefaultParserVisitor<TResult> typedVisitor = visitor as IDefaultParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestIndicationForUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestIndicationForUseContext testIndicationForUse() {
		TestIndicationForUseContext _localctx = new TestIndicationForUseContext(Context, State);
		EnterRule(_localctx, 160, RULE_testIndicationForUse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 793;
				indicationForUse();
				}
				}
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AS || _la==FOR || _la==PRN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,247,799,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,1,0,1,0,5,0,165,8,0,10,0,12,0,168,9,0,1,
		0,3,0,171,8,0,1,0,3,0,174,8,0,1,0,1,0,1,1,1,1,5,1,180,8,1,10,1,12,1,183,
		9,1,1,1,1,1,1,2,3,2,188,8,2,1,2,3,2,191,8,2,1,2,1,2,3,2,195,8,2,1,2,1,
		2,1,2,1,2,1,2,5,2,202,8,2,10,2,12,2,205,9,2,1,3,3,3,208,8,3,1,3,1,3,1,
		3,1,3,3,3,214,8,3,1,3,3,3,217,8,3,1,3,3,3,220,8,3,1,3,3,3,223,8,3,1,4,
		3,4,226,8,4,1,4,1,4,3,4,230,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,248,8,5,1,6,1,6,1,7,1,7,3,7,254,8,7,1,8,
		1,8,1,8,1,8,3,8,260,8,8,1,8,1,8,1,8,1,8,3,8,266,8,8,1,9,1,9,3,9,270,8,
		9,1,10,3,10,273,8,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,3,14,
		284,8,14,1,14,1,14,1,14,5,14,289,8,14,10,14,12,14,292,9,14,1,14,3,14,295,
		8,14,1,14,5,14,298,8,14,10,14,12,14,301,9,14,1,15,3,15,304,8,15,1,15,1,
		15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,333,8,16,
		1,17,1,17,5,17,337,8,17,10,17,12,17,340,9,17,1,18,3,18,343,8,18,1,18,3,
		18,346,8,18,1,18,1,18,1,18,1,18,1,18,3,18,353,8,18,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,368,8,19,1,20,3,20,371,
		8,20,1,20,3,20,374,8,20,1,20,1,20,3,20,378,8,20,1,20,1,20,1,20,3,20,383,
		8,20,1,20,3,20,386,8,20,1,21,1,21,3,21,390,8,21,1,22,1,22,1,22,3,22,395,
		8,22,1,23,1,23,3,23,399,8,23,1,23,1,23,1,23,1,23,1,23,3,23,406,8,23,1,
		24,1,24,1,24,3,24,411,8,24,1,24,5,24,414,8,24,10,24,12,24,417,9,24,1,25,
		1,25,1,26,3,26,422,8,26,1,26,3,26,425,8,26,1,26,3,26,428,8,26,1,26,3,26,
		431,8,26,1,26,3,26,434,8,26,1,26,1,26,1,26,1,26,3,26,440,8,26,1,27,1,27,
		3,27,444,8,27,1,27,3,27,447,8,27,1,27,5,27,450,8,27,10,27,12,27,453,9,
		27,1,28,1,28,3,28,457,8,28,1,28,3,28,460,8,28,1,29,1,29,1,30,1,30,1,31,
		3,31,467,8,31,1,31,1,31,3,31,471,8,31,1,31,1,31,1,31,1,31,1,31,1,31,3,
		31,479,8,31,1,31,3,31,482,8,31,1,31,3,31,485,8,31,1,32,1,32,1,32,1,32,
		3,32,491,8,32,1,32,3,32,494,8,32,1,32,1,32,1,33,3,33,499,8,33,1,33,1,33,
		1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,3,36,512,8,36,1,37,1,37,1,
		37,1,37,1,37,1,37,1,37,3,37,521,8,37,1,37,3,37,524,8,37,1,37,1,37,1,37,
		3,37,529,8,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,
		40,3,40,543,8,40,1,41,1,41,3,41,547,8,41,1,41,1,41,1,41,1,42,1,42,1,42,
		1,43,1,43,1,43,1,43,3,43,559,8,43,1,44,1,44,1,44,3,44,564,8,44,1,44,1,
		44,1,45,1,45,1,46,1,46,3,46,572,8,46,1,46,1,46,3,46,576,8,46,1,47,1,47,
		1,47,3,47,581,8,47,1,47,3,47,584,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,
		48,1,48,4,48,594,8,48,11,48,12,48,595,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,3,49,607,8,49,1,50,1,50,1,51,1,51,3,51,613,8,51,1,52,1,52,
		1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,55,1,55,3,55,629,8,
		55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,3,59,642,8,59,
		3,59,644,8,59,1,59,5,59,647,8,59,10,59,12,59,650,9,59,1,60,1,60,1,61,1,
		61,1,61,5,61,657,8,61,10,61,12,61,660,9,61,1,61,3,61,663,8,61,1,61,3,61,
		666,8,61,1,61,1,61,1,62,1,62,3,62,672,8,62,1,63,5,63,675,8,63,10,63,12,
		63,678,9,63,1,63,1,63,3,63,682,8,63,1,63,3,63,685,8,63,1,63,1,63,1,64,
		1,64,1,64,1,64,1,64,3,64,694,8,64,1,64,3,64,697,8,64,1,64,1,64,1,65,1,
		65,3,65,703,8,65,1,66,1,66,3,66,707,8,66,1,66,5,66,710,8,66,10,66,12,66,
		713,9,66,1,67,4,67,716,8,67,11,67,12,67,717,1,67,4,67,721,8,67,11,67,12,
		67,722,1,67,4,67,726,8,67,11,67,12,67,727,1,67,4,67,731,8,67,11,67,12,
		67,732,1,67,4,67,736,8,67,11,67,12,67,737,3,67,740,8,67,1,68,1,68,1,69,
		1,69,1,70,1,70,1,70,1,71,1,71,1,72,4,72,752,8,72,11,72,12,72,753,1,73,
		4,73,757,8,73,11,73,12,73,758,1,74,4,74,762,8,74,11,74,12,74,763,1,75,
		4,75,767,8,75,11,75,12,75,768,1,76,4,76,772,8,76,11,76,12,76,773,1,77,
		3,77,777,8,77,1,77,3,77,780,8,77,1,77,1,77,1,78,4,78,785,8,78,11,78,12,
		78,786,1,79,4,79,790,8,79,11,79,12,79,791,1,80,4,80,795,8,80,11,80,12,
		80,796,1,80,0,0,81,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
		0,34,2,0,3,3,6,6,5,0,157,158,160,160,164,164,166,166,173,173,3,0,60,60,
		70,70,132,156,1,0,202,218,3,0,47,47,90,90,110,110,2,0,169,169,172,172,
		2,0,60,60,90,90,2,0,8,8,32,32,5,0,34,34,60,60,63,63,90,90,119,119,2,0,
		104,105,113,113,2,0,63,63,84,84,4,0,115,115,122,123,125,128,130,131,2,
		0,6,6,39,39,2,0,38,38,91,91,2,0,60,60,63,63,3,0,37,37,42,42,46,46,2,0,
		74,74,81,81,3,0,116,116,120,120,129,129,1,0,184,185,2,0,37,37,46,46,4,
		0,44,44,51,51,71,71,73,73,2,0,65,65,84,84,3,0,37,37,46,46,112,112,3,0,
		54,54,64,64,73,73,3,0,70,70,75,75,111,111,2,0,26,31,183,183,2,0,4,4,106,
		106,1,0,182,189,1,0,195,201,1,0,190,194,4,0,7,8,10,10,12,12,14,25,3,0,
		32,32,185,185,245,245,1,0,219,235,1,0,236,242,896,0,162,1,0,0,0,2,177,
		1,0,0,0,4,187,1,0,0,0,6,207,1,0,0,0,8,229,1,0,0,0,10,247,1,0,0,0,12,249,
		1,0,0,0,14,253,1,0,0,0,16,259,1,0,0,0,18,269,1,0,0,0,20,272,1,0,0,0,22,
		276,1,0,0,0,24,278,1,0,0,0,26,280,1,0,0,0,28,283,1,0,0,0,30,303,1,0,0,
		0,32,332,1,0,0,0,34,334,1,0,0,0,36,345,1,0,0,0,38,367,1,0,0,0,40,370,1,
		0,0,0,42,389,1,0,0,0,44,394,1,0,0,0,46,405,1,0,0,0,48,407,1,0,0,0,50,418,
		1,0,0,0,52,421,1,0,0,0,54,441,1,0,0,0,56,456,1,0,0,0,58,461,1,0,0,0,60,
		463,1,0,0,0,62,466,1,0,0,0,64,490,1,0,0,0,66,498,1,0,0,0,68,502,1,0,0,
		0,70,506,1,0,0,0,72,511,1,0,0,0,74,523,1,0,0,0,76,530,1,0,0,0,78,535,1,
		0,0,0,80,542,1,0,0,0,82,544,1,0,0,0,84,551,1,0,0,0,86,558,1,0,0,0,88,560,
		1,0,0,0,90,567,1,0,0,0,92,575,1,0,0,0,94,580,1,0,0,0,96,593,1,0,0,0,98,
		606,1,0,0,0,100,608,1,0,0,0,102,612,1,0,0,0,104,614,1,0,0,0,106,618,1,
		0,0,0,108,624,1,0,0,0,110,628,1,0,0,0,112,632,1,0,0,0,114,634,1,0,0,0,
		116,636,1,0,0,0,118,638,1,0,0,0,120,651,1,0,0,0,122,653,1,0,0,0,124,671,
		1,0,0,0,126,684,1,0,0,0,128,688,1,0,0,0,130,700,1,0,0,0,132,704,1,0,0,
		0,134,739,1,0,0,0,136,741,1,0,0,0,138,743,1,0,0,0,140,745,1,0,0,0,142,
		748,1,0,0,0,144,751,1,0,0,0,146,756,1,0,0,0,148,761,1,0,0,0,150,766,1,
		0,0,0,152,771,1,0,0,0,154,776,1,0,0,0,156,784,1,0,0,0,158,789,1,0,0,0,
		160,794,1,0,0,0,162,166,3,4,2,0,163,165,3,4,2,0,164,163,1,0,0,0,165,168,
		1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,173,1,0,0,0,168,166,1,0,0,
		0,169,171,7,0,0,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,
		174,3,144,72,0,173,170,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,
		5,0,0,1,176,1,1,0,0,0,177,181,3,6,3,0,178,180,3,6,3,0,179,178,1,0,0,0,
		180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,184,1,0,0,0,183,181,
		1,0,0,0,184,185,5,0,0,1,185,3,1,0,0,0,186,188,3,8,4,0,187,186,1,0,0,0,
		187,188,1,0,0,0,188,190,1,0,0,0,189,191,3,10,5,0,190,189,1,0,0,0,190,191,
		1,0,0,0,191,194,1,0,0,0,192,195,3,16,8,0,193,195,3,12,6,0,194,192,1,0,
		0,0,194,193,1,0,0,0,195,203,1,0,0,0,196,202,3,28,14,0,197,202,3,34,17,
		0,198,202,3,72,36,0,199,202,3,80,40,0,200,202,3,92,46,0,201,196,1,0,0,
		0,201,197,1,0,0,0,201,198,1,0,0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,
		205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,5,1,0,0,0,205,203,1,0,
		0,0,206,208,3,8,4,0,207,206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,
		210,3,10,5,0,210,211,3,16,8,0,211,213,3,28,14,0,212,214,3,34,17,0,213,
		212,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,217,3,80,40,0,216,215,
		1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,220,3,92,46,0,219,218,1,0,
		0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,223,3,72,36,0,222,221,1,0,0,0,
		222,223,1,0,0,0,223,7,1,0,0,0,224,226,5,39,0,0,225,224,1,0,0,0,225,226,
		1,0,0,0,226,227,1,0,0,0,227,230,5,101,0,0,228,230,5,85,0,0,229,225,1,0,
		0,0,229,228,1,0,0,0,230,9,1,0,0,0,231,248,5,35,0,0,232,248,5,40,0,0,233,
		248,5,49,0,0,234,235,5,49,0,0,235,236,5,39,0,0,236,248,5,98,0,0,237,248,
		5,53,0,0,238,248,5,66,0,0,239,248,5,56,0,0,240,248,5,55,0,0,241,248,5,
		57,0,0,242,248,5,58,0,0,243,248,5,88,0,0,244,248,5,96,0,0,245,248,5,99,
		0,0,246,248,5,109,0,0,247,231,1,0,0,0,247,232,1,0,0,0,247,233,1,0,0,0,
		247,234,1,0,0,0,247,237,1,0,0,0,247,238,1,0,0,0,247,239,1,0,0,0,247,240,
		1,0,0,0,247,241,1,0,0,0,247,242,1,0,0,0,247,243,1,0,0,0,247,244,1,0,0,
		0,247,245,1,0,0,0,247,246,1,0,0,0,248,11,1,0,0,0,249,250,3,14,7,0,250,
		13,1,0,0,0,251,254,3,102,51,0,252,254,3,104,52,0,253,251,1,0,0,0,253,252,
		1,0,0,0,254,15,1,0,0,0,255,256,3,14,7,0,256,257,3,18,9,0,257,260,1,0,0,
		0,258,260,3,106,53,0,259,255,1,0,0,0,259,258,1,0,0,0,260,265,1,0,0,0,261,
		262,5,1,0,0,262,263,3,16,8,0,263,264,5,2,0,0,264,266,1,0,0,0,265,261,1,
		0,0,0,265,266,1,0,0,0,266,17,1,0,0,0,267,270,3,20,10,0,268,270,3,26,13,
		0,269,267,1,0,0,0,269,268,1,0,0,0,270,19,1,0,0,0,271,273,3,22,11,0,272,
		271,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,275,3,24,12,0,275,21,1,
		0,0,0,276,277,7,1,0,0,277,23,1,0,0,0,278,279,7,2,0,0,279,25,1,0,0,0,280,
		281,7,3,0,0,281,27,1,0,0,0,282,284,3,30,15,0,283,282,1,0,0,0,283,284,1,
		0,0,0,284,285,1,0,0,0,285,290,3,32,16,0,286,287,5,5,0,0,287,289,3,32,16,
		0,288,286,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,
		299,1,0,0,0,292,290,1,0,0,0,293,295,5,85,0,0,294,293,1,0,0,0,294,295,1,
		0,0,0,295,296,1,0,0,0,296,298,3,28,14,0,297,294,1,0,0,0,298,301,1,0,0,
		0,299,297,1,0,0,0,299,300,1,0,0,0,300,29,1,0,0,0,301,299,1,0,0,0,302,304,
		5,175,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,306,7,4,
		0,0,306,31,1,0,0,0,307,333,5,168,0,0,308,333,5,160,0,0,309,333,5,161,0,
		0,310,333,5,162,0,0,311,312,5,107,0,0,312,313,5,100,0,0,313,333,5,171,
		0,0,314,333,5,163,0,0,315,333,5,164,0,0,316,333,5,165,0,0,317,318,7,5,
		0,0,318,333,5,170,0,0,319,333,5,178,0,0,320,333,5,159,0,0,321,322,7,6,
		0,0,322,333,5,82,0,0,323,333,5,173,0,0,324,333,5,174,0,0,325,333,5,176,
		0,0,326,333,5,177,0,0,327,333,5,166,0,0,328,333,5,167,0,0,329,333,5,179,
		0,0,330,333,5,180,0,0,331,333,5,181,0,0,332,307,1,0,0,0,332,308,1,0,0,
		0,332,309,1,0,0,0,332,310,1,0,0,0,332,311,1,0,0,0,332,314,1,0,0,0,332,
		315,1,0,0,0,332,316,1,0,0,0,332,317,1,0,0,0,332,319,1,0,0,0,332,320,1,
		0,0,0,332,321,1,0,0,0,332,323,1,0,0,0,332,324,1,0,0,0,332,325,1,0,0,0,
		332,326,1,0,0,0,332,327,1,0,0,0,332,328,1,0,0,0,332,329,1,0,0,0,332,330,
		1,0,0,0,332,331,1,0,0,0,333,33,1,0,0,0,334,338,3,36,18,0,335,337,3,36,
		18,0,336,335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
		35,1,0,0,0,340,338,1,0,0,0,341,343,5,39,0,0,342,341,1,0,0,0,342,343,1,
		0,0,0,343,344,1,0,0,0,344,346,5,48,0,0,345,342,1,0,0,0,345,346,1,0,0,0,
		346,352,1,0,0,0,347,353,3,38,19,0,348,353,3,40,20,0,349,353,3,48,24,0,
		350,353,3,50,25,0,351,353,3,52,26,0,352,347,1,0,0,0,352,348,1,0,0,0,352,
		349,1,0,0,0,352,350,1,0,0,0,352,351,1,0,0,0,353,37,1,0,0,0,354,355,5,63,
		0,0,355,356,3,102,51,0,356,357,5,185,0,0,357,358,5,1,0,0,358,359,3,102,
		51,0,359,360,5,105,0,0,360,361,5,5,0,0,361,362,5,186,0,0,362,363,5,2,0,
		0,363,368,1,0,0,0,364,365,5,41,0,0,365,366,7,7,0,0,366,368,5,135,0,0,367,
		354,1,0,0,0,367,364,1,0,0,0,368,39,1,0,0,0,369,371,3,44,22,0,370,369,1,
		0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,374,3,46,23,0,373,372,1,0,0,
		0,373,374,1,0,0,0,374,385,1,0,0,0,375,377,7,8,0,0,376,378,3,42,21,0,377,
		376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,386,3,110,55,0,380,386,
		3,50,25,0,381,383,5,119,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,
		0,0,0,384,386,3,116,58,0,385,375,1,0,0,0,385,380,1,0,0,0,385,382,1,0,0,
		0,386,41,1,0,0,0,387,390,3,102,51,0,388,390,3,104,52,0,389,387,1,0,0,0,
		389,388,1,0,0,0,390,43,1,0,0,0,391,395,5,72,0,0,392,393,5,108,0,0,393,
		395,5,106,0,0,394,391,1,0,0,0,394,392,1,0,0,0,395,45,1,0,0,0,396,399,3,
		102,51,0,397,399,3,104,52,0,398,396,1,0,0,0,398,397,1,0,0,0,399,400,1,
		0,0,0,400,401,7,9,0,0,401,406,1,0,0,0,402,406,5,9,0,0,403,406,5,11,0,0,
		404,406,5,13,0,0,405,398,1,0,0,0,405,402,1,0,0,0,405,403,1,0,0,0,405,404,
		1,0,0,0,406,47,1,0,0,0,407,408,7,10,0,0,408,415,3,114,57,0,409,411,5,39,
		0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,414,3,114,57,0,
		413,410,1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,49,
		1,0,0,0,417,415,1,0,0,0,418,419,7,11,0,0,419,51,1,0,0,0,420,422,5,39,0,
		0,421,420,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,425,5,101,0,0,424,
		423,1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,428,5,42,0,0,427,426,1,
		0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,431,5,68,0,0,430,429,1,0,0,0,
		430,431,1,0,0,0,431,433,1,0,0,0,432,434,5,100,0,0,433,432,1,0,0,0,433,
		434,1,0,0,0,434,439,1,0,0,0,435,440,3,54,27,0,436,440,3,62,31,0,437,440,
		3,64,32,0,438,440,3,66,33,0,439,435,1,0,0,0,439,436,1,0,0,0,439,437,1,
		0,0,0,439,438,1,0,0,0,440,53,1,0,0,0,441,451,3,56,28,0,442,444,7,12,0,
		0,443,442,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,447,5,42,0,0,446,
		445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,450,3,56,28,0,449,443,
		1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,55,1,0,0,0,
		453,451,1,0,0,0,454,457,3,58,29,0,455,457,3,60,30,0,456,454,1,0,0,0,456,
		455,1,0,0,0,457,459,1,0,0,0,458,460,7,13,0,0,459,458,1,0,0,0,459,460,1,
		0,0,0,460,57,1,0,0,0,461,462,5,32,0,0,462,59,1,0,0,0,463,464,5,33,0,0,
		464,61,1,0,0,0,465,467,7,14,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,484,
		1,0,0,0,468,485,5,76,0,0,469,471,5,186,0,0,470,469,1,0,0,0,470,471,1,0,
		0,0,471,472,1,0,0,0,472,473,7,15,0,0,473,485,7,16,0,0,474,485,5,36,0,0,
		475,485,5,62,0,0,476,478,5,80,0,0,477,479,5,104,0,0,478,477,1,0,0,0,478,
		479,1,0,0,0,479,485,1,0,0,0,480,482,3,68,34,0,481,480,1,0,0,0,481,482,
		1,0,0,0,482,483,1,0,0,0,483,485,5,43,0,0,484,468,1,0,0,0,484,470,1,0,0,
		0,484,474,1,0,0,0,484,475,1,0,0,0,484,476,1,0,0,0,484,481,1,0,0,0,485,
		63,1,0,0,0,486,491,5,46,0,0,487,491,5,37,0,0,488,491,5,112,0,0,489,491,
		3,68,34,0,490,486,1,0,0,0,490,487,1,0,0,0,490,488,1,0,0,0,490,489,1,0,
		0,0,491,493,1,0,0,0,492,494,7,14,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,
		495,1,0,0,0,495,496,3,70,35,0,496,65,1,0,0,0,497,499,5,63,0,0,498,497,
		1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,501,7,17,0,0,501,67,1,0,0,
		0,502,503,3,102,51,0,503,504,7,18,0,0,504,505,7,19,0,0,505,69,1,0,0,0,
		506,507,7,20,0,0,507,71,1,0,0,0,508,512,3,74,37,0,509,512,3,76,38,0,510,
		512,3,78,39,0,511,508,1,0,0,0,511,509,1,0,0,0,511,510,1,0,0,0,512,73,1,
		0,0,0,513,524,5,65,0,0,514,515,5,102,0,0,515,516,5,59,0,0,516,524,5,34,
		0,0,517,518,5,77,0,0,518,520,5,69,0,0,519,521,5,65,0,0,520,519,1,0,0,0,
		520,521,1,0,0,0,521,524,1,0,0,0,522,524,5,113,0,0,523,513,1,0,0,0,523,
		514,1,0,0,0,523,517,1,0,0,0,523,522,1,0,0,0,524,525,1,0,0,0,525,526,3,
		102,51,0,526,528,3,110,55,0,527,529,5,97,0,0,528,527,1,0,0,0,528,529,1,
		0,0,0,529,75,1,0,0,0,530,531,7,21,0,0,531,532,5,100,0,0,532,533,3,100,
		50,0,533,534,3,110,55,0,534,77,1,0,0,0,535,536,5,103,0,0,536,79,1,0,0,
		0,537,543,3,86,43,0,538,543,3,88,44,0,539,543,3,84,42,0,540,543,3,82,41,
		0,541,543,3,90,45,0,542,537,1,0,0,0,542,538,1,0,0,0,542,539,1,0,0,0,542,
		540,1,0,0,0,542,541,1,0,0,0,543,81,1,0,0,0,544,546,5,84,0,0,545,547,5,
		34,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,549,5,61,0,
		0,549,550,5,95,0,0,550,83,1,0,0,0,551,552,5,41,0,0,552,553,5,52,0,0,553,
		85,1,0,0,0,554,555,7,22,0,0,555,559,7,23,0,0,556,559,5,114,0,0,557,559,
		5,117,0,0,558,554,1,0,0,0,558,556,1,0,0,0,558,557,1,0,0,0,559,87,1,0,0,
		0,560,563,5,112,0,0,561,562,5,89,0,0,562,564,5,83,0,0,563,561,1,0,0,0,
		563,564,1,0,0,0,564,565,1,0,0,0,565,566,7,24,0,0,566,89,1,0,0,0,567,568,
		5,243,0,0,568,91,1,0,0,0,569,572,5,65,0,0,570,572,3,94,47,0,571,569,1,
		0,0,0,571,570,1,0,0,0,572,573,1,0,0,0,573,576,3,96,48,0,574,576,3,94,47,
		0,575,571,1,0,0,0,575,574,1,0,0,0,576,93,1,0,0,0,577,578,5,41,0,0,578,
		581,5,79,0,0,579,581,5,118,0,0,580,577,1,0,0,0,580,579,1,0,0,0,581,583,
		1,0,0,0,582,584,5,65,0,0,583,582,1,0,0,0,583,584,1,0,0,0,584,95,1,0,0,
		0,585,594,3,144,72,0,586,594,3,98,49,0,587,594,5,85,0,0,588,594,5,39,0,
		0,589,594,5,106,0,0,590,594,5,5,0,0,591,594,5,68,0,0,592,594,5,100,0,0,
		593,585,1,0,0,0,593,586,1,0,0,0,593,587,1,0,0,0,593,588,1,0,0,0,593,589,
		1,0,0,0,593,590,1,0,0,0,593,591,1,0,0,0,593,592,1,0,0,0,594,595,1,0,0,
		0,595,593,1,0,0,0,595,596,1,0,0,0,596,97,1,0,0,0,597,607,5,50,0,0,598,
		607,5,67,0,0,599,607,5,78,0,0,600,607,5,87,0,0,601,607,5,93,0,0,602,603,
		5,92,0,0,603,604,5,83,0,0,604,607,5,45,0,0,605,607,5,94,0,0,606,597,1,
		0,0,0,606,598,1,0,0,0,606,599,1,0,0,0,606,600,1,0,0,0,606,601,1,0,0,0,
		606,602,1,0,0,0,606,605,1,0,0,0,607,99,1,0,0,0,608,609,7,25,0,0,609,101,
		1,0,0,0,610,613,5,32,0,0,611,613,3,118,59,0,612,610,1,0,0,0,612,611,1,
		0,0,0,613,103,1,0,0,0,614,615,3,102,51,0,615,616,3,108,54,0,616,617,3,
		102,51,0,617,105,1,0,0,0,618,619,3,102,51,0,619,620,3,26,13,0,620,621,
		3,108,54,0,621,622,3,102,51,0,622,623,3,26,13,0,623,107,1,0,0,0,624,625,
		7,26,0,0,625,109,1,0,0,0,626,629,3,100,50,0,627,629,5,86,0,0,628,626,1,
		0,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,631,3,112,56,
		0,631,111,1,0,0,0,632,633,7,27,0,0,633,113,1,0,0,0,634,635,7,28,0,0,635,
		115,1,0,0,0,636,637,7,29,0,0,637,117,1,0,0,0,638,648,3,120,60,0,639,641,
		5,39,0,0,640,642,5,34,0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,644,1,0,
		0,0,643,639,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,647,3,120,60,0,
		646,643,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,119,
		1,0,0,0,650,648,1,0,0,0,651,652,7,30,0,0,652,121,1,0,0,0,653,658,3,124,
		62,0,654,655,5,5,0,0,655,657,3,124,62,0,656,654,1,0,0,0,657,660,1,0,0,
		0,658,656,1,0,0,0,658,659,1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,661,
		663,3,134,67,0,662,661,1,0,0,0,662,663,1,0,0,0,663,665,1,0,0,0,664,666,
		3,142,71,0,665,664,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,668,5,0,
		0,1,668,123,1,0,0,0,669,672,3,126,63,0,670,672,3,128,64,0,671,669,1,0,
		0,0,671,670,1,0,0,0,672,125,1,0,0,0,673,675,3,132,66,0,674,673,1,0,0,0,
		675,678,1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,679,1,0,0,0,678,676,
		1,0,0,0,679,681,3,136,68,0,680,682,3,138,69,0,681,680,1,0,0,0,681,682,
		1,0,0,0,682,685,1,0,0,0,683,685,3,130,65,0,684,676,1,0,0,0,684,683,1,0,
		0,0,685,686,1,0,0,0,686,687,3,140,70,0,687,127,1,0,0,0,688,693,3,140,70,
		0,689,690,3,136,68,0,690,691,3,138,69,0,691,694,1,0,0,0,692,694,3,130,
		65,0,693,689,1,0,0,0,693,692,1,0,0,0,694,696,1,0,0,0,695,697,3,28,14,0,
		696,695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,699,3,140,70,0,699,
		129,1,0,0,0,700,702,3,132,66,0,701,703,3,138,69,0,702,701,1,0,0,0,702,
		703,1,0,0,0,703,131,1,0,0,0,704,711,7,31,0,0,705,707,5,4,0,0,706,705,1,
		0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,710,7,31,0,0,709,706,1,0,0,0,
		710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,133,1,0,0,0,713,711,
		1,0,0,0,714,716,3,20,10,0,715,714,1,0,0,0,716,717,1,0,0,0,717,715,1,0,
		0,0,717,718,1,0,0,0,718,740,1,0,0,0,719,721,5,245,0,0,720,719,1,0,0,0,
		721,722,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,725,1,0,0,0,724,726,
		3,20,10,0,725,724,1,0,0,0,726,727,1,0,0,0,727,725,1,0,0,0,727,728,1,0,
		0,0,728,740,1,0,0,0,729,731,3,20,10,0,730,729,1,0,0,0,731,732,1,0,0,0,
		732,730,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,736,5,245,0,0,735,
		734,1,0,0,0,736,737,1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,740,1,
		0,0,0,739,715,1,0,0,0,739,720,1,0,0,0,739,730,1,0,0,0,740,135,1,0,0,0,
		741,742,7,32,0,0,742,137,1,0,0,0,743,744,7,33,0,0,744,139,1,0,0,0,745,
		746,3,102,51,0,746,747,3,26,13,0,747,141,1,0,0,0,748,749,5,246,0,0,749,
		143,1,0,0,0,750,752,5,245,0,0,751,750,1,0,0,0,752,753,1,0,0,0,753,751,
		1,0,0,0,753,754,1,0,0,0,754,145,1,0,0,0,755,757,3,16,8,0,756,755,1,0,0,
		0,757,758,1,0,0,0,758,756,1,0,0,0,758,759,1,0,0,0,759,147,1,0,0,0,760,
		762,3,12,6,0,761,760,1,0,0,0,762,763,1,0,0,0,763,761,1,0,0,0,763,764,1,
		0,0,0,764,149,1,0,0,0,765,767,3,20,10,0,766,765,1,0,0,0,767,768,1,0,0,
		0,768,766,1,0,0,0,768,769,1,0,0,0,769,151,1,0,0,0,770,772,3,28,14,0,771,
		770,1,0,0,0,772,773,1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,153,1,
		0,0,0,775,777,3,16,8,0,776,775,1,0,0,0,776,777,1,0,0,0,777,779,1,0,0,0,
		778,780,3,28,14,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,
		782,3,34,17,0,782,155,1,0,0,0,783,785,3,72,36,0,784,783,1,0,0,0,785,786,
		1,0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,157,1,0,0,0,788,790,3,80,40,
		0,789,788,1,0,0,0,790,791,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,
		159,1,0,0,0,793,795,3,92,46,0,794,793,1,0,0,0,795,796,1,0,0,0,796,794,
		1,0,0,0,796,797,1,0,0,0,797,161,1,0,0,0,111,166,170,173,181,187,190,194,
		201,203,207,213,216,219,222,225,229,247,253,259,265,269,272,283,290,294,
		299,303,332,338,342,345,352,367,370,373,377,382,385,389,394,398,405,410,
		415,421,424,427,430,433,439,443,446,451,456,459,466,470,478,481,484,490,
		493,498,511,520,523,528,542,546,558,563,571,575,580,583,593,595,606,612,
		628,641,643,648,658,662,665,671,676,681,684,693,696,702,706,711,717,722,
		727,732,737,739,753,758,763,768,773,776,779,786,791,796
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace PracticeFusion.MmeCalculator.Core.Parsers.Generated
